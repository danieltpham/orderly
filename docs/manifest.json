{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.10.7", "generated_at": "2025-08-10T04:25:06.816094Z", "invocation_id": "fb622bbf-184e-4d12-be2e-d04adf2d338d", "invocation_started_at": "2025-08-10T03:16:05.223050+00:00", "env": {}, "project_name": "orderly", "project_id": "aee88a33a7d6aa390510e0361084e8d8", "user_id": "3f216b1b-7c73-406e-81a7-5de46f14f008", "send_anonymous_usage_stats": true, "adapter_type": "duckdb", "quoting": {"database": true, "schema": true, "identifier": true, "column": null}}, "nodes": {"model.orderly.raw_cost_centres": {"database": "orderly", "schema": "dev_bronze", "name": "raw_cost_centres", "resource_type": "model", "package_name": "orderly", "path": "bronze\\raw_cost_centres.sql", "original_file_path": "models\\bronze\\raw_cost_centres.sql", "unique_id": "model.orderly.raw_cost_centres", "fqn": ["orderly", "bronze", "raw_cost_centres"], "alias": "raw_cost_centres", "checksum": {"name": "sha256", "checksum": "ef4d012157befbc71c47467a9f435a26905e768d3359a619e1a86aa7252a2e3d"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["layer:bronze"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'bronze') }}{% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#8B4513"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:bronze"], "description": "Raw cost centres data loaded from CSV file", "columns": {"cost_centre_id": {"name": "cost_centre_id", "description": "Unique cost centre identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cost_centre_name": {"name": "cost_centre_name", "description": "Cost centre name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country_code": {"name": "country_code", "description": "ISO country code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#8B4513"}, "patch_path": "orderly://models\\bronze\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:bronze"], "schema": "bronze", "docs": {"node_color": "#8B4513"}, "post-hook": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'bronze') }}{% endif %}"}, "created_at": 1754795766.2359266, "relation_name": "\"orderly\".\"dev_bronze\".\"raw_cost_centres\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Raw cost centres data from CSV\r\n-- Bronze layer: immutable, no business logic transformations\r\nSELECT *\r\nFROM read_csv_auto('{{ var(\"source_data_path\") }}/cost_centres.csv', header=true, filename=true)", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": []}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\raw_cost_centres.sql", "compiled": true, "compiled_code": "\n\n-- Raw cost centres data from CSV\n-- Bronze layer: immutable, no business logic transformations\nSELECT *\nFROM read_csv_auto('data/source/cost_centres.csv', header=true, filename=true)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["cost_centre_id"], "time_spine": null}, "model.orderly.raw_exchange_rates": {"database": "orderly", "schema": "dev_bronze", "name": "raw_exchange_rates", "resource_type": "model", "package_name": "orderly", "path": "bronze\\raw_exchange_rates.sql", "original_file_path": "models\\bronze\\raw_exchange_rates.sql", "unique_id": "model.orderly.raw_exchange_rates", "fqn": ["orderly", "bronze", "raw_exchange_rates"], "alias": "raw_exchange_rates", "checksum": {"name": "sha256", "checksum": "31c4a66f6dde7cfc5853b9a2936f62f6481e8e1c27fac8ef6d39142984e58cc8"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["layer:bronze"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'bronze') }}{% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#8B4513"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:bronze"], "description": "Raw exchange rates data loaded from CSV file", "columns": {"date": {"name": "date", "description": "Exchange rate date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "from_currency": {"name": "from_currency", "description": "Source currency code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "to_currency": {"name": "to_currency", "description": "Target currency code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "exchange_rate": {"name": "exchange_rate", "description": "Exchange rate value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#8B4513"}, "patch_path": "orderly://models\\bronze\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:bronze"], "schema": "bronze", "docs": {"node_color": "#8B4513"}, "post-hook": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'bronze') }}{% endif %}"}, "created_at": 1754795766.236786, "relation_name": "\"orderly\".\"dev_bronze\".\"raw_exchange_rates\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Raw exchange rates data from CSV\r\n-- Bronze layer: immutable, no business logic transformations\r\nSELECT *\r\nFROM read_csv_auto('{{ var(\"source_data_path\") }}/exchange_rates.csv', header=true, filename=true)", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": []}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\raw_exchange_rates.sql", "compiled": true, "compiled_code": "\n\n-- Raw exchange rates data from CSV\n-- Bronze layer: immutable, no business logic transformations\nSELECT *\nFROM read_csv_auto('data/source/exchange_rates.csv', header=true, filename=true)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.orderly.raw_orders": {"database": "orderly", "schema": "dev_bronze", "name": "raw_orders", "resource_type": "model", "package_name": "orderly", "path": "bronze\\raw_orders.sql", "original_file_path": "models\\bronze\\raw_orders.sql", "unique_id": "model.orderly.raw_orders", "fqn": ["orderly", "bronze", "raw_orders"], "alias": "raw_orders", "checksum": {"name": "sha256", "checksum": "9802d81859c03bff201a213a165a485dec707ef7d7d8fea274487f6529318097"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["layer:bronze"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'bronze') }}{% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#8B4513"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:bronze"], "description": "Raw orders data loaded from JSON files in data/source/", "columns": {"order_id": {"name": "order_id", "description": "Unique order identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sku_id": {"name": "sku_id", "description": "Product SKU identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_date": {"name": "order_date", "description": "Date when order was placed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#8B4513"}, "patch_path": "orderly://models\\bronze\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:bronze"], "schema": "bronze", "docs": {"node_color": "#8B4513"}, "post-hook": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'bronze') }}{% endif %}"}, "created_at": 1754795766.2343488, "relation_name": "\"orderly\".\"dev_bronze\".\"raw_orders\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Raw orders data from JSON files\r\n-- Bronze layer: immutable, no business logic transformations\r\nSELECT *\r\nFROM read_json_auto('{{ var(\"source_data_path\") }}/orders_*.json', filename=true)", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": []}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\raw_orders.sql", "compiled": true, "compiled_code": "\n\n-- Raw orders data from JSON files\n-- Bronze layer: immutable, no business logic transformations\nSELECT *\nFROM read_json_auto('data/source/orders_*.json', filename=true)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.orderly.raw_vendor_master": {"database": "orderly", "schema": "dev_bronze", "name": "raw_vendor_master", "resource_type": "model", "package_name": "orderly", "path": "bronze\\raw_vendor_master.sql", "original_file_path": "models\\bronze\\raw_vendor_master.sql", "unique_id": "model.orderly.raw_vendor_master", "fqn": ["orderly", "bronze", "raw_vendor_master"], "alias": "raw_vendor_master", "checksum": {"name": "sha256", "checksum": "dc941667e1abee01c1c5ac658cc5b9ad13afd79104b09ea905d58f770f5ebfd4"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["layer:bronze"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'bronze') }}{% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#8B4513"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:bronze"], "description": "Raw vendor master data loaded from CSV file", "columns": {"vendor_id": {"name": "vendor_id", "description": "Unique vendor identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_name": {"name": "vendor_name", "description": "Vendor company name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#8B4513"}, "patch_path": "orderly://models\\bronze\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:bronze"], "schema": "bronze", "docs": {"node_color": "#8B4513"}, "post-hook": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'bronze') }}{% endif %}"}, "created_at": 1754795766.2351649, "relation_name": "\"orderly\".\"dev_bronze\".\"raw_vendor_master\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Raw vendor master data from CSV\r\n-- Bronze layer: immutable, no business logic transformations\r\nSELECT *\r\nFROM read_csv_auto('{{ var(\"source_data_path\") }}/vendor_master.csv', header=true, filename=true)", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": []}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\raw_vendor_master.sql", "compiled": true, "compiled_code": "\n\n-- Raw vendor master data from CSV\n-- Bronze layer: immutable, no business logic transformations\nSELECT *\nFROM read_csv_auto('data/source/vendor_master.csv', header=true, filename=true)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["vendor_id"], "time_spine": null}, "model.orderly.dim_cost_centre": {"database": "orderly", "schema": "dev_gold", "name": "dim_cost_centre", "resource_type": "model", "package_name": "orderly", "path": "gold\\dim_cost_centre.sql", "original_file_path": "models\\gold\\dim_cost_centre.sql", "unique_id": "model.orderly.dim_cost_centre", "fqn": ["orderly", "gold", "dim_cost_centre"], "alias": "dim_cost_centre", "checksum": {"name": "sha256", "checksum": "1ab4a83e8d3350d8720c1bbe98d41cbf4f5b43c80d22f1ea081df1e451c5ee07"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": ["layer:gold"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ export_to_csv_posthook('data/exports', 'gold') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FFD700"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:gold"], "description": "Cost centre dimension with organizational hierarchy and geographic attributes", "columns": {"cost_centre_key": {"name": "cost_centre_key", "description": "Surrogate key (MD5 hash of cost_centre_id)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cost_centre_id": {"name": "cost_centre_id", "description": "Business key for cost centre", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cost_centre_name": {"name": "cost_centre_name", "description": "Display name of the cost centre", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country_code": {"name": "country_code", "description": "ISO country code (AU/US)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region": {"name": "region", "description": "Geographic region grouping", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FFD700"}, "patch_path": "orderly://models\\gold\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:gold"], "schema": "gold", "docs": {"node_color": "#FFD700"}, "post-hook": "{{ export_to_csv_posthook('data/exports', 'gold') }}"}, "created_at": 1754795766.3021302, "relation_name": "\"orderly\".\"dev_gold\".\"dim_cost_centre\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Cost centre dimension with surrogate keys\r\nselect\r\n    -- Surrogate key (hash-based for deterministic generation)\r\n    md5(cost_centre_id) as cost_centre_key,\r\n    \r\n    -- Business key and attributes\r\n    cost_centre_id,\r\n    cost_centre_name,\r\n    country_code,\r\n    \r\n    -- Derived attributes\r\n    case \r\n        when country_code = 'AU' then 'Australia'\r\n        when country_code = 'US' then 'United States'\r\n        else 'Unknown'\r\n    end as country_name,\r\n    \r\n    case \r\n        when country_code = 'AU' then 'APAC'\r\n        when country_code = 'US' then 'Americas'\r\n        else 'Other'\r\n    end as region,\r\n    \r\n    -- Metadata\r\n    now() as created_at,\r\n    now() as updated_at,\r\n    true as is_active\r\n    \r\nfrom {{ ref('silver_cost_centres') }}\r\norder by cost_centre_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_cost_centres", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": ["model.orderly.silver_cost_centres"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\dim_cost_centre.sql", "compiled": true, "compiled_code": "\n\n-- Cost centre dimension with surrogate keys\nselect\n    -- Surrogate key (hash-based for deterministic generation)\n    md5(cost_centre_id) as cost_centre_key,\n    \n    -- Business key and attributes\n    cost_centre_id,\n    cost_centre_name,\n    country_code,\n    \n    -- Derived attributes\n    case \n        when country_code = 'AU' then 'Australia'\n        when country_code = 'US' then 'United States'\n        else 'Unknown'\n    end as country_name,\n    \n    case \n        when country_code = 'AU' then 'APAC'\n        when country_code = 'US' then 'Americas'\n        else 'Other'\n    end as region,\n    \n    -- Metadata\n    now() as created_at,\n    now() as updated_at,\n    true as is_active\n    \nfrom \"orderly\".\"dev_silver\".\"silver_cost_centres\"\norder by cost_centre_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["cost_centre_id", "cost_centre_key"], "time_spine": null}, "model.orderly.dim_date": {"database": "orderly", "schema": "dev_gold", "name": "dim_date", "resource_type": "model", "package_name": "orderly", "path": "gold\\dim_date.sql", "original_file_path": "models\\gold\\dim_date.sql", "unique_id": "model.orderly.dim_date", "fqn": ["orderly", "gold", "dim_date"], "alias": "dim_date", "checksum": {"name": "sha256", "checksum": "0c807d59c6cda5edb39989fa16305473ee2485660e4c8b416c3eaf63eef22a0f"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": ["layer:gold"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ export_to_csv_posthook('data/exports', 'gold') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FFD700"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:gold"], "description": "Date dimension with comprehensive temporal attributes and exchange rates", "columns": {"date_key": {"name": "date_key", "description": "Primary key in YYYYMMDD format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_actual": {"name": "date_actual", "description": "Actual calendar date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "year": {"name": "year", "description": "Calendar year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quarter": {"name": "quarter", "description": "Calendar quarter (1-4)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "month": {"name": "month", "description": "Calendar month (1-12)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fiscal_year": {"name": "fiscal_year", "description": "Fiscal year (July-June)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "usd_to_aud": {"name": "usd_to_aud", "description": "USD to AUD exchange rate for the date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FFD700"}, "patch_path": "orderly://models\\gold\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:gold"], "schema": "gold", "docs": {"node_color": "#FFD700"}, "post-hook": "{{ export_to_csv_posthook('data/exports', 'gold') }}"}, "created_at": 1754795766.3015304, "relation_name": "\"orderly\".\"dev_gold\".\"dim_date\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Date dimension with comprehensive date attributes\r\n-- Covers a reasonable range around our data dates\r\nwith date_spine as (\r\n    select \r\n        date_column as date_actual\r\n    from generate_series(\r\n        '2025-06-01'::date, \r\n        '2025-08-31'::date, \r\n        interval '1 day'\r\n    ) as t(date_column)\r\n),\r\n\r\nexchange_rates as (\r\n    select \r\n        date,\r\n        exchange_rate as usd_to_aud\r\n    from {{ ref('silver_exchange_rates') }}\r\n    where from_currency = 'USD' and to_currency = 'AUD'\r\n),\r\n\r\ndate_with_attributes as (\r\n    select\r\n        date_actual,\r\n        \r\n        -- Date key as integer YYYYMMDD\r\n        extract(year from date_actual) * 10000 + extract(month from date_actual) * 100 + extract(day from date_actual) as date_key,\r\n        \r\n        -- Basic date parts\r\n        extract(year from date_actual) as year,\r\n        extract(quarter from date_actual) as quarter,\r\n        extract(month from date_actual) as month,\r\n        extract(week from date_actual) as week,\r\n        extract(day from date_actual) as day_of_month,\r\n        extract(dow from date_actual) as day_of_week,\r\n        dayname(date_actual) as day_name,\r\n        monthname(date_actual) as month_name,\r\n        \r\n        -- Derived attributes\r\n        case when extract(dow from date_actual) in (0, 6) then true else false end as is_weekend,\r\n        \r\n        -- Fiscal year (assuming July 1 - June 30, common in AU/US)\r\n        case \r\n            when extract(month from date_actual) >= 7 then extract(year from date_actual) + 1\r\n            else extract(year from date_actual)\r\n        end as fiscal_year,\r\n        \r\n        case \r\n            when extract(month from date_actual) in (7, 8, 9) then 1\r\n            when extract(month from date_actual) in (10, 11, 12) then 2  \r\n            when extract(month from date_actual) in (1, 2, 3) then 3\r\n            when extract(month from date_actual) in (4, 5, 6) then 4\r\n        end as fiscal_quarter,\r\n        \r\n        -- Holiday flags (basic set - can be enhanced)\r\n        case \r\n            when extract(month from date_actual) = 1 and extract(day from date_actual) = 1 then true  -- New Year\r\n            when extract(month from date_actual) = 12 and extract(day from date_actual) = 25 then true -- Christmas\r\n            when extract(month from date_actual) = 1 and extract(day from date_actual) = 26 then true -- Australia Day\r\n            when extract(month from date_actual) = 4 and extract(day from date_actual) = 25 then true -- ANZAC Day\r\n            else false\r\n        end as is_holiday\r\n        \r\n    from date_spine\r\n)\r\n\r\nselect\r\n    d.*,\r\n    coalesce(er.usd_to_aud, 1.5) as usd_to_aud  -- Default fallback rate\r\nfrom date_with_attributes d\r\nleft join exchange_rates er on d.date_actual = er.date\r\norder by date_actual", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": ["model.orderly.silver_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\dim_date.sql", "compiled": true, "compiled_code": "\n\n-- Date dimension with comprehensive date attributes\n-- Covers a reasonable range around our data dates\nwith date_spine as (\n    select \n        date_column as date_actual\n    from generate_series(\n        '2025-06-01'::date, \n        '2025-08-31'::date, \n        interval '1 day'\n    ) as t(date_column)\n),\n\nexchange_rates as (\n    select \n        date,\n        exchange_rate as usd_to_aud\n    from \"orderly\".\"dev_silver\".\"silver_exchange_rates\"\n    where from_currency = 'USD' and to_currency = 'AUD'\n),\n\ndate_with_attributes as (\n    select\n        date_actual,\n        \n        -- Date key as integer YYYYMMDD\n        extract(year from date_actual) * 10000 + extract(month from date_actual) * 100 + extract(day from date_actual) as date_key,\n        \n        -- Basic date parts\n        extract(year from date_actual) as year,\n        extract(quarter from date_actual) as quarter,\n        extract(month from date_actual) as month,\n        extract(week from date_actual) as week,\n        extract(day from date_actual) as day_of_month,\n        extract(dow from date_actual) as day_of_week,\n        dayname(date_actual) as day_name,\n        monthname(date_actual) as month_name,\n        \n        -- Derived attributes\n        case when extract(dow from date_actual) in (0, 6) then true else false end as is_weekend,\n        \n        -- Fiscal year (assuming July 1 - June 30, common in AU/US)\n        case \n            when extract(month from date_actual) >= 7 then extract(year from date_actual) + 1\n            else extract(year from date_actual)\n        end as fiscal_year,\n        \n        case \n            when extract(month from date_actual) in (7, 8, 9) then 1\n            when extract(month from date_actual) in (10, 11, 12) then 2  \n            when extract(month from date_actual) in (1, 2, 3) then 3\n            when extract(month from date_actual) in (4, 5, 6) then 4\n        end as fiscal_quarter,\n        \n        -- Holiday flags (basic set - can be enhanced)\n        case \n            when extract(month from date_actual) = 1 and extract(day from date_actual) = 1 then true  -- New Year\n            when extract(month from date_actual) = 12 and extract(day from date_actual) = 25 then true -- Christmas\n            when extract(month from date_actual) = 1 and extract(day from date_actual) = 26 then true -- Australia Day\n            when extract(month from date_actual) = 4 and extract(day from date_actual) = 25 then true -- ANZAC Day\n            else false\n        end as is_holiday\n        \n    from date_spine\n)\n\nselect\n    d.*,\n    coalesce(er.usd_to_aud, 1.5) as usd_to_aud  -- Default fallback rate\nfrom date_with_attributes d\nleft join exchange_rates er on d.date_actual = er.date\norder by date_actual", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["date_key"], "time_spine": null}, "model.orderly.dim_product": {"database": "orderly", "schema": "dev_gold", "name": "dim_product", "resource_type": "model", "package_name": "orderly", "path": "gold\\dim_product.sql", "original_file_path": "models\\gold\\dim_product.sql", "unique_id": "model.orderly.dim_product", "fqn": ["orderly", "gold", "dim_product"], "alias": "dim_product", "checksum": {"name": "sha256", "checksum": "55997e11716472bad17ed37e6d9d7f4c7d9454e01256e22b1209e9b2db2f003b"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": ["layer:gold"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ export_to_csv_posthook('data/exports', 'gold') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FFD700"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:gold"], "description": "Product dimension with SKU categorization and brand classification", "columns": {"product_key": {"name": "product_key", "description": "Surrogate key (MD5 hash of sku_id)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sku_id": {"name": "sku_id", "description": "Business key for product SKU", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "canonical_name": {"name": "canonical_name", "description": "Standardized product name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_category": {"name": "product_category", "description": "Primary product category (Keyboards, Monitors, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_subcategory": {"name": "product_subcategory", "description": "Secondary categorization (Wireless, 4K, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_brand": {"name": "product_brand", "description": "Extracted brand name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_type": {"name": "source_type", "description": "Source of the SKU record (approved_seed, auto_ref, auto_discovered)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_approved": {"name": "is_approved", "description": "Whether the SKU comes from approved seed data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FFD700"}, "patch_path": "orderly://models\\gold\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:gold"], "schema": "gold", "docs": {"node_color": "#FFD700"}, "post-hook": "{{ export_to_csv_posthook('data/exports', 'gold') }}"}, "created_at": 1754795766.304039, "relation_name": "\"orderly\".\"dev_gold\".\"dim_product\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Product dimension combining seed data with discovered SKUs from orders\r\nwith sku_from_seed as (\r\n    select\r\n        sku_id,\r\n        canonical_name,\r\n        source as source_type,\r\n        true as from_seed\r\n    from {{ ref('ref_sku_names') }}\r\n),\r\n\r\nsku_from_orders as (\r\n    select distinct\r\n        sku_id,\r\n        item_description_cleaned as canonical_name,\r\n        'auto_discovered' as source_type,\r\n        false as from_seed\r\n    from {{ ref('silver_orders_valid') }}\r\n    where sku_id is not null\r\n    and sku_id not in (select sku_id from sku_from_seed)\r\n),\r\n\r\nall_skus as (\r\n    select * from sku_from_seed\r\n    union all\r\n    select * from sku_from_orders\r\n),\r\n\r\nproduct_with_categories as (\r\n    select\r\n        -- Surrogate key\r\n        md5(sku_id) as product_key,\r\n        \r\n        -- Business key and core attributes\r\n        sku_id,\r\n        canonical_name,\r\n        source_type,\r\n        \r\n        -- Product categorization based on name patterns\r\n        case\r\n            when lower(canonical_name) like '%keyboard%' or lower(canonical_name) like '%kb%' then 'Keyboards'\r\n            when lower(canonical_name) like '%monitor%' or lower(canonical_name) like '%display%' or lower(canonical_name) like '%screen%' then 'Monitors'\r\n            when lower(canonical_name) like '%webcam%' or lower(canonical_name) like '%camera%' or lower(canonical_name) like '%cam%' then 'Webcams'\r\n            when lower(canonical_name) like '%headset%' or lower(canonical_name) like '%headphone%' or lower(canonical_name) like '%earphone%' or lower(canonical_name) like '%earbuds%' then 'Headsets'\r\n            when lower(canonical_name) like '%cable%' or lower(canonical_name) like '%cord%' or lower(canonical_name) like '%wire%' then 'Cables'\r\n            when lower(canonical_name) like '%adapter%' or lower(canonical_name) like '%adaptor%' or lower(canonical_name) like '%converter%' then 'Adapters'\r\n            when lower(canonical_name) like '%drive%' or lower(canonical_name) like '%storage%' or lower(canonical_name) like '%tb%' or lower(canonical_name) like '%gb%' then 'Storage'\r\n            when lower(canonical_name) like '%mouse%' or lower(canonical_name) like '%trackpad%' then 'Input Devices'\r\n            when lower(canonical_name) like '%speaker%' or lower(canonical_name) like '%audio%' then 'Audio'\r\n            when lower(canonical_name) like '%usb%' or lower(canonical_name) like '%connector%' then 'Connectivity'\r\n            else 'Other'\r\n        end as product_category,\r\n        \r\n        -- Sub-category for more granular analysis\r\n        case\r\n            when lower(canonical_name) like '%wireless%' then 'Wireless'\r\n            when lower(canonical_name) like '%wired%' then 'Wired'\r\n            when lower(canonical_name) like '%usb-c%' or lower(canonical_name) like '%usb c%' then 'USB-C'\r\n            when lower(canonical_name) like '%hdmi%' then 'HDMI'\r\n            when lower(canonical_name) like '%4k%' or lower(canonical_name) like '%uhd%' then '4K/UHD'\r\n            when lower(canonical_name) like '%compact%' or lower(canonical_name) like '%mini%' then 'Compact'\r\n            when lower(canonical_name) like '%external%' then 'External'\r\n            when lower(canonical_name) like '%mechanical%' or lower(canonical_name) like '%mech%' then 'Mechanical'\r\n            else 'Standard'\r\n        end as product_subcategory,\r\n        \r\n        -- Brand extraction (simplified - looking for known patterns)\r\n        case\r\n            when lower(canonical_name) like '%connectpro%' then 'ConnectPro'\r\n            when lower(canonical_name) like '%viewmaster%' then 'ViewMaster'\r\n            when lower(canonical_name) like '%datavault%' then 'DataVault'\r\n            when lower(canonical_name) like '%techcorp%' then 'TechCorp'\r\n            when lower(canonical_name) like '%officesupply%' then 'OfficeSupply Co'\r\n            else 'Generic'\r\n        end as product_brand,\r\n        \r\n        -- Source tracking\r\n        from_seed,\r\n        case \r\n            when source_type = 'approved_seed' then true\r\n            else false\r\n        end as is_approved,\r\n        \r\n        -- Metadata\r\n        now() as created_at,\r\n        now() as updated_at,\r\n        true as is_active\r\n        \r\n    from all_skus\r\n)\r\n\r\nselect * from product_with_categories\r\norder by \r\n    case when from_seed then 0 else 1 end,  -- Seed records first\r\n    sku_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "ref_sku_names", "package": null, "version": null}, {"name": "silver_orders_valid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": ["seed.orderly.ref_sku_names", "model.orderly.silver_orders_valid"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\dim_product.sql", "compiled": true, "compiled_code": "\n\n-- Product dimension combining seed data with discovered SKUs from orders\nwith sku_from_seed as (\n    select\n        sku_id,\n        canonical_name,\n        source as source_type,\n        true as from_seed\n    from \"orderly\".\"dev_seeds\".\"ref_sku_names\"\n),\n\nsku_from_orders as (\n    select distinct\n        sku_id,\n        item_description_cleaned as canonical_name,\n        'auto_discovered' as source_type,\n        false as from_seed\n    from \"orderly\".\"dev_silver\".\"silver_orders_valid\"\n    where sku_id is not null\n    and sku_id not in (select sku_id from sku_from_seed)\n),\n\nall_skus as (\n    select * from sku_from_seed\n    union all\n    select * from sku_from_orders\n),\n\nproduct_with_categories as (\n    select\n        -- Surrogate key\n        md5(sku_id) as product_key,\n        \n        -- Business key and core attributes\n        sku_id,\n        canonical_name,\n        source_type,\n        \n        -- Product categorization based on name patterns\n        case\n            when lower(canonical_name) like '%keyboard%' or lower(canonical_name) like '%kb%' then 'Keyboards'\n            when lower(canonical_name) like '%monitor%' or lower(canonical_name) like '%display%' or lower(canonical_name) like '%screen%' then 'Monitors'\n            when lower(canonical_name) like '%webcam%' or lower(canonical_name) like '%camera%' or lower(canonical_name) like '%cam%' then 'Webcams'\n            when lower(canonical_name) like '%headset%' or lower(canonical_name) like '%headphone%' or lower(canonical_name) like '%earphone%' or lower(canonical_name) like '%earbuds%' then 'Headsets'\n            when lower(canonical_name) like '%cable%' or lower(canonical_name) like '%cord%' or lower(canonical_name) like '%wire%' then 'Cables'\n            when lower(canonical_name) like '%adapter%' or lower(canonical_name) like '%adaptor%' or lower(canonical_name) like '%converter%' then 'Adapters'\n            when lower(canonical_name) like '%drive%' or lower(canonical_name) like '%storage%' or lower(canonical_name) like '%tb%' or lower(canonical_name) like '%gb%' then 'Storage'\n            when lower(canonical_name) like '%mouse%' or lower(canonical_name) like '%trackpad%' then 'Input Devices'\n            when lower(canonical_name) like '%speaker%' or lower(canonical_name) like '%audio%' then 'Audio'\n            when lower(canonical_name) like '%usb%' or lower(canonical_name) like '%connector%' then 'Connectivity'\n            else 'Other'\n        end as product_category,\n        \n        -- Sub-category for more granular analysis\n        case\n            when lower(canonical_name) like '%wireless%' then 'Wireless'\n            when lower(canonical_name) like '%wired%' then 'Wired'\n            when lower(canonical_name) like '%usb-c%' or lower(canonical_name) like '%usb c%' then 'USB-C'\n            when lower(canonical_name) like '%hdmi%' then 'HDMI'\n            when lower(canonical_name) like '%4k%' or lower(canonical_name) like '%uhd%' then '4K/UHD'\n            when lower(canonical_name) like '%compact%' or lower(canonical_name) like '%mini%' then 'Compact'\n            when lower(canonical_name) like '%external%' then 'External'\n            when lower(canonical_name) like '%mechanical%' or lower(canonical_name) like '%mech%' then 'Mechanical'\n            else 'Standard'\n        end as product_subcategory,\n        \n        -- Brand extraction (simplified - looking for known patterns)\n        case\n            when lower(canonical_name) like '%connectpro%' then 'ConnectPro'\n            when lower(canonical_name) like '%viewmaster%' then 'ViewMaster'\n            when lower(canonical_name) like '%datavault%' then 'DataVault'\n            when lower(canonical_name) like '%techcorp%' then 'TechCorp'\n            when lower(canonical_name) like '%officesupply%' then 'OfficeSupply Co'\n            else 'Generic'\n        end as product_brand,\n        \n        -- Source tracking\n        from_seed,\n        case \n            when source_type = 'approved_seed' then true\n            else false\n        end as is_approved,\n        \n        -- Metadata\n        now() as created_at,\n        now() as updated_at,\n        true as is_active\n        \n    from all_skus\n)\n\nselect * from product_with_categories\norder by \n    case when from_seed then 0 else 1 end,  -- Seed records first\n    sku_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["product_key", "sku_id"], "time_spine": null}, "model.orderly.dim_vendor": {"database": "orderly", "schema": "dev_gold", "name": "dim_vendor", "resource_type": "model", "package_name": "orderly", "path": "gold\\dim_vendor.sql", "original_file_path": "models\\gold\\dim_vendor.sql", "unique_id": "model.orderly.dim_vendor", "fqn": ["orderly", "gold", "dim_vendor"], "alias": "dim_vendor", "checksum": {"name": "sha256", "checksum": "4c5ff2317b691a49db00d9f5d46bd69846ce29e0feec6e70e0e0e84401c0f1fa"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": ["layer:gold"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ export_to_csv_posthook('data/exports', 'gold') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FFD700"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:gold"], "description": "Vendor dimension with categorization and tier classification", "columns": {"vendor_key": {"name": "vendor_key", "description": "Surrogate key (MD5 hash of vendor_id)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_id": {"name": "vendor_id", "description": "Business key for vendor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_name": {"name": "vendor_name", "description": "Vendor display name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_category": {"name": "vendor_category", "description": "Derived vendor category based on name patterns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_tier": {"name": "vendor_tier", "description": "Vendor tier (Preferred/Standard)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FFD700"}, "patch_path": "orderly://models\\gold\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:gold"], "schema": "gold", "docs": {"node_color": "#FFD700"}, "post-hook": "{{ export_to_csv_posthook('data/exports', 'gold') }}"}, "created_at": 1754795766.302842, "relation_name": "\"orderly\".\"dev_gold\".\"dim_vendor\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Vendor dimension with enrichment and categorization\r\nwith vendor_base as (\r\n    select * from {{ ref('silver_vendor_master') }}\r\n),\r\n\r\nvendor_enriched as (\r\n    select\r\n        -- Surrogate key\r\n        md5(vendor_id) as vendor_key,\r\n        \r\n        -- Business key and core attributes\r\n        vendor_id,\r\n        vendor_name,\r\n        \r\n        -- Derive vendor category from name patterns\r\n        case\r\n            when lower(vendor_name) like '%tech%' or lower(vendor_name) like '%solutions%' then 'Technology'\r\n            when lower(vendor_name) like '%office%' or lower(vendor_name) like '%supply%' then 'Office Supplies'\r\n            when lower(vendor_name) like '%electronics%' or lower(vendor_name) like '%computer%' then 'Electronics'\r\n            when lower(vendor_name) like '%connect%' then 'Connectivity'\r\n            when lower(vendor_name) like '%view%' or lower(vendor_name) like '%display%' then 'Display Equipment'\r\n            when lower(vendor_name) like '%data%' or lower(vendor_name) like '%storage%' then 'Data & Storage'\r\n            else 'General'\r\n        end as vendor_category,\r\n        \r\n        -- Vendor tier based on country preference\r\n        case\r\n            when lower(vendor_name) like '%au%' or lower(vendor_name) like '%australia%' then 'Preferred'\r\n            else 'Standard'\r\n        end as vendor_tier,\r\n        \r\n        -- Pass through fields\r\n        country_code as country_code,\r\n        payment_terms as payment_terms,\r\n        tax_id as tax_id,\r\n        city as city,\r\n        vendor_type as vendor_type,\r\n        preferred_currency as preferred_currency,\r\n        credit_limit as credit_limit,\r\n        street_address as street_address,\r\n        postal_code as postal_code,\r\n        contact_email as contact_email,\r\n        contact_phone as contact_phone,\r\n        \r\n        -- Metadata\r\n        now() as created_at,\r\n        now() as updated_at,\r\n        true as is_active\r\n        \r\n    from vendor_base\r\n)\r\n\r\nselect * from vendor_enriched\r\norder by vendor_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_vendor_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": ["model.orderly.silver_vendor_master"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\dim_vendor.sql", "compiled": true, "compiled_code": "\n\n-- Vendor dimension with enrichment and categorization\nwith vendor_base as (\n    select * from \"orderly\".\"dev_silver\".\"silver_vendor_master\"\n),\n\nvendor_enriched as (\n    select\n        -- Surrogate key\n        md5(vendor_id) as vendor_key,\n        \n        -- Business key and core attributes\n        vendor_id,\n        vendor_name,\n        \n        -- Derive vendor category from name patterns\n        case\n            when lower(vendor_name) like '%tech%' or lower(vendor_name) like '%solutions%' then 'Technology'\n            when lower(vendor_name) like '%office%' or lower(vendor_name) like '%supply%' then 'Office Supplies'\n            when lower(vendor_name) like '%electronics%' or lower(vendor_name) like '%computer%' then 'Electronics'\n            when lower(vendor_name) like '%connect%' then 'Connectivity'\n            when lower(vendor_name) like '%view%' or lower(vendor_name) like '%display%' then 'Display Equipment'\n            when lower(vendor_name) like '%data%' or lower(vendor_name) like '%storage%' then 'Data & Storage'\n            else 'General'\n        end as vendor_category,\n        \n        -- Vendor tier based on country preference\n        case\n            when lower(vendor_name) like '%au%' or lower(vendor_name) like '%australia%' then 'Preferred'\n            else 'Standard'\n        end as vendor_tier,\n        \n        -- Pass through fields\n        country_code as country_code,\n        payment_terms as payment_terms,\n        tax_id as tax_id,\n        city as city,\n        vendor_type as vendor_type,\n        preferred_currency as preferred_currency,\n        credit_limit as credit_limit,\n        street_address as street_address,\n        postal_code as postal_code,\n        contact_email as contact_email,\n        contact_phone as contact_phone,\n        \n        -- Metadata\n        now() as created_at,\n        now() as updated_at,\n        true as is_active\n        \n    from vendor_base\n)\n\nselect * from vendor_enriched\norder by vendor_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["vendor_id", "vendor_key"], "time_spine": null}, "model.orderly.fct_data_quality": {"database": "orderly", "schema": "dev_gold", "name": "fct_data_quality", "resource_type": "model", "package_name": "orderly", "path": "gold\\fct_data_quality.sql", "original_file_path": "models\\gold\\fct_data_quality.sql", "unique_id": "model.orderly.fct_data_quality", "fqn": ["orderly", "gold", "fct_data_quality"], "alias": "fct_data_quality", "checksum": {"name": "sha256", "checksum": "6737c3766ab7fb43d3b3caa65a633f34e6f07dcd431ffaa0da01dcbf71324823"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": ["layer:gold"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ export_to_csv_posthook('data/exports', 'gold') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FFD700"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:gold"], "description": "Data quality monitoring and exception tracking fact - Gold layer", "columns": {"data_quality_key": {"name": "data_quality_key", "description": "Surrogate key for data quality record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_key": {"name": "date_key", "description": "Order date key (FK to dim_date)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cost_centre_key": {"name": "cost_centre_key", "description": "Cost centre key (FK to dim_cost_centre)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_key": {"name": "vendor_key", "description": "Vendor key (FK to dim_vendor) - may be null for vendor exceptions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_key": {"name": "product_key", "description": "Product key (FK to dim_product) - may be null for SKU exceptions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "exception_count": {"name": "exception_count", "description": "Count of exceptions (always 1)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fuzz_score": {"name": "fuzz_score", "description": "Fuzzy matching score for SKU names", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_fuzz_score": {"name": "vendor_fuzz_score", "description": "Fuzzy matching score for vendor names", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "exception_type": {"name": "exception_type", "description": "Type of quality exception", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FFD700"}, "patch_path": "orderly://models\\gold\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:gold"], "schema": "gold", "docs": {"node_color": "#FFD700"}, "post-hook": "{{ export_to_csv_posthook('data/exports', 'gold') }}"}, "created_at": 1754795766.3071337, "relation_name": "\"orderly\".\"dev_gold\".\"fct_data_quality\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Data quality monitoring and exception tracking fact table\r\n-- Grain: One row per exception record\r\nwith exception_records as (\r\n    select\r\n        order_id,\r\n        line_number,\r\n        sku_id,\r\n        cost_centre_id,\r\n        matched_vendor_id,\r\n        order_date,\r\n        \r\n        -- Quality flags and scores\r\n        flag_missing_in_seed,\r\n        flag_name_mismatch,\r\n        flag_vendor_mismatch,\r\n        vendor_fuzz_score,\r\n        fuzz_score,\r\n        exception_type,\r\n        \r\n        -- Additional context\r\n        vendor_brand_original,\r\n        matched_vendor_name,\r\n        item_description_original,\r\n        item_description_cleaned,\r\n        line_uid\r\n        \r\n    from {{ ref('silver_orders_exceptions') }}\r\n),\r\n\r\n-- Join with dimensions to get surrogate keys\r\nfact_with_keys as (\r\n    select\r\n        er.*,\r\n        \r\n        -- Date dimension key\r\n        dd.date_key,\r\n        \r\n        -- Dimension keys via lookups\r\n        dc.cost_centre_key,\r\n        dv.vendor_key,\r\n        dp.product_key\r\n        \r\n    from exception_records er\r\n    \r\n    -- Join order date\r\n    left join {{ ref('dim_date') }} dd \r\n        on dd.date_actual = er.order_date\r\n    \r\n    -- Join cost centre dimension\r\n    left join {{ ref('dim_cost_centre') }} dc \r\n        on dc.cost_centre_id = er.cost_centre_id\r\n    \r\n    -- Join vendor dimension (may be null for vendor exceptions)\r\n    left join {{ ref('dim_vendor') }} dv \r\n        on dv.vendor_id = er.matched_vendor_id\r\n    \r\n    -- Join product dimension (may be null for SKU exceptions)\r\n    left join {{ ref('dim_product') }} dp \r\n        on dp.sku_id = er.sku_id\r\n),\r\n\r\n-- Final fact table\r\nfinal_fact as (\r\n    select\r\n        -- Surrogate fact key\r\n        md5(concat(order_id, '|', line_number, '|', exception_type)) as data_quality_key,\r\n        \r\n        -- Dimension keys\r\n        date_key,\r\n        cost_centre_key,\r\n        vendor_key,  -- May be null for vendor exceptions\r\n        product_key, -- May be null for SKU exceptions\r\n        \r\n        -- Measures (semi-additive - count exceptions)\r\n        1 as exception_count,\r\n        coalesce(fuzz_score, 0) as fuzz_score,\r\n        coalesce(vendor_fuzz_score, 0) as vendor_fuzz_score,\r\n        \r\n        -- Quality dimensions/attributes\r\n        exception_type,\r\n        flag_missing_in_seed,\r\n        flag_name_mismatch,\r\n        flag_vendor_mismatch,\r\n        \r\n        -- Degenerate dimensions (detailed attributes)\r\n        order_id,\r\n        line_number,\r\n        vendor_brand_original,\r\n        matched_vendor_name,\r\n        item_description_original,\r\n        item_description_cleaned,\r\n        \r\n        -- Metadata\r\n        line_uid,\r\n        \r\n        -- Audit fields\r\n        current_timestamp as created_at\r\n        \r\n    from fact_with_keys\r\n    where date_key is not null  -- Ensure we have valid date\r\n      and cost_centre_key is not null  -- Ensure valid cost centre\r\n)\r\n\r\nselect * from final_fact\r\norder by date_key desc, exception_type, order_id, line_number", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_exceptions", "package": null, "version": null}, {"name": "dim_date", "package": null, "version": null}, {"name": "dim_cost_centre", "package": null, "version": null}, {"name": "dim_vendor", "package": null, "version": null}, {"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": ["model.orderly.silver_orders_exceptions", "model.orderly.dim_date", "model.orderly.dim_cost_centre", "model.orderly.dim_vendor", "model.orderly.dim_product"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\fct_data_quality.sql", "compiled": true, "compiled_code": "\n\n-- Data quality monitoring and exception tracking fact table\n-- Grain: One row per exception record\nwith exception_records as (\n    select\n        order_id,\n        line_number,\n        sku_id,\n        cost_centre_id,\n        matched_vendor_id,\n        order_date,\n        \n        -- Quality flags and scores\n        flag_missing_in_seed,\n        flag_name_mismatch,\n        flag_vendor_mismatch,\n        vendor_fuzz_score,\n        fuzz_score,\n        exception_type,\n        \n        -- Additional context\n        vendor_brand_original,\n        matched_vendor_name,\n        item_description_original,\n        item_description_cleaned,\n        line_uid\n        \n    from \"orderly\".\"dev_silver\".\"silver_orders_exceptions\"\n),\n\n-- Join with dimensions to get surrogate keys\nfact_with_keys as (\n    select\n        er.*,\n        \n        -- Date dimension key\n        dd.date_key,\n        \n        -- Dimension keys via lookups\n        dc.cost_centre_key,\n        dv.vendor_key,\n        dp.product_key\n        \n    from exception_records er\n    \n    -- Join order date\n    left join \"orderly\".\"dev_gold\".\"dim_date\" dd \n        on dd.date_actual = er.order_date\n    \n    -- Join cost centre dimension\n    left join \"orderly\".\"dev_gold\".\"dim_cost_centre\" dc \n        on dc.cost_centre_id = er.cost_centre_id\n    \n    -- Join vendor dimension (may be null for vendor exceptions)\n    left join \"orderly\".\"dev_gold\".\"dim_vendor\" dv \n        on dv.vendor_id = er.matched_vendor_id\n    \n    -- Join product dimension (may be null for SKU exceptions)\n    left join \"orderly\".\"dev_gold\".\"dim_product\" dp \n        on dp.sku_id = er.sku_id\n),\n\n-- Final fact table\nfinal_fact as (\n    select\n        -- Surrogate fact key\n        md5(concat(order_id, '|', line_number, '|', exception_type)) as data_quality_key,\n        \n        -- Dimension keys\n        date_key,\n        cost_centre_key,\n        vendor_key,  -- May be null for vendor exceptions\n        product_key, -- May be null for SKU exceptions\n        \n        -- Measures (semi-additive - count exceptions)\n        1 as exception_count,\n        coalesce(fuzz_score, 0) as fuzz_score,\n        coalesce(vendor_fuzz_score, 0) as vendor_fuzz_score,\n        \n        -- Quality dimensions/attributes\n        exception_type,\n        flag_missing_in_seed,\n        flag_name_mismatch,\n        flag_vendor_mismatch,\n        \n        -- Degenerate dimensions (detailed attributes)\n        order_id,\n        line_number,\n        vendor_brand_original,\n        matched_vendor_name,\n        item_description_original,\n        item_description_cleaned,\n        \n        -- Metadata\n        line_uid,\n        \n        -- Audit fields\n        current_timestamp as created_at\n        \n    from fact_with_keys\n    where date_key is not null  -- Ensure we have valid date\n      and cost_centre_key is not null  -- Ensure valid cost centre\n)\n\nselect * from final_fact\norder by date_key desc, exception_type, order_id, line_number", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["data_quality_key"], "time_spine": null}, "model.orderly.fct_order_line": {"database": "orderly", "schema": "dev_gold", "name": "fct_order_line", "resource_type": "model", "package_name": "orderly", "path": "gold\\fct_order_line.sql", "original_file_path": "models\\gold\\fct_order_line.sql", "unique_id": "model.orderly.fct_order_line", "fqn": ["orderly", "gold", "fct_order_line"], "alias": "fct_order_line", "checksum": {"name": "sha256", "checksum": "68e38a8ab9f9af9b798f1037fb6cd13e012b55f3b5cf624eee669f480dee73a0"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": ["layer:gold"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ export_to_csv_posthook('data/exports', 'gold') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FFD700"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:gold"], "description": "Core transactional fact for order analysis - Gold layer", "columns": {"order_line_key": {"name": "order_line_key", "description": "Surrogate key for order line", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_key": {"name": "date_key", "description": "Order date key (FK to dim_date)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "delivery_date_key": {"name": "delivery_date_key", "description": "Delivery date key (FK to dim_date)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cost_centre_key": {"name": "cost_centre_key", "description": "Cost centre key (FK to dim_cost_centre)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_key": {"name": "vendor_key", "description": "Vendor key (FK to dim_vendor)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_key": {"name": "product_key", "description": "Product key (FK to dim_product)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency_key": {"name": "currency_key", "description": "Currency key (simplified)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "Order quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "Unit price in original currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_total_amount": {"name": "line_total_amount", "description": "Line total in original currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_total_aud": {"name": "line_total_aud", "description": "Line total converted to AUD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_total_usd": {"name": "line_total_usd", "description": "Line total converted to USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_id": {"name": "order_id", "description": "Order identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_number": {"name": "line_number", "description": "Line number within order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FFD700"}, "patch_path": "orderly://models\\gold\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:gold"], "schema": "gold", "docs": {"node_color": "#FFD700"}, "post-hook": "{{ export_to_csv_posthook('data/exports', 'gold') }}"}, "created_at": 1754795766.3060083, "relation_name": "\"orderly\".\"dev_gold\".\"fct_order_line\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Core transactional fact table for order line analysis\r\n-- Grain: One row per order line item\r\nwith order_lines as (\r\n    select\r\n        order_id,\r\n        line_number,\r\n        sku_id,\r\n        cost_centre_id,\r\n        coalesce(cast(matched_vendor_id as varchar), '')  as matched_vendor_id,\r\n        quantity,\r\n        unit_price,\r\n        currency,\r\n        order_date,\r\n        delivery_date,\r\n        requisitioner,\r\n        approval_status,\r\n        source_filename,\r\n        line_uid,\r\n        item_description_cleaned,\r\n        \r\n        -- Calculate line total in original currency\r\n        quantity * unit_price as line_total_amount\r\n        \r\n    from {{ ref('silver_orders_valid') }}\r\n    -- where matched_vendor_id is not null  -- Only include orders with valid vendor matches\r\n),\r\n\r\n-- Join with dimensions to get surrogate keys\r\nfact_with_keys as (\r\n    select\r\n        ol.*,\r\n        \r\n        -- Date dimension keys\r\n        dd_order.date_key as date_key,\r\n        dd_delivery.date_key as delivery_date_key,\r\n        \r\n        -- Dimension keys via lookups\r\n        dc.cost_centre_key,\r\n        dv.vendor_key,\r\n        dp.product_key,\r\n        \r\n        -- Exchange rate for conversion (from date dimension)\r\n        dd_order.usd_to_aud,\r\n        \r\n        -- Currency key (simplified - could be enhanced with dim_currency later)\r\n        case \r\n            when ol.currency = 'USD' then 1\r\n            when ol.currency = 'AUD' then 2\r\n            else 0  -- Unknown currency\r\n        end as currency_key\r\n        \r\n    from order_lines ol\r\n    \r\n    -- Join order date\r\n    left join {{ ref('dim_date') }} dd_order \r\n        on dd_order.date_actual = ol.order_date\r\n    \r\n    -- Join delivery date (optional)\r\n    left join {{ ref('dim_date') }} dd_delivery \r\n        on dd_delivery.date_actual = ol.delivery_date\r\n    \r\n    -- Join cost centre dimension\r\n    left join {{ ref('dim_cost_centre') }} dc \r\n        on dc.cost_centre_id = ol.cost_centre_id\r\n    \r\n    -- Join vendor dimension  \r\n    left join {{ ref('dim_vendor') }} dv \r\n        on dv.vendor_id = ol.matched_vendor_id\r\n    \r\n    -- Join product dimension\r\n    left join {{ ref('dim_product') }} dp \r\n        on dp.sku_id = ol.sku_id\r\n),\r\n\r\n-- Final fact table with currency conversions\r\nfinal_fact as (\r\n    select\r\n        -- Surrogate fact key\r\n        md5(concat(order_id, '|', line_number)) as order_line_key,\r\n        \r\n        -- Dimension keys\r\n        date_key,\r\n        delivery_date_key,\r\n        cost_centre_key,\r\n        vendor_key,\r\n        product_key,\r\n        currency_key,\r\n        \r\n        -- Measures (additive)\r\n        quantity,\r\n        unit_price,\r\n        line_total_amount,\r\n        \r\n        -- Currency converted measures\r\n        case \r\n            when currency = 'USD' then line_total_amount * usd_to_aud\r\n            when currency = 'AUD' then line_total_amount\r\n            else null\r\n        end as line_total_aud,\r\n        \r\n        case \r\n            when currency = 'USD' then line_total_amount\r\n            when currency = 'AUD' then line_total_amount / usd_to_aud\r\n            else null\r\n        end as line_total_usd,\r\n        \r\n        -- Degenerate dimensions (attributes stored in fact)\r\n        order_id,\r\n        line_number,\r\n        requisitioner,\r\n        approval_status,\r\n        source_filename,\r\n        \r\n        -- Metadata\r\n        line_uid,\r\n        currency as original_currency,\r\n        \r\n        -- Audit fields\r\n        current_timestamp as created_at\r\n        \r\n    from fact_with_keys\r\n    -- where date_key is not null  -- Ensure we have valid date\r\n    --   and cost_centre_key is not null  -- Ensure valid cost centre\r\n    --   and vendor_key is not null  -- Ensure valid vendor\r\n    --   and product_key is not null  -- Ensure valid product\r\n)\r\n\r\nselect * from final_fact\r\norder by date_key desc, order_id, line_number", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_valid", "package": null, "version": null}, {"name": "dim_date", "package": null, "version": null}, {"name": "dim_date", "package": null, "version": null}, {"name": "dim_cost_centre", "package": null, "version": null}, {"name": "dim_vendor", "package": null, "version": null}, {"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": ["model.orderly.silver_orders_valid", "model.orderly.dim_date", "model.orderly.dim_cost_centre", "model.orderly.dim_vendor", "model.orderly.dim_product"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\fct_order_line.sql", "compiled": true, "compiled_code": "\n\n-- Core transactional fact table for order line analysis\n-- Grain: One row per order line item\nwith order_lines as (\n    select\n        order_id,\n        line_number,\n        sku_id,\n        cost_centre_id,\n        coalesce(cast(matched_vendor_id as varchar), '')  as matched_vendor_id,\n        quantity,\n        unit_price,\n        currency,\n        order_date,\n        delivery_date,\n        requisitioner,\n        approval_status,\n        source_filename,\n        line_uid,\n        item_description_cleaned,\n        \n        -- Calculate line total in original currency\n        quantity * unit_price as line_total_amount\n        \n    from \"orderly\".\"dev_silver\".\"silver_orders_valid\"\n    -- where matched_vendor_id is not null  -- Only include orders with valid vendor matches\n),\n\n-- Join with dimensions to get surrogate keys\nfact_with_keys as (\n    select\n        ol.*,\n        \n        -- Date dimension keys\n        dd_order.date_key as date_key,\n        dd_delivery.date_key as delivery_date_key,\n        \n        -- Dimension keys via lookups\n        dc.cost_centre_key,\n        dv.vendor_key,\n        dp.product_key,\n        \n        -- Exchange rate for conversion (from date dimension)\n        dd_order.usd_to_aud,\n        \n        -- Currency key (simplified - could be enhanced with dim_currency later)\n        case \n            when ol.currency = 'USD' then 1\n            when ol.currency = 'AUD' then 2\n            else 0  -- Unknown currency\n        end as currency_key\n        \n    from order_lines ol\n    \n    -- Join order date\n    left join \"orderly\".\"dev_gold\".\"dim_date\" dd_order \n        on dd_order.date_actual = ol.order_date\n    \n    -- Join delivery date (optional)\n    left join \"orderly\".\"dev_gold\".\"dim_date\" dd_delivery \n        on dd_delivery.date_actual = ol.delivery_date\n    \n    -- Join cost centre dimension\n    left join \"orderly\".\"dev_gold\".\"dim_cost_centre\" dc \n        on dc.cost_centre_id = ol.cost_centre_id\n    \n    -- Join vendor dimension  \n    left join \"orderly\".\"dev_gold\".\"dim_vendor\" dv \n        on dv.vendor_id = ol.matched_vendor_id\n    \n    -- Join product dimension\n    left join \"orderly\".\"dev_gold\".\"dim_product\" dp \n        on dp.sku_id = ol.sku_id\n),\n\n-- Final fact table with currency conversions\nfinal_fact as (\n    select\n        -- Surrogate fact key\n        md5(concat(order_id, '|', line_number)) as order_line_key,\n        \n        -- Dimension keys\n        date_key,\n        delivery_date_key,\n        cost_centre_key,\n        vendor_key,\n        product_key,\n        currency_key,\n        \n        -- Measures (additive)\n        quantity,\n        unit_price,\n        line_total_amount,\n        \n        -- Currency converted measures\n        case \n            when currency = 'USD' then line_total_amount * usd_to_aud\n            when currency = 'AUD' then line_total_amount\n            else null\n        end as line_total_aud,\n        \n        case \n            when currency = 'USD' then line_total_amount\n            when currency = 'AUD' then line_total_amount / usd_to_aud\n            else null\n        end as line_total_usd,\n        \n        -- Degenerate dimensions (attributes stored in fact)\n        order_id,\n        line_number,\n        requisitioner,\n        approval_status,\n        source_filename,\n        \n        -- Metadata\n        line_uid,\n        currency as original_currency,\n        \n        -- Audit fields\n        current_timestamp as created_at\n        \n    from fact_with_keys\n    -- where date_key is not null  -- Ensure we have valid date\n    --   and cost_centre_key is not null  -- Ensure valid cost centre\n    --   and vendor_key is not null  -- Ensure valid vendor\n    --   and product_key is not null  -- Ensure valid product\n)\n\nselect * from final_fact\norder by date_key desc, order_id, line_number", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_line_key"], "time_spine": null}, "model.orderly.fct_price_variance": {"database": "orderly", "schema": "dev_gold", "name": "fct_price_variance", "resource_type": "model", "package_name": "orderly", "path": "gold\\fct_price_variance.sql", "original_file_path": "models\\gold\\fct_price_variance.sql", "unique_id": "model.orderly.fct_price_variance", "fqn": ["orderly", "gold", "fct_price_variance"], "alias": "fct_price_variance", "checksum": {"name": "sha256", "checksum": "93456c2aa6573135ee7e4e5e842f7263519840bebc3b3feea03bd98f9675f3c1"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": ["layer:gold"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ export_to_csv_posthook('data/exports', 'gold') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FFD700"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:gold"], "description": "Price anomaly detection and variance analysis fact - Gold layer", "columns": {"price_variance_key": {"name": "price_variance_key", "description": "Surrogate key for price variance record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_key": {"name": "date_key", "description": "Analysis date key (FK to dim_date)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_key": {"name": "product_key", "description": "Product key (FK to dim_product)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_key": {"name": "vendor_key", "description": "Vendor key (FK to dim_vendor)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cost_centre_key": {"name": "cost_centre_key", "description": "Cost centre key (FK to dim_cost_centre)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "avg_unit_price": {"name": "avg_unit_price", "description": "Average unit price in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "min_unit_price": {"name": "min_unit_price", "description": "Minimum unit price in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "max_unit_price": {"name": "max_unit_price", "description": "Maximum unit price in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price_variance": {"name": "price_variance", "description": "Price variance measure", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_count": {"name": "order_count", "description": "Number of order lines in the variance calculation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_quantity": {"name": "total_quantity", "description": "Total quantity across all orders", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "has_significant_variance": {"name": "has_significant_variance", "description": "Flag indicating significant price variance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FFD700"}, "patch_path": "orderly://models\\gold\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:gold"], "schema": "gold", "docs": {"node_color": "#FFD700"}, "post-hook": "{{ export_to_csv_posthook('data/exports', 'gold') }}"}, "created_at": 1754795766.3086872, "relation_name": "\"orderly\".\"dev_gold\".\"fct_price_variance\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Price variance and anomaly detection fact table\r\n-- Grain: One row per SKU per vendor per cost centre per time period with price variance\r\nwith base_orders as (\r\n    select\r\n        sku_id,\r\n        matched_vendor_id as vendor_id,\r\n        cost_centre_id,\r\n        order_date,\r\n        unit_price,\r\n        currency,\r\n        quantity,\r\n        order_id,\r\n        line_number,\r\n        \r\n        -- Convert to USD for consistent price analysis\r\n        case \r\n            when currency = 'USD' then unit_price\r\n            when currency = 'AUD' then unit_price / dd.usd_to_aud\r\n            else null\r\n        end as unit_price_usd\r\n        \r\n    from {{ ref('silver_orders_valid') }}\r\n    left join {{ ref('dim_date') }} dd on dd.date_actual = order_date\r\n    where matched_vendor_id is not null\r\n      and unit_price > 0\r\n      and quantity > 0\r\n),\r\n\r\n-- Aggregate by SKU/Vendor/Cost Centre/Date (daily grain)\r\ndaily_aggregates as (\r\n    select\r\n        sku_id,\r\n        vendor_id,\r\n        cost_centre_id,\r\n        order_date,\r\n        \r\n        -- Price statistics\r\n        avg(unit_price_usd) as avg_unit_price_usd,\r\n        min(unit_price_usd) as min_unit_price_usd,\r\n        max(unit_price_usd) as max_unit_price_usd,\r\n        count(*) as order_line_count,\r\n        sum(quantity) as total_quantity,\r\n        \r\n        -- Price variance calculations\r\n        variance(unit_price_usd) as price_variance_usd,\r\n        stddev(unit_price_usd) as price_stddev_usd\r\n        \r\n    from base_orders\r\n    where unit_price_usd is not null\r\n    group by sku_id, vendor_id, cost_centre_id, order_date\r\n),\r\n\r\n-- Calculate variance thresholds and identify anomalies\r\nprice_analysis as (\r\n    select\r\n        *,\r\n        \r\n        -- Price range analysis\r\n        case \r\n            when max_unit_price_usd > 0 and min_unit_price_usd > 0 \r\n            then (max_unit_price_usd - min_unit_price_usd) / min_unit_price_usd\r\n            else 0\r\n        end as price_range_ratio,\r\n        \r\n        -- Coefficient of variation (standardized measure of price variability)\r\n        case \r\n            when avg_unit_price_usd > 0 and price_stddev_usd > 0\r\n            then price_stddev_usd / avg_unit_price_usd\r\n            else 0\r\n        end as coefficient_of_variation,\r\n        \r\n        -- Flag significant variance (> 20% coefficient of variation or >50% range ratio)\r\n        case \r\n            when (price_stddev_usd / nullif(avg_unit_price_usd, 0)) > 0.20 \r\n              or ((max_unit_price_usd - min_unit_price_usd) / nullif(min_unit_price_usd, 0)) > 0.50\r\n            then true\r\n            else false\r\n        end as has_significant_variance\r\n        \r\n    from daily_aggregates\r\n),\r\n\r\n-- Join with dimensions to get surrogate keys\r\nfact_with_keys as (\r\n    select\r\n        pa.*,\r\n        \r\n        -- Dimension keys\r\n        dd.date_key,\r\n        dc.cost_centre_key,\r\n        dv.vendor_key,\r\n        dp.product_key\r\n        \r\n    from price_analysis pa\r\n    \r\n    -- Join dimensions\r\n    left join {{ ref('dim_date') }} dd \r\n        on dd.date_actual = pa.order_date\r\n    \r\n    left join {{ ref('dim_cost_centre') }} dc \r\n        on dc.cost_centre_id = pa.cost_centre_id\r\n    \r\n    left join {{ ref('dim_vendor') }} dv \r\n        on cast(dv.vendor_id as varchar) = cast(pa.vendor_id as varchar)\r\n    \r\n    left join {{ ref('dim_product') }} dp \r\n        on dp.sku_id = pa.sku_id\r\n),\r\n\r\n-- Final fact table - only include records with variance\r\nfinal_fact as (\r\n    select\r\n        -- Surrogate fact key\r\n        md5(concat(sku_id, '|', vendor_id, '|', cost_centre_id, '|', order_date)) as price_variance_key,\r\n        \r\n        -- Dimension keys\r\n        date_key,\r\n        product_key,\r\n        vendor_key,\r\n        cost_centre_key,\r\n        \r\n        -- Price measures (in USD for consistency)\r\n        avg_unit_price_usd as avg_unit_price,\r\n        min_unit_price_usd as min_unit_price,\r\n        max_unit_price_usd as max_unit_price,\r\n        price_variance_usd as price_variance,\r\n        price_stddev_usd as price_stddev,\r\n        \r\n        -- Volume measures\r\n        order_line_count as order_count,\r\n        total_quantity,\r\n        \r\n        -- Variance analysis measures\r\n        price_range_ratio,\r\n        coefficient_of_variation,\r\n        has_significant_variance,\r\n        \r\n        -- Analysis period\r\n        order_date as analysis_date,\r\n        \r\n        -- Audit fields\r\n        current_timestamp as created_at\r\n        \r\n    from fact_with_keys\r\n    where date_key is not null\r\n      and product_key is not null\r\n      and vendor_key is not null\r\n      and cost_centre_key is not null\r\n      and has_significant_variance = true  -- Only include records with significant variance\r\n)\r\n\r\nselect * from final_fact\r\norder by date_key desc, coefficient_of_variation desc, price_range_ratio desc", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_valid", "package": null, "version": null}, {"name": "dim_date", "package": null, "version": null}, {"name": "dim_date", "package": null, "version": null}, {"name": "dim_cost_centre", "package": null, "version": null}, {"name": "dim_vendor", "package": null, "version": null}, {"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": ["model.orderly.silver_orders_valid", "model.orderly.dim_date", "model.orderly.dim_cost_centre", "model.orderly.dim_vendor", "model.orderly.dim_product"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\fct_price_variance.sql", "compiled": true, "compiled_code": "\n\n-- Price variance and anomaly detection fact table\n-- Grain: One row per SKU per vendor per cost centre per time period with price variance\nwith base_orders as (\n    select\n        sku_id,\n        matched_vendor_id as vendor_id,\n        cost_centre_id,\n        order_date,\n        unit_price,\n        currency,\n        quantity,\n        order_id,\n        line_number,\n        \n        -- Convert to USD for consistent price analysis\n        case \n            when currency = 'USD' then unit_price\n            when currency = 'AUD' then unit_price / dd.usd_to_aud\n            else null\n        end as unit_price_usd\n        \n    from \"orderly\".\"dev_silver\".\"silver_orders_valid\"\n    left join \"orderly\".\"dev_gold\".\"dim_date\" dd on dd.date_actual = order_date\n    where matched_vendor_id is not null\n      and unit_price > 0\n      and quantity > 0\n),\n\n-- Aggregate by SKU/Vendor/Cost Centre/Date (daily grain)\ndaily_aggregates as (\n    select\n        sku_id,\n        vendor_id,\n        cost_centre_id,\n        order_date,\n        \n        -- Price statistics\n        avg(unit_price_usd) as avg_unit_price_usd,\n        min(unit_price_usd) as min_unit_price_usd,\n        max(unit_price_usd) as max_unit_price_usd,\n        count(*) as order_line_count,\n        sum(quantity) as total_quantity,\n        \n        -- Price variance calculations\n        variance(unit_price_usd) as price_variance_usd,\n        stddev(unit_price_usd) as price_stddev_usd\n        \n    from base_orders\n    where unit_price_usd is not null\n    group by sku_id, vendor_id, cost_centre_id, order_date\n),\n\n-- Calculate variance thresholds and identify anomalies\nprice_analysis as (\n    select\n        *,\n        \n        -- Price range analysis\n        case \n            when max_unit_price_usd > 0 and min_unit_price_usd > 0 \n            then (max_unit_price_usd - min_unit_price_usd) / min_unit_price_usd\n            else 0\n        end as price_range_ratio,\n        \n        -- Coefficient of variation (standardized measure of price variability)\n        case \n            when avg_unit_price_usd > 0 and price_stddev_usd > 0\n            then price_stddev_usd / avg_unit_price_usd\n            else 0\n        end as coefficient_of_variation,\n        \n        -- Flag significant variance (> 20% coefficient of variation or >50% range ratio)\n        case \n            when (price_stddev_usd / nullif(avg_unit_price_usd, 0)) > 0.20 \n              or ((max_unit_price_usd - min_unit_price_usd) / nullif(min_unit_price_usd, 0)) > 0.50\n            then true\n            else false\n        end as has_significant_variance\n        \n    from daily_aggregates\n),\n\n-- Join with dimensions to get surrogate keys\nfact_with_keys as (\n    select\n        pa.*,\n        \n        -- Dimension keys\n        dd.date_key,\n        dc.cost_centre_key,\n        dv.vendor_key,\n        dp.product_key\n        \n    from price_analysis pa\n    \n    -- Join dimensions\n    left join \"orderly\".\"dev_gold\".\"dim_date\" dd \n        on dd.date_actual = pa.order_date\n    \n    left join \"orderly\".\"dev_gold\".\"dim_cost_centre\" dc \n        on dc.cost_centre_id = pa.cost_centre_id\n    \n    left join \"orderly\".\"dev_gold\".\"dim_vendor\" dv \n        on cast(dv.vendor_id as varchar) = cast(pa.vendor_id as varchar)\n    \n    left join \"orderly\".\"dev_gold\".\"dim_product\" dp \n        on dp.sku_id = pa.sku_id\n),\n\n-- Final fact table - only include records with variance\nfinal_fact as (\n    select\n        -- Surrogate fact key\n        md5(concat(sku_id, '|', vendor_id, '|', cost_centre_id, '|', order_date)) as price_variance_key,\n        \n        -- Dimension keys\n        date_key,\n        product_key,\n        vendor_key,\n        cost_centre_key,\n        \n        -- Price measures (in USD for consistency)\n        avg_unit_price_usd as avg_unit_price,\n        min_unit_price_usd as min_unit_price,\n        max_unit_price_usd as max_unit_price,\n        price_variance_usd as price_variance,\n        price_stddev_usd as price_stddev,\n        \n        -- Volume measures\n        order_line_count as order_count,\n        total_quantity,\n        \n        -- Variance analysis measures\n        price_range_ratio,\n        coefficient_of_variation,\n        has_significant_variance,\n        \n        -- Analysis period\n        order_date as analysis_date,\n        \n        -- Audit fields\n        current_timestamp as created_at\n        \n    from fact_with_keys\n    where date_key is not null\n      and product_key is not null\n      and vendor_key is not null\n      and cost_centre_key is not null\n      and has_significant_variance = true  -- Only include records with significant variance\n)\n\nselect * from final_fact\norder by date_key desc, coefficient_of_variation desc, price_range_ratio desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["price_variance_key"], "time_spine": null}, "model.orderly.silver_cost_centres": {"database": "orderly", "schema": "dev_silver", "name": "silver_cost_centres", "resource_type": "model", "package_name": "orderly", "path": "silver\\silver_cost_centres.sql", "original_file_path": "models\\silver\\silver_cost_centres.sql", "unique_id": "model.orderly.silver_cost_centres", "fqn": ["orderly", "silver", "silver_cost_centres"], "alias": "silver_cost_centres", "checksum": {"name": "sha256", "checksum": "a395a0a03e518d8f79bf8616bd38e847dfa70398d0b9e2735f0d76d65ff7e1ed"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": ["layer:silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'silver') }}{% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#C0C0C0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:silver"], "description": "Silver cost centres - clean reference data", "columns": {"cost_centre_id": {"name": "cost_centre_id", "description": "Unique cost centre identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cost_centre_name": {"name": "cost_centre_name", "description": "Cost centre name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country_code": {"name": "country_code", "description": "ISO country code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#C0C0C0"}, "patch_path": "orderly://models\\silver\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:silver"], "schema": "silver", "docs": {"node_color": "#C0C0C0"}, "post-hook": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'silver') }}{% endif %}"}, "created_at": 1754795766.3740027, "relation_name": "\"orderly\".\"dev_silver\".\"silver_cost_centres\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Silver cost centres - direct passthrough from bronze\r\nselect\r\n    cost_centre_id,\r\n    cost_centre_name,\r\n    country_code\r\nfrom {{ ref('raw_cost_centres') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_cost_centres", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": ["model.orderly.raw_cost_centres"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\silver_cost_centres.sql", "compiled": true, "compiled_code": "\n\n-- Silver cost centres - direct passthrough from bronze\nselect\n    cost_centre_id,\n    cost_centre_name,\n    country_code\nfrom \"orderly\".\"dev_bronze\".\"raw_cost_centres\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["cost_centre_id"], "time_spine": null}, "model.orderly.silver_exchange_rates": {"database": "orderly", "schema": "dev_silver", "name": "silver_exchange_rates", "resource_type": "model", "package_name": "orderly", "path": "silver\\silver_exchange_rates.sql", "original_file_path": "models\\silver\\silver_exchange_rates.sql", "unique_id": "model.orderly.silver_exchange_rates", "fqn": ["orderly", "silver", "silver_exchange_rates"], "alias": "silver_exchange_rates", "checksum": {"name": "sha256", "checksum": "8fcb4af146e6db72e09335c8a73adbda444ab72d6bc7807c0db99e1ba592adb8"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": ["layer:silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'silver') }}{% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#C0C0C0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:silver"], "description": "Silver exchange rates - direct passthrough from staging layer", "columns": {"date": {"name": "date", "description": "Exchange rate date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "from_currency": {"name": "from_currency", "description": "Source currency code (always USD)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "to_currency": {"name": "to_currency", "description": "Target currency code (always AUD)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "exchange_rate": {"name": "exchange_rate", "description": "USD to AUD exchange rate value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "rate_source": {"name": "rate_source", "description": "Source methodology for the exchange rate:\n- **SOURCE**: Direct USD->AUD rate from raw data (highest confidence)\n- **CALCULATED**: USD->AUD calculated by inverting AUD->USD rate (1/rate)\n- **INTERPOLATED**: Linear interpolation between surrounding known rates\n- **FORWARD_FILLED**: Forward fill used when only historical data available\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#C0C0C0"}, "patch_path": "orderly://models\\silver\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:silver"], "schema": "silver", "docs": {"node_color": "#C0C0C0"}, "post-hook": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'silver') }}{% endif %}"}, "created_at": 1754795766.3746004, "relation_name": "\"orderly\".\"dev_silver\".\"silver_exchange_rates\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Silver exchange rates - direct passthrough from staging\r\nselect\r\n    date,\r\n    from_currency,\r\n    to_currency,\r\n    exchange_rate,\r\n    rate_source\r\nfrom {{ ref('stg_exchange_rates') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": ["model.orderly.stg_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\silver_exchange_rates.sql", "compiled": true, "compiled_code": "\n\n-- Silver exchange rates - direct passthrough from staging\nselect\n    date,\n    from_currency,\n    to_currency,\n    exchange_rate,\n    rate_source\nfrom \"orderly\".\"dev_staging\".\"stg_exchange_rates\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.orderly.silver_orders_exceptions": {"database": "orderly", "schema": "dev_silver", "name": "silver_orders_exceptions", "resource_type": "model", "package_name": "orderly", "path": "silver\\silver_orders_exceptions.sql", "original_file_path": "models\\silver\\silver_orders_exceptions.sql", "unique_id": "model.orderly.silver_orders_exceptions", "fqn": ["orderly", "silver", "silver_orders_exceptions"], "alias": "silver_orders_exceptions", "checksum": {"name": "sha256", "checksum": "bae72878bf64c745bf6708983fa95c1f7cc02107a2aa78755e9eec7dc7ef601a"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": ["layer:silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'silver') }}{% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#C0C0C0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:silver"], "description": "Orders with data quality issues for monitoring and analysis (excludes non-product items)", "columns": {"line_uid": {"name": "line_uid", "description": "Unique identifier for each order line", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_id": {"name": "order_id", "description": "Order identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cost_centre_id": {"name": "cost_centre_id", "description": "Cost centre identifier (FK to silver_cost_centres)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "flag_missing_in_seed": {"name": "flag_missing_in_seed", "description": "True if SKU missing from seed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "flag_name_mismatch": {"name": "flag_name_mismatch", "description": "True if SKU name fuzzy match score < 0.8", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "flag_vendor_mismatch": {"name": "flag_vendor_mismatch", "description": "True if vendor brand has no good match in vendor master", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_brand_original": {"name": "vendor_brand_original", "description": "Original vendor brand from order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "matched_vendor_id": {"name": "matched_vendor_id", "description": "Matched vendor ID (may be null for exceptions)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "matched_vendor_name": {"name": "matched_vendor_name", "description": "Matched vendor name (may be null for exceptions)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_fuzz_score": {"name": "vendor_fuzz_score", "description": "Vendor fuzzy matching score", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "exception_type": {"name": "exception_type", "description": "Type of quality exception (SKU_NOT_IN_SEED, NAME_MISMATCH, VENDOR_MISMATCH, OTHER)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#C0C0C0"}, "patch_path": "orderly://models\\silver\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:silver"], "schema": "silver", "docs": {"node_color": "#C0C0C0"}, "post-hook": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'silver') }}{% endif %}"}, "created_at": 1754795766.3767707, "relation_name": "\"orderly\".\"dev_silver\".\"silver_orders_exceptions\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Silver orders exceptions - records with data quality issues for monitoring and analysis\r\n-- Note: Non-product records are handled separately in silver_orders_nonproduct\r\nwith flagged_orders as (\r\n    select * from {{ ref('stg_orders_with_flags') }}\r\n)\r\n\r\nselect \r\n    order_id,\r\n    line_number,\r\n    sku_id,\r\n    item_description_original,\r\n    item_description_cleaned,\r\n    quantity,\r\n    unit_price,\r\n    currency,\r\n    vendor_brand,\r\n    cost_centre_id,\r\n    country_code,\r\n    requisitioner,\r\n    approval_status,\r\n    delivery_date,\r\n    order_date,\r\n    source_filename,\r\n    created_timestamp,\r\n    non_product_hint,\r\n    line_uid,\r\n    \r\n    -- Quality flags\r\n    flag_missing_in_seed,\r\n    flag_name_mismatch,\r\n    flag_vendor_mismatch,\r\n    has_quality_issues,\r\n    \r\n    -- Fuzzy comparison details (for debugging/analysis)\r\n    fuzz_score,\r\n    compared_order_desc,\r\n    compared_seed_name,\r\n    \r\n    -- Vendor matching details\r\n    vendor_brand_original,\r\n    cast(matched_vendor_id as varchar) as matched_vendor_id,\r\n    matched_vendor_name,\r\n    vendor_fuzz_score,\r\n    \r\n    -- Exception categorization (excluding non-product items)\r\n    case \r\n        when coalesce(flag_missing_in_seed, false) then 'SKU_NOT_IN_SEED'\r\n        when coalesce(flag_name_mismatch, false) then 'NAME_MISMATCH'\r\n        when coalesce(flag_vendor_mismatch, false) then 'VENDOR_MISMATCH'\r\n        else 'OTHER'\r\n    end as exception_type   \r\nfrom flagged_orders\r\nwhere \r\n    -- Exclude non-product records (handled in silver_orders_nonproduct)\r\n    not (non_product_hint = true and sku_id is null)\r\n    and (\r\n        coalesce(flag_missing_in_seed, false) = true\r\n        or coalesce(flag_name_mismatch, false) = true\r\n        or coalesce(flag_vendor_mismatch, false) = true\r\n    )", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders_with_flags", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": ["model.orderly.stg_orders_with_flags"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\silver_orders_exceptions.sql", "compiled": true, "compiled_code": "\n\n-- Silver orders exceptions - records with data quality issues for monitoring and analysis\n-- Note: Non-product records are handled separately in silver_orders_nonproduct\nwith flagged_orders as (\n    select * from \"orderly\".\"dev_staging\".\"stg_orders_with_flags\"\n)\n\nselect \n    order_id,\n    line_number,\n    sku_id,\n    item_description_original,\n    item_description_cleaned,\n    quantity,\n    unit_price,\n    currency,\n    vendor_brand,\n    cost_centre_id,\n    country_code,\n    requisitioner,\n    approval_status,\n    delivery_date,\n    order_date,\n    source_filename,\n    created_timestamp,\n    non_product_hint,\n    line_uid,\n    \n    -- Quality flags\n    flag_missing_in_seed,\n    flag_name_mismatch,\n    flag_vendor_mismatch,\n    has_quality_issues,\n    \n    -- Fuzzy comparison details (for debugging/analysis)\n    fuzz_score,\n    compared_order_desc,\n    compared_seed_name,\n    \n    -- Vendor matching details\n    vendor_brand_original,\n    cast(matched_vendor_id as varchar) as matched_vendor_id,\n    matched_vendor_name,\n    vendor_fuzz_score,\n    \n    -- Exception categorization (excluding non-product items)\n    case \n        when coalesce(flag_missing_in_seed, false) then 'SKU_NOT_IN_SEED'\n        when coalesce(flag_name_mismatch, false) then 'NAME_MISMATCH'\n        when coalesce(flag_vendor_mismatch, false) then 'VENDOR_MISMATCH'\n        else 'OTHER'\n    end as exception_type   \nfrom flagged_orders\nwhere \n    -- Exclude non-product records (handled in silver_orders_nonproduct)\n    not (non_product_hint = true and sku_id is null)\n    and (\n        coalesce(flag_missing_in_seed, false) = true\n        or coalesce(flag_name_mismatch, false) = true\n        or coalesce(flag_vendor_mismatch, false) = true\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.orderly.silver_orders_nonproduct": {"database": "orderly", "schema": "dev_silver", "name": "silver_orders_nonproduct", "resource_type": "model", "package_name": "orderly", "path": "silver\\silver_orders_nonproduct.sql", "original_file_path": "models\\silver\\silver_orders_nonproduct.sql", "unique_id": "model.orderly.silver_orders_nonproduct", "fqn": ["orderly", "silver", "silver_orders_nonproduct"], "alias": "silver_orders_nonproduct", "checksum": {"name": "sha256", "checksum": "dae906650fd6f9c6d3bad14fed51c6421f7f686cc007187da75578073aceefb2"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": ["layer:silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'silver') }}{% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#C0C0C0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:silver"], "description": "Orders identified as non-product items (services, fees, taxes, etc.)", "columns": {"line_uid": {"name": "line_uid", "description": "Unique identifier for each order line", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_id": {"name": "order_id", "description": "Order identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_number": {"name": "line_number", "description": "Line number within order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cost_centre_id": {"name": "cost_centre_id", "description": "Cost centre identifier (FK to silver_cost_centres)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "item_description_original": {"name": "item_description_original", "description": "Original item description from source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "item_description_cleaned": {"name": "item_description_cleaned", "description": "Cleaned item description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "non_product_hint": {"name": "non_product_hint", "description": "Flag indicating non-product line items", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_type": {"name": "record_type", "description": "Record classification type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#C0C0C0"}, "patch_path": "orderly://models\\silver\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:silver"], "schema": "silver", "docs": {"node_color": "#C0C0C0"}, "post-hook": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'silver') }}{% endif %}"}, "created_at": 1754795766.3779228, "relation_name": "\"orderly\".\"dev_silver\".\"silver_orders_nonproduct\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Silver orders non-product - records identified as non-product items (services, fees, etc.)\r\nwith flagged_orders as (\r\n    select * from {{ ref('stg_orders_with_flags') }}\r\n)\r\n\r\nselect \r\n    order_id,\r\n    line_number,\r\n    sku_id,\r\n    item_description_original,\r\n    item_description_cleaned,\r\n    quantity,\r\n    unit_price,\r\n    currency,\r\n    vendor_brand,\r\n    cost_centre_id,\r\n    country_code,\r\n    requisitioner,\r\n    approval_status,\r\n    delivery_date,\r\n    order_date,\r\n    source_filename,\r\n    created_timestamp,\r\n    non_product_hint,\r\n    line_uid,\r\n    \r\n    -- Quality flags\r\n    flag_missing_in_seed,\r\n    flag_name_mismatch,\r\n    flag_vendor_mismatch,\r\n    has_quality_issues,\r\n    \r\n    -- Fuzzy comparison details (for debugging/analysis)\r\n    fuzz_score,\r\n    compared_order_desc,\r\n    compared_seed_name,\r\n    \r\n    -- Vendor matching details\r\n    vendor_brand_original,\r\n    matched_vendor_id,\r\n    matched_vendor_name,\r\n    vendor_fuzz_score,\r\n    \r\n    -- Non-product categorization\r\n    'NON_PRODUCT' as record_type\r\nfrom flagged_orders\r\nwhere \r\n    non_product_hint = true\r\n    and sku_id is null", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders_with_flags", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": ["model.orderly.stg_orders_with_flags"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\silver_orders_nonproduct.sql", "compiled": true, "compiled_code": "\n\n-- Silver orders non-product - records identified as non-product items (services, fees, etc.)\nwith flagged_orders as (\n    select * from \"orderly\".\"dev_staging\".\"stg_orders_with_flags\"\n)\n\nselect \n    order_id,\n    line_number,\n    sku_id,\n    item_description_original,\n    item_description_cleaned,\n    quantity,\n    unit_price,\n    currency,\n    vendor_brand,\n    cost_centre_id,\n    country_code,\n    requisitioner,\n    approval_status,\n    delivery_date,\n    order_date,\n    source_filename,\n    created_timestamp,\n    non_product_hint,\n    line_uid,\n    \n    -- Quality flags\n    flag_missing_in_seed,\n    flag_name_mismatch,\n    flag_vendor_mismatch,\n    has_quality_issues,\n    \n    -- Fuzzy comparison details (for debugging/analysis)\n    fuzz_score,\n    compared_order_desc,\n    compared_seed_name,\n    \n    -- Vendor matching details\n    vendor_brand_original,\n    matched_vendor_id,\n    matched_vendor_name,\n    vendor_fuzz_score,\n    \n    -- Non-product categorization\n    'NON_PRODUCT' as record_type\nfrom flagged_orders\nwhere \n    non_product_hint = true\n    and sku_id is null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.orderly.silver_orders_valid": {"database": "orderly", "schema": "dev_silver", "name": "silver_orders_valid", "resource_type": "model", "package_name": "orderly", "path": "silver\\silver_orders_valid.sql", "original_file_path": "models\\silver\\silver_orders_valid.sql", "unique_id": "model.orderly.silver_orders_valid", "fqn": ["orderly", "silver", "silver_orders_valid"], "alias": "silver_orders_valid", "checksum": {"name": "sha256", "checksum": "236c8a9f8bac0f875ad131d1d3d57eb5c1a3547e6179e7019f21bcf4ab00cc56"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": ["layer:silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'silver') }}{% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#C0C0C0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:silver"], "description": "Clean, valid orders (SKU, name, and vendor quality issues filtered out)", "columns": {"line_uid": {"name": "line_uid", "description": "Unique identifier for each order line", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_id": {"name": "order_id", "description": "Order identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sku_id": {"name": "sku_id", "description": "Product SKU identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cost_centre_id": {"name": "cost_centre_id", "description": "Cost centre identifier (FK to silver_cost_centres)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "matched_vendor_id": {"name": "matched_vendor_id", "description": "Matched vendor ID from vendor master (high confidence matches only)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "matched_vendor_name": {"name": "matched_vendor_name", "description": "Matched vendor name from vendor master (high confidence matches only)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_fuzz_score": {"name": "vendor_fuzz_score", "description": "Vendor fuzzy matching score (all records have score > 0.8 or null)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#C0C0C0"}, "patch_path": "orderly://models\\silver\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:silver"], "schema": "silver", "docs": {"node_color": "#C0C0C0"}, "post-hook": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'silver') }}{% endif %}"}, "created_at": 1754795766.3757405, "relation_name": "\"orderly\".\"dev_silver\".\"silver_orders_valid\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Silver orders - clean, valid records only (quality issues filtered out)\r\nwith flagged_orders as (\r\n    select * from {{ ref('stg_orders_with_flags') }}\r\n)\r\n\r\nselect \r\n    order_id,\r\n    line_number,\r\n    sku_id,\r\n    item_description_original,\r\n    item_description_cleaned,\r\n    quantity,\r\n    unit_price,\r\n    currency,\r\n    vendor_brand,\r\n    cost_centre_id,\r\n    country_code,\r\n    requisitioner,\r\n    approval_status,\r\n    delivery_date,\r\n    order_date,\r\n    source_filename,\r\n    created_timestamp,\r\n    non_product_hint,\r\n    line_uid,\r\n    \r\n    -- Vendor matching details (for valid records)\r\n    matched_vendor_id,\r\n    matched_vendor_name,\r\n    vendor_fuzz_score\r\n    \r\nfrom flagged_orders\r\nwhere \r\n    coalesce(flag_missing_in_seed, false) = false\r\n    and coalesce(flag_name_mismatch, false) = false\r\n    and coalesce(flag_vendor_mismatch, false) = false", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders_with_flags", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": ["model.orderly.stg_orders_with_flags"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\silver_orders_valid.sql", "compiled": true, "compiled_code": "\n\n-- Silver orders - clean, valid records only (quality issues filtered out)\nwith flagged_orders as (\n    select * from \"orderly\".\"dev_staging\".\"stg_orders_with_flags\"\n)\n\nselect \n    order_id,\n    line_number,\n    sku_id,\n    item_description_original,\n    item_description_cleaned,\n    quantity,\n    unit_price,\n    currency,\n    vendor_brand,\n    cost_centre_id,\n    country_code,\n    requisitioner,\n    approval_status,\n    delivery_date,\n    order_date,\n    source_filename,\n    created_timestamp,\n    non_product_hint,\n    line_uid,\n    \n    -- Vendor matching details (for valid records)\n    matched_vendor_id,\n    matched_vendor_name,\n    vendor_fuzz_score\n    \nfrom flagged_orders\nwhere \n    coalesce(flag_missing_in_seed, false) = false\n    and coalesce(flag_name_mismatch, false) = false\n    and coalesce(flag_vendor_mismatch, false) = false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["line_uid"], "time_spine": null}, "model.orderly.silver_vendor_master": {"database": "orderly", "schema": "dev_silver", "name": "silver_vendor_master", "resource_type": "model", "package_name": "orderly", "path": "silver\\silver_vendor_master.sql", "original_file_path": "models\\silver\\silver_vendor_master.sql", "unique_id": "model.orderly.silver_vendor_master", "fqn": ["orderly", "silver", "silver_vendor_master"], "alias": "silver_vendor_master", "checksum": {"name": "sha256", "checksum": "fc4f3a041ee79dc31a5886a1790e53a3a957c911d418cdb0d142130bedfddd1e"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": ["layer:silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'silver') }}{% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#C0C0C0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:silver"], "description": "Silver vendor master - clean reference data", "columns": {"vendor_id": {"name": "vendor_id", "description": "Unique vendor identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_name": {"name": "vendor_name", "description": "Vendor company name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#C0C0C0"}, "patch_path": "orderly://models\\silver\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["layer:silver"], "schema": "silver", "docs": {"node_color": "#C0C0C0"}, "post-hook": "{% if target.name == 'dev' %}{{ export_to_csv_posthook('data/intermediate', 'silver') }}{% endif %}"}, "created_at": 1754795766.3749056, "relation_name": "\"orderly\".\"dev_silver\".\"silver_vendor_master\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Silver vendor master - direct passthrough from bronze\r\nselect * from {{ ref('raw_vendor_master') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_vendor_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_to_csv_posthook"], "nodes": ["model.orderly.raw_vendor_master"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\silver_vendor_master.sql", "compiled": true, "compiled_code": "\n\n-- Silver vendor master - direct passthrough from bronze\nselect * from \"orderly\".\"dev_bronze\".\"raw_vendor_master\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["vendor_id"], "time_spine": null}, "model.orderly.stg_exchange_rates": {"database": "orderly", "schema": "dev_staging", "name": "stg_exchange_rates", "resource_type": "model", "package_name": "orderly", "path": "staging\\stg_exchange_rates.sql", "original_file_path": "models\\staging\\stg_exchange_rates.sql", "unique_id": "model.orderly.stg_exchange_rates", "fqn": ["orderly", "staging", "stg_exchange_rates"], "alias": "stg_exchange_rates", "checksum": {"name": "sha256", "checksum": "c5ff5094e19e8421b48f43d6eae6fdbc4f65bfefcc54328ed29f8a41c00349c8"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["layer:staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:staging"], "description": "Staging exchange rates - Daily USD to AUD rates with linear interpolation for missing dates.\n\n**Linear Interpolation Strategy:**\n1. **Date Range Generation**: Uses DuckDB's generate_series() to create complete daily coverage\n2. **Window Functions**: Uses last_value()/first_value() with 'ignore nulls' to find surrounding rates\n3. **Linear Formula**: prev_rate + ((next_rate - prev_rate) * ((current_date - prev_date) / (next_date - prev_date)))\n4. **Rate Sources**: SOURCE (direct data), CALCULATED (AUD->USD inverse), INTERPOLATED (linear), FORWARD_FILLED (gap filling)\n\n**Data Priority**: Direct USD->AUD rates preferred over calculated rates from AUD->USD inverse.\n**Coverage**: Complete daily series from first to last available date with no gaps.\n", "columns": {"date": {"name": "date", "description": "Exchange rate date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "from_currency": {"name": "from_currency", "description": "Source currency code (always USD)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "to_currency": {"name": "to_currency", "description": "Target currency code (always AUD)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "exchange_rate": {"name": "exchange_rate", "description": "USD to AUD exchange rate value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "rate_source": {"name": "rate_source", "description": "Source methodology for the exchange rate:\n- **SOURCE**: Direct USD->AUD rate from raw data (highest confidence)\n- **CALCULATED**: USD->AUD calculated by inverting AUD->USD rate (1/rate)\n- **INTERPOLATED**: Linear interpolation between surrounding known rates\n- **FORWARD_FILLED**: Forward fill used when only historical data available\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "orderly://models\\staging\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "staging", "tags": ["layer:staging"]}, "created_at": 1754795766.4240468, "relation_name": "\"orderly\".\"dev_staging\".\"stg_exchange_rates\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Staging exchange rates - Daily USD to AUD rates with interpolation for missing dates\r\nwith raw_rates as (\r\n    select\r\n        date,\r\n        from_currency,\r\n        to_currency,\r\n        exchange_rate\r\n    from {{ ref('raw_exchange_rates') }}\r\n),\r\n\r\n-- Get USD->AUD rates directly from source\r\nusd_to_aud_direct as (\r\n    select\r\n        date,\r\n        exchange_rate,\r\n        'SOURCE' as rate_source\r\n    from raw_rates\r\n    where from_currency = 'USD' and to_currency = 'AUD'\r\n),\r\n\r\n-- Calculate USD->AUD from AUD->USD (inverse)\r\nusd_to_aud_calculated as (\r\n    select\r\n        date,\r\n        1.0 / exchange_rate as exchange_rate,\r\n        'CALCULATED' as rate_source\r\n    from raw_rates\r\n    where from_currency = 'AUD' and to_currency = 'USD'\r\n        and exchange_rate > 0  -- Avoid division by zero\r\n),\r\n\r\n-- Combine both sources, prioritizing direct rates\r\ncombined_rates as (\r\n    select * from usd_to_aud_direct\r\n    union all\r\n    select * from usd_to_aud_calculated\r\n),\r\n\r\n-- Remove duplicates, prioritizing SOURCE over CALCULATED\r\ndeduplicated_rates as (\r\n    select\r\n        date,\r\n        exchange_rate,\r\n        rate_source,\r\n        row_number() over (\r\n            partition by date \r\n            order by case when rate_source = 'SOURCE' then 1 else 2 end\r\n        ) as rn\r\n    from combined_rates\r\n),\r\n\r\n-- Get unique rates per date\r\nbase_rates as (\r\n    select\r\n        date,\r\n        exchange_rate,\r\n        rate_source\r\n    from deduplicated_rates\r\n    where rn = 1\r\n),\r\n\r\n-- Create complete date range using DuckDB's generate_series\r\ndate_range as (\r\n    select d::date as date\r\n    from generate_series(\r\n        (select min(date) from base_rates),\r\n        (select max(date) from base_rates),\r\n        interval '1 day'\r\n    ) as t(d)\r\n),\r\n\r\n-- Join dates with known rates\r\ndates_with_rates as (\r\n    select \r\n        dr.date,\r\n        br.exchange_rate,\r\n        br.rate_source\r\n    from date_range dr\r\n    left join base_rates br on dr.date = br.date\r\n),\r\n\r\n-- Add row numbers and forward/backward fill for interpolation\r\nrates_with_context as (\r\n    select \r\n        date,\r\n        exchange_rate,\r\n        rate_source,\r\n        -- Get the last known rate before this date\r\n        last_value(exchange_rate ignore nulls) over (\r\n            order by date \r\n            rows between unbounded preceding and current row\r\n        ) as prev_rate,\r\n        -- Get the last known date before this date  \r\n        last_value(case when exchange_rate is not null then date end ignore nulls) over (\r\n            order by date \r\n            rows between unbounded preceding and current row\r\n        ) as prev_date,\r\n        -- Get the next known rate after this date\r\n        first_value(exchange_rate ignore nulls) over (\r\n            order by date \r\n            rows between current row and unbounded following\r\n        ) as next_rate,\r\n        -- Get the next known date after this date\r\n        first_value(case when exchange_rate is not null then date end ignore nulls) over (\r\n            order by date \r\n            rows between current row and unbounded following\r\n        ) as next_date\r\n    from dates_with_rates\r\n),\r\n\r\n-- Calculate interpolated rates\r\nfinal_rates as (\r\n    select\r\n        date,\r\n        case \r\n            -- Use actual rate if available\r\n            when exchange_rate is not null then exchange_rate\r\n            -- Linear interpolation between prev and next\r\n            when prev_rate is not null and next_rate is not null and prev_date != next_date then\r\n                prev_rate + ((next_rate - prev_rate) * \r\n                    ((date - prev_date) / (next_date - prev_date)))\r\n            -- Forward fill if no next rate\r\n            when prev_rate is not null then prev_rate\r\n            -- Backward fill if no prev rate\r\n            when next_rate is not null then next_rate\r\n            else null\r\n        end as exchange_rate,\r\n        case \r\n            when exchange_rate is not null then rate_source\r\n            when prev_rate is not null and next_rate is not null and prev_date != next_date then 'INTERPOLATED'\r\n            when prev_rate is not null or next_rate is not null then 'FORWARD_FILLED'\r\n            else null\r\n        end as rate_source\r\n    from rates_with_context\r\n)\r\n\r\nselect\r\n    date,\r\n    'USD' as from_currency,\r\n    'AUD' as to_currency,\r\n    exchange_rate,\r\n    rate_source\r\nfrom final_rates\r\nwhere exchange_rate is not null\r\norder by date", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.orderly.raw_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\stg_exchange_rates.sql", "compiled": true, "compiled_code": "\n\n-- Staging exchange rates - Daily USD to AUD rates with interpolation for missing dates\nwith raw_rates as (\n    select\n        date,\n        from_currency,\n        to_currency,\n        exchange_rate\n    from \"orderly\".\"dev_bronze\".\"raw_exchange_rates\"\n),\n\n-- Get USD->AUD rates directly from source\nusd_to_aud_direct as (\n    select\n        date,\n        exchange_rate,\n        'SOURCE' as rate_source\n    from raw_rates\n    where from_currency = 'USD' and to_currency = 'AUD'\n),\n\n-- Calculate USD->AUD from AUD->USD (inverse)\nusd_to_aud_calculated as (\n    select\n        date,\n        1.0 / exchange_rate as exchange_rate,\n        'CALCULATED' as rate_source\n    from raw_rates\n    where from_currency = 'AUD' and to_currency = 'USD'\n        and exchange_rate > 0  -- Avoid division by zero\n),\n\n-- Combine both sources, prioritizing direct rates\ncombined_rates as (\n    select * from usd_to_aud_direct\n    union all\n    select * from usd_to_aud_calculated\n),\n\n-- Remove duplicates, prioritizing SOURCE over CALCULATED\ndeduplicated_rates as (\n    select\n        date,\n        exchange_rate,\n        rate_source,\n        row_number() over (\n            partition by date \n            order by case when rate_source = 'SOURCE' then 1 else 2 end\n        ) as rn\n    from combined_rates\n),\n\n-- Get unique rates per date\nbase_rates as (\n    select\n        date,\n        exchange_rate,\n        rate_source\n    from deduplicated_rates\n    where rn = 1\n),\n\n-- Create complete date range using DuckDB's generate_series\ndate_range as (\n    select d::date as date\n    from generate_series(\n        (select min(date) from base_rates),\n        (select max(date) from base_rates),\n        interval '1 day'\n    ) as t(d)\n),\n\n-- Join dates with known rates\ndates_with_rates as (\n    select \n        dr.date,\n        br.exchange_rate,\n        br.rate_source\n    from date_range dr\n    left join base_rates br on dr.date = br.date\n),\n\n-- Add row numbers and forward/backward fill for interpolation\nrates_with_context as (\n    select \n        date,\n        exchange_rate,\n        rate_source,\n        -- Get the last known rate before this date\n        last_value(exchange_rate ignore nulls) over (\n            order by date \n            rows between unbounded preceding and current row\n        ) as prev_rate,\n        -- Get the last known date before this date  \n        last_value(case when exchange_rate is not null then date end ignore nulls) over (\n            order by date \n            rows between unbounded preceding and current row\n        ) as prev_date,\n        -- Get the next known rate after this date\n        first_value(exchange_rate ignore nulls) over (\n            order by date \n            rows between current row and unbounded following\n        ) as next_rate,\n        -- Get the next known date after this date\n        first_value(case when exchange_rate is not null then date end ignore nulls) over (\n            order by date \n            rows between current row and unbounded following\n        ) as next_date\n    from dates_with_rates\n),\n\n-- Calculate interpolated rates\nfinal_rates as (\n    select\n        date,\n        case \n            -- Use actual rate if available\n            when exchange_rate is not null then exchange_rate\n            -- Linear interpolation between prev and next\n            when prev_rate is not null and next_rate is not null and prev_date != next_date then\n                prev_rate + ((next_rate - prev_rate) * \n                    ((date - prev_date) / (next_date - prev_date)))\n            -- Forward fill if no next rate\n            when prev_rate is not null then prev_rate\n            -- Backward fill if no prev rate\n            when next_rate is not null then next_rate\n            else null\n        end as exchange_rate,\n        case \n            when exchange_rate is not null then rate_source\n            when prev_rate is not null and next_rate is not null and prev_date != next_date then 'INTERPOLATED'\n            when prev_rate is not null or next_rate is not null then 'FORWARD_FILLED'\n            else null\n        end as rate_source\n    from rates_with_context\n)\n\nselect\n    date,\n    'USD' as from_currency,\n    'AUD' as to_currency,\n    exchange_rate,\n    rate_source\nfrom final_rates\nwhere exchange_rate is not null\norder by date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.orderly.stg_orders": {"database": "orderly", "schema": "dev_staging", "name": "stg_orders", "resource_type": "model", "package_name": "orderly", "path": "staging\\stg_orders.sql", "original_file_path": "models\\staging\\stg_orders.sql", "unique_id": "model.orderly.stg_orders", "fqn": ["orderly", "staging", "stg_orders"], "alias": "stg_orders", "checksum": {"name": "sha256", "checksum": "2663aa86d0abc645f236bb292b82bfdd3766cca469e6a722ccd7ccc863c3cfd7"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["layer:staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ export_stg_orders() }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:staging"], "description": "Staging orders with clean, validated data - entry point for silver layer processing", "columns": {"order_id": {"name": "order_id", "description": "Unique order identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_number": {"name": "line_number", "description": "Line number within order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sku_id": {"name": "sku_id", "description": "Product SKU identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "item_description_original": {"name": "item_description_original", "description": "Original item description from source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "item_description_cleaned": {"name": "item_description_cleaned", "description": "Cleaned item description (HTML unescaped, tags stripped, lowercased)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "Quantity ordered", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "Unit price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency": {"name": "currency", "description": "Currency code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_brand": {"name": "vendor_brand", "description": "Vendor brand name from orders data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cost_centre_id": {"name": "cost_centre_id", "description": "Cost centre identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country_code": {"name": "country_code", "description": "Country code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "requisitioner": {"name": "requisitioner", "description": "Person who made the requisition", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "approval_status": {"name": "approval_status", "description": "Approval status of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "delivery_date": {"name": "delivery_date", "description": "Expected delivery date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_date": {"name": "order_date", "description": "Order date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_filename": {"name": "source_filename", "description": "Source data filename", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_timestamp": {"name": "created_timestamp", "description": "Record creation timestamp", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "non_product_hint": {"name": "non_product_hint", "description": "Flag indicating likely non-product line items (tax, shipping, fees)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_uid": {"name": "line_uid", "description": "Unique line identifier (deterministic hash)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "orderly://models\\staging\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "staging", "tags": ["layer:staging"], "post-hook": "{{ export_stg_orders() }}"}, "created_at": 1754795766.4221401, "relation_name": "\"orderly\".\"dev_staging\".\"stg_orders\"", "raw_code": "{{ config(\r\n    materialized='table',\r\n    post_hook=\"{{ export_stg_orders() }}\"\r\n) }}\r\n\r\n-- Staging layer transformation for orders data\r\n-- Reads bronze orders and produces clean, validated staging dataset\r\nWITH bronze_orders AS (\r\n    SELECT *\r\n    FROM {{ ref('raw_orders') }}\r\n),\r\n\r\n-- Step 1: HTML entity unescaping (REPLACE for fixed strings)\r\nhtml_entities_cleaned AS (\r\n    SELECT\r\n        *,\r\n        REPLACE(\r\n            REPLACE(\r\n                REPLACE(\r\n                    REPLACE(\r\n                        REPLACE(\r\n                            REPLACE(item_description, '&amp;', '&'),\r\n                            '&lt;', '<'\r\n                        ),\r\n                        '&gt;', '>'\r\n                    ),\r\n                    '&quot;', '\"'\r\n                ),\r\n                '&apos;', ''''\r\n            ),\r\n            '&nbsp;', ' '\r\n        ) AS desc_step1\r\n    FROM bronze_orders\r\n),\r\n\r\n-- Step 2: Remove HTML tags (REGEXP_REPLACE, double pass for robustness)\r\nhtml_tags_removed AS (\r\n    SELECT\r\n        *,\r\n        REGEXP_REPLACE(\r\n            REGEXP_REPLACE(desc_step1, '<[^>]+>', ''),\r\n            '</[^>]+>', ''\r\n        ) AS desc_step2\r\n    FROM html_entities_cleaned\r\n),\r\n\r\n-- Step 3: Unicode dash cleanup (REPLACE for fixed strings)\r\nunicode_dashes_cleaned AS (\r\n    SELECT\r\n        *,\r\n        REPLACE(\r\n            REPLACE(\r\n                REPLACE(\r\n                    REPLACE(desc_step2, '&#x2013;', '-'),\r\n                    '&#x2014;', '-'\r\n                ),\r\n                '&#8211;', '-'\r\n            ),\r\n            '&#8212;', '-'\r\n        ) AS desc_step3\r\n    FROM html_tags_removed\r\n),\r\n\r\n-- Step 4: UTF-8 encoding artifacts cleanup (REPLACE for fixed strings)\r\nutf8_artifacts_cleaned AS (\r\n    SELECT\r\n        *,\r\n        REPLACE(\r\n            REPLACE(\r\n                REPLACE(\r\n                    REPLACE(\r\n                        REPLACE(\r\n                            REPLACE(\r\n                                REPLACE(desc_step3, '\u00c3\u00a2\u00e2\u201a\u00ac\u00e2\u20ac\u0153', '-'),\r\n                                '\u00c3\u00a2\u00e2\u201a\u00ac\u00e2\u20ac', '-'\r\n                            ),\r\n                            '\u00e2\u20ac\"', '-'\r\n                        ),\r\n                        '\u00e2\u20ac\"', '-'\r\n                    ),\r\n                    '\u2013', '-'\r\n                ),\r\n                '\u2014', '-'\r\n            ),\r\n            '\u00c2', ''\r\n        ) AS desc_step4\r\n    FROM unicode_dashes_cleaned\r\n),\r\n\r\n-- Step 5: Whitespace normalization (REGEXP_REPLACE)\r\nfinal_text_cleaned AS (\r\n    SELECT\r\n        *,\r\n        LOWER(TRIM(REGEXP_REPLACE(desc_step4, '\\s+', ' '))) AS item_description_cleaned\r\n    FROM utf8_artifacts_cleaned\r\n),\r\n\r\ncleaned_orders AS (\r\n    SELECT\r\n        -- Column selection and renaming to canonical snake_case\r\n        order_id,\r\n        line_number,\r\n        sku_id,\r\n        item_description AS item_description_original,\r\n        item_description_cleaned,\r\n        \r\n        -- Safe numeric coercion\r\n        TRY_CAST(quantity AS DOUBLE) AS quantity,\r\n        TRY_CAST(unit_price AS DOUBLE) AS unit_price,\r\n        \r\n        currency,\r\n        brand AS vendor_brand,  -- Use brand instead of vendor_id (actual column name)\r\n        cost_centre_id,\r\n        country_code,\r\n        requisitioner,\r\n        approval_status,\r\n        delivery_date,\r\n        \r\n        -- Safe date parsing\r\n        TRY_CAST(order_date AS DATE) AS order_date,\r\n        TRY_CAST(order_timestamp AS TIMESTAMP) AS created_timestamp,\r\n        \r\n        -- Source filename\r\n        filename AS source_filename,\r\n        \r\n        -- Non-product hint detection\r\n        CASE \r\n            WHEN LOWER(item_description) LIKE '%gst%' \r\n                OR LOWER(item_description) LIKE '%tax%'\r\n                OR LOWER(item_description) LIKE '%shipping%'\r\n                OR LOWER(item_description) LIKE '%freight%'\r\n                OR LOWER(item_description) LIKE '%delivery%'\r\n                OR LOWER(item_description) LIKE '%handling%'\r\n                OR LOWER(item_description) LIKE '%fee%'\r\n                OR LOWER(item_description) LIKE '%charge%'\r\n                OR LOWER(item_description) LIKE '%setup%'\r\n                OR LOWER(item_description) LIKE '%installation%'\r\n                OR LOWER(item_description) LIKE '%service%'\r\n                OR LOWER(item_description) LIKE '%support%'\r\n                OR LOWER(item_description) LIKE '%warranty%'\r\n                OR LOWER(item_description) LIKE '%insurance%'\r\n                OR LOWER(item_description) LIKE '%discount%'\r\n                OR LOWER(item_description) LIKE '%adjustment%'\r\n                OR LOWER(item_description) LIKE '%credit%'\r\n            THEN TRUE\r\n            ELSE FALSE\r\n        END AS non_product_hint,\r\n        \r\n        -- Deterministic line UID (using SHA256 hash)\r\n        hash(\r\n            CONCAT(\r\n                COALESCE(order_id, ''),\r\n                '|',\r\n                COALESCE(CAST(line_number AS VARCHAR), ''),\r\n                '|', \r\n                COALESCE(sku_id, ''),\r\n                '|',\r\n                COALESCE(filename, '')\r\n            )\r\n        ) AS line_uid\r\n        \r\n    FROM final_text_cleaned\r\n)\r\n\r\nSELECT \r\n    order_id,\r\n    line_number,\r\n    sku_id,\r\n    item_description_original,\r\n    item_description_cleaned,\r\n    quantity,\r\n    unit_price,\r\n    currency,\r\n    vendor_brand,\r\n    cost_centre_id,\r\n    country_code,\r\n    requisitioner,\r\n    approval_status,\r\n    delivery_date,\r\n    order_date,\r\n    source_filename,\r\n    created_timestamp,\r\n    non_product_hint,\r\n    line_uid\r\nFROM cleaned_orders", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_stg_orders"], "nodes": ["model.orderly.raw_orders"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\stg_orders.sql", "compiled": true, "compiled_code": "\n\n-- Staging layer transformation for orders data\n-- Reads bronze orders and produces clean, validated staging dataset\nWITH bronze_orders AS (\n    SELECT *\n    FROM \"orderly\".\"dev_bronze\".\"raw_orders\"\n),\n\n-- Step 1: HTML entity unescaping (REPLACE for fixed strings)\nhtml_entities_cleaned AS (\n    SELECT\n        *,\n        REPLACE(\n            REPLACE(\n                REPLACE(\n                    REPLACE(\n                        REPLACE(\n                            REPLACE(item_description, '&amp;', '&'),\n                            '&lt;', '<'\n                        ),\n                        '&gt;', '>'\n                    ),\n                    '&quot;', '\"'\n                ),\n                '&apos;', ''''\n            ),\n            '&nbsp;', ' '\n        ) AS desc_step1\n    FROM bronze_orders\n),\n\n-- Step 2: Remove HTML tags (REGEXP_REPLACE, double pass for robustness)\nhtml_tags_removed AS (\n    SELECT\n        *,\n        REGEXP_REPLACE(\n            REGEXP_REPLACE(desc_step1, '<[^>]+>', ''),\n            '</[^>]+>', ''\n        ) AS desc_step2\n    FROM html_entities_cleaned\n),\n\n-- Step 3: Unicode dash cleanup (REPLACE for fixed strings)\nunicode_dashes_cleaned AS (\n    SELECT\n        *,\n        REPLACE(\n            REPLACE(\n                REPLACE(\n                    REPLACE(desc_step2, '&#x2013;', '-'),\n                    '&#x2014;', '-'\n                ),\n                '&#8211;', '-'\n            ),\n            '&#8212;', '-'\n        ) AS desc_step3\n    FROM html_tags_removed\n),\n\n-- Step 4: UTF-8 encoding artifacts cleanup (REPLACE for fixed strings)\nutf8_artifacts_cleaned AS (\n    SELECT\n        *,\n        REPLACE(\n            REPLACE(\n                REPLACE(\n                    REPLACE(\n                        REPLACE(\n                            REPLACE(\n                                REPLACE(desc_step3, '\u00c3\u00a2\u00e2\u201a\u00ac\u00e2\u20ac\u0153', '-'),\n                                '\u00c3\u00a2\u00e2\u201a\u00ac\u00e2\u20ac', '-'\n                            ),\n                            '\u00e2\u20ac\"', '-'\n                        ),\n                        '\u00e2\u20ac\"', '-'\n                    ),\n                    '\u2013', '-'\n                ),\n                '\u2014', '-'\n            ),\n            '\u00c2', ''\n        ) AS desc_step4\n    FROM unicode_dashes_cleaned\n),\n\n-- Step 5: Whitespace normalization (REGEXP_REPLACE)\nfinal_text_cleaned AS (\n    SELECT\n        *,\n        LOWER(TRIM(REGEXP_REPLACE(desc_step4, '\\s+', ' '))) AS item_description_cleaned\n    FROM utf8_artifacts_cleaned\n),\n\ncleaned_orders AS (\n    SELECT\n        -- Column selection and renaming to canonical snake_case\n        order_id,\n        line_number,\n        sku_id,\n        item_description AS item_description_original,\n        item_description_cleaned,\n        \n        -- Safe numeric coercion\n        TRY_CAST(quantity AS DOUBLE) AS quantity,\n        TRY_CAST(unit_price AS DOUBLE) AS unit_price,\n        \n        currency,\n        brand AS vendor_brand,  -- Use brand instead of vendor_id (actual column name)\n        cost_centre_id,\n        country_code,\n        requisitioner,\n        approval_status,\n        delivery_date,\n        \n        -- Safe date parsing\n        TRY_CAST(order_date AS DATE) AS order_date,\n        TRY_CAST(order_timestamp AS TIMESTAMP) AS created_timestamp,\n        \n        -- Source filename\n        filename AS source_filename,\n        \n        -- Non-product hint detection\n        CASE \n            WHEN LOWER(item_description) LIKE '%gst%' \n                OR LOWER(item_description) LIKE '%tax%'\n                OR LOWER(item_description) LIKE '%shipping%'\n                OR LOWER(item_description) LIKE '%freight%'\n                OR LOWER(item_description) LIKE '%delivery%'\n                OR LOWER(item_description) LIKE '%handling%'\n                OR LOWER(item_description) LIKE '%fee%'\n                OR LOWER(item_description) LIKE '%charge%'\n                OR LOWER(item_description) LIKE '%setup%'\n                OR LOWER(item_description) LIKE '%installation%'\n                OR LOWER(item_description) LIKE '%service%'\n                OR LOWER(item_description) LIKE '%support%'\n                OR LOWER(item_description) LIKE '%warranty%'\n                OR LOWER(item_description) LIKE '%insurance%'\n                OR LOWER(item_description) LIKE '%discount%'\n                OR LOWER(item_description) LIKE '%adjustment%'\n                OR LOWER(item_description) LIKE '%credit%'\n            THEN TRUE\n            ELSE FALSE\n        END AS non_product_hint,\n        \n        -- Deterministic line UID (using SHA256 hash)\n        hash(\n            CONCAT(\n                COALESCE(order_id, ''),\n                '|',\n                COALESCE(CAST(line_number AS VARCHAR), ''),\n                '|', \n                COALESCE(sku_id, ''),\n                '|',\n                COALESCE(filename, '')\n            )\n        ) AS line_uid\n        \n    FROM final_text_cleaned\n)\n\nSELECT \n    order_id,\n    line_number,\n    sku_id,\n    item_description_original,\n    item_description_cleaned,\n    quantity,\n    unit_price,\n    currency,\n    vendor_brand,\n    cost_centre_id,\n    country_code,\n    requisitioner,\n    approval_status,\n    delivery_date,\n    order_date,\n    source_filename,\n    created_timestamp,\n    non_product_hint,\n    line_uid\nFROM cleaned_orders", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["line_uid"], "time_spine": null}, "model.orderly.stg_orders_export": {"database": "orderly", "schema": "dev_staging", "name": "stg_orders_export", "resource_type": "model", "package_name": "orderly", "path": "staging\\stg_orders_export.sql", "original_file_path": "models\\staging\\stg_orders_export.sql", "unique_id": "model.orderly.stg_orders_export", "fqn": ["orderly", "staging", "stg_orders_export"], "alias": "stg_orders_export", "checksum": {"name": "sha256", "checksum": "abe3e4f6d146c6bbf33d7e94b7257fe81b17db5228cb21e0b873dc7cf473a05d"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["layer:staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ export_stg_orders() }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "schema": "staging", "tags": ["layer:staging"], "post-hook": "{{ export_stg_orders() }}"}, "created_at": 1754795766.068068, "relation_name": "\"orderly\".\"dev_staging\".\"stg_orders_export\"", "raw_code": "-- Export staging orders data to CSV file (only in dev environment)\r\n-- This model runs after stg_orders is complete\r\n\r\n{% if target.name == 'dev' %}\r\n  {{ config(\r\n      materialized='table',\r\n      post_hook=\"{{ export_stg_orders() }}\"\r\n  ) }}\r\n{% else %}\r\n  {{ config(materialized='table') }}\r\n{% endif %}\r\n\r\nSELECT \r\n  'Staging orders export completed' as status, \r\n  current_timestamp as exported_at,\r\n  '{{ target.name }}' as environment,\r\n  {% if target.name == 'dev' %}\r\n    'CSV file exported to data/intermediate/stg_orders.csv' as export_status\r\n  {% else %}\r\n    'CSV export skipped (not dev environment)' as export_status\r\n  {% endif %}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.export_stg_orders"], "nodes": []}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\stg_orders_export.sql", "compiled": true, "compiled_code": "-- Export staging orders data to CSV file (only in dev environment)\n-- This model runs after stg_orders is complete\n\n\n  \n\n\nSELECT \n  'Staging orders export completed' as status, \n  current_timestamp as exported_at,\n  'dev' as environment,\n  \n    'CSV file exported to data/intermediate/stg_orders.csv' as export_status\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "seed.orderly.ref_sku_names": {"database": "orderly", "schema": "dev_seeds", "name": "ref_sku_names", "resource_type": "seed", "package_name": "orderly", "path": "ref_sku_names.csv", "original_file_path": "seeds\\ref_sku_names.csv", "unique_id": "seed.orderly.ref_sku_names", "fqn": ["orderly", "ref_sku_names"], "alias": "ref_sku_names", "checksum": {"name": "sha256", "checksum": "f021b2beec1f804dc9a8bc8d411dbdfa413c180c670abba3659e13643bb7d803"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#2E8B57"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#2E8B57"}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "seeds", "docs": {"node_color": "#2E8B57"}}, "created_at": 1754795766.140086, "relation_name": "\"orderly\".\"dev_seeds\".\"ref_sku_names\"", "raw_code": "", "doc_blocks": [], "root_path": "dbt", "depends_on": {"macros": []}}, "operation.orderly.orderly-on-run-start-0": {"database": "orderly", "schema": "dev", "name": "orderly-on-run-start-0", "resource_type": "operation", "package_name": "orderly", "path": "hooks\\orderly-on-run-start-0.sql", "original_file_path": ".\\dbt_project.yml", "unique_id": "operation.orderly.orderly-on-run-start-0", "fqn": ["orderly", "hooks", "orderly-on-run-start-0"], "alias": "orderly-on-run-start-0", "checksum": {"name": "sha256", "checksum": "b63a8f05da52d6ec47f08127e7e8b14cedcc9103b97757ee22dd3813b16a6053"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.1912177, "relation_name": null, "raw_code": "CREATE SCHEMA IF NOT EXISTS bronze;", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\orderly\\.\\dbt_project.yml\\hooks\\orderly-on-run-start-0.sql", "compiled": true, "compiled_code": "CREATE SCHEMA IF NOT EXISTS bronze;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "operation.orderly.orderly-on-run-start-1": {"database": "orderly", "schema": "dev", "name": "orderly-on-run-start-1", "resource_type": "operation", "package_name": "orderly", "path": "hooks\\orderly-on-run-start-1.sql", "original_file_path": ".\\dbt_project.yml", "unique_id": "operation.orderly.orderly-on-run-start-1", "fqn": ["orderly", "hooks", "orderly-on-run-start-1"], "alias": "orderly-on-run-start-1", "checksum": {"name": "sha256", "checksum": "b63a8f05da52d6ec47f08127e7e8b14cedcc9103b97757ee22dd3813b16a6053"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.195768, "relation_name": null, "raw_code": "CREATE SCHEMA IF NOT EXISTS silver;", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\orderly\\.\\dbt_project.yml\\hooks\\orderly-on-run-start-1.sql", "compiled": true, "compiled_code": "CREATE SCHEMA IF NOT EXISTS silver;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 1}, "operation.orderly.orderly-on-run-start-2": {"database": "orderly", "schema": "dev", "name": "orderly-on-run-start-2", "resource_type": "operation", "package_name": "orderly", "path": "hooks\\orderly-on-run-start-2.sql", "original_file_path": ".\\dbt_project.yml", "unique_id": "operation.orderly.orderly-on-run-start-2", "fqn": ["orderly", "hooks", "orderly-on-run-start-2"], "alias": "orderly-on-run-start-2", "checksum": {"name": "sha256", "checksum": "b63a8f05da52d6ec47f08127e7e8b14cedcc9103b97757ee22dd3813b16a6053"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.197102, "relation_name": null, "raw_code": "CREATE SCHEMA IF NOT EXISTS gold;", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\orderly\\.\\dbt_project.yml\\hooks\\orderly-on-run-start-2.sql", "compiled": true, "compiled_code": "CREATE SCHEMA IF NOT EXISTS gold;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 2}, "operation.orderly.orderly-on-run-start-3": {"database": "orderly", "schema": "dev", "name": "orderly-on-run-start-3", "resource_type": "operation", "package_name": "orderly", "path": "hooks\\orderly-on-run-start-3.sql", "original_file_path": ".\\dbt_project.yml", "unique_id": "operation.orderly.orderly-on-run-start-3", "fqn": ["orderly", "hooks", "orderly-on-run-start-3"], "alias": "orderly-on-run-start-3", "checksum": {"name": "sha256", "checksum": "b63a8f05da52d6ec47f08127e7e8b14cedcc9103b97757ee22dd3813b16a6053"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.198398, "relation_name": null, "raw_code": "CREATE SCHEMA IF NOT EXISTS staging;", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\orderly\\.\\dbt_project.yml\\hooks\\orderly-on-run-start-3.sql", "compiled": true, "compiled_code": "CREATE SCHEMA IF NOT EXISTS staging;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 3}, "test.orderly.not_null_raw_orders_order_id.e74425a338": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_raw_orders_order_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_raw_orders_order_id.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.not_null_raw_orders_order_id.e74425a338", "fqn": ["orderly", "bronze", "not_null_raw_orders_order_id"], "alias": "not_null_raw_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.278582, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_orders"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\not_null_raw_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"orderly\".\"dev_bronze\".\"raw_orders\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.raw_orders", "attached_node": "model.orderly.raw_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}}, "test.orderly.not_null_raw_orders_order_date.3ab6fcc91f": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_raw_orders_order_date", "resource_type": "test", "package_name": "orderly", "path": "not_null_raw_orders_order_date.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.not_null_raw_orders_order_date.3ab6fcc91f", "fqn": ["orderly", "bronze", "not_null_raw_orders_order_date"], "alias": "not_null_raw_orders_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.2797487, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_orders"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\not_null_raw_orders_order_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom \"orderly\".\"dev_bronze\".\"raw_orders\"\nwhere order_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.raw_orders", "attached_node": "model.orderly.raw_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}}, "test.orderly.assert_rowcount_raw_orders_.08dcc140e0": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "assert_rowcount_raw_orders_", "resource_type": "test", "package_name": "orderly", "path": "assert_rowcount_raw_orders_.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.assert_rowcount_raw_orders_.08dcc140e0", "fqn": ["orderly", "bronze", "assert_rowcount_raw_orders_"], "alias": "assert_rowcount_raw_orders_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.2804801, "relation_name": null, "raw_code": "{{ test_assert_rowcount(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.test_assert_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_orders"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\assert_rowcount_raw_orders_.sql", "compiled": true, "compiled_code": "\n  -- Custom test to ensure table has at least one row\n  -- Fails if rowcount is 0\n  SELECT count(*) as row_count\n  FROM \"orderly\".\"dev_bronze\".\"raw_orders\"\n  HAVING count(*) = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.raw_orders", "attached_node": "model.orderly.raw_orders", "test_metadata": {"name": "assert_rowcount", "kwargs": {"model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}}, "test.orderly.not_null_raw_vendor_master_vendor_id.4fb57d1c2c": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_raw_vendor_master_vendor_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_raw_vendor_master_vendor_id.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.not_null_raw_vendor_master_vendor_id.4fb57d1c2c", "fqn": ["orderly", "bronze", "not_null_raw_vendor_master_vendor_id"], "alias": "not_null_raw_vendor_master_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.2883744, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_vendor_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_vendor_master"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\not_null_raw_vendor_master_vendor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"orderly\".\"dev_bronze\".\"raw_vendor_master\"\nwhere vendor_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_id", "file_key_name": "models.raw_vendor_master", "attached_node": "model.orderly.raw_vendor_master", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('raw_vendor_master')) }}"}, "namespace": null}}, "test.orderly.unique_raw_vendor_master_vendor_id.c9d11def2b": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_raw_vendor_master_vendor_id", "resource_type": "test", "package_name": "orderly", "path": "unique_raw_vendor_master_vendor_id.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.unique_raw_vendor_master_vendor_id.c9d11def2b", "fqn": ["orderly", "bronze", "unique_raw_vendor_master_vendor_id"], "alias": "unique_raw_vendor_master_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.289035, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_vendor_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_vendor_master"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\unique_raw_vendor_master_vendor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_id as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_bronze\".\"raw_vendor_master\"\nwhere vendor_id is not null\ngroup by vendor_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_id", "file_key_name": "models.raw_vendor_master", "attached_node": "model.orderly.raw_vendor_master", "test_metadata": {"name": "unique", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('raw_vendor_master')) }}"}, "namespace": null}}, "test.orderly.not_null_raw_vendor_master_vendor_name.53003e37f2": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_raw_vendor_master_vendor_name", "resource_type": "test", "package_name": "orderly", "path": "not_null_raw_vendor_master_vendor_name.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.not_null_raw_vendor_master_vendor_name.53003e37f2", "fqn": ["orderly", "bronze", "not_null_raw_vendor_master_vendor_name"], "alias": "not_null_raw_vendor_master_vendor_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.2896714, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_vendor_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_vendor_master"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\not_null_raw_vendor_master_vendor_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_name\nfrom \"orderly\".\"dev_bronze\".\"raw_vendor_master\"\nwhere vendor_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_name", "file_key_name": "models.raw_vendor_master", "attached_node": "model.orderly.raw_vendor_master", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_name", "model": "{{ get_where_subquery(ref('raw_vendor_master')) }}"}, "namespace": null}}, "test.orderly.assert_rowcount_raw_vendor_master_.5d7f055440": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "assert_rowcount_raw_vendor_master_", "resource_type": "test", "package_name": "orderly", "path": "assert_rowcount_raw_vendor_master_.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.assert_rowcount_raw_vendor_master_.5d7f055440", "fqn": ["orderly", "bronze", "assert_rowcount_raw_vendor_master_"], "alias": "assert_rowcount_raw_vendor_master_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.2902954, "relation_name": null, "raw_code": "{{ test_assert_rowcount(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_vendor_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.test_assert_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_vendor_master"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\assert_rowcount_raw_vendor_master_.sql", "compiled": true, "compiled_code": "\n  -- Custom test to ensure table has at least one row\n  -- Fails if rowcount is 0\n  SELECT count(*) as row_count\n  FROM \"orderly\".\"dev_bronze\".\"raw_vendor_master\"\n  HAVING count(*) = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.raw_vendor_master", "attached_node": "model.orderly.raw_vendor_master", "test_metadata": {"name": "assert_rowcount", "kwargs": {"model": "{{ get_where_subquery(ref('raw_vendor_master')) }}"}, "namespace": null}}, "test.orderly.not_null_raw_cost_centres_cost_centre_id.8f9d84fd2f": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_raw_cost_centres_cost_centre_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_raw_cost_centres_cost_centre_id.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.not_null_raw_cost_centres_cost_centre_id.8f9d84fd2f", "fqn": ["orderly", "bronze", "not_null_raw_cost_centres_cost_centre_id"], "alias": "not_null_raw_cost_centres_cost_centre_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.2919934, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_cost_centres", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_cost_centres"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\not_null_raw_cost_centres_cost_centre_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_centre_id\nfrom \"orderly\".\"dev_bronze\".\"raw_cost_centres\"\nwhere cost_centre_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_id", "file_key_name": "models.raw_cost_centres", "attached_node": "model.orderly.raw_cost_centres", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_centre_id", "model": "{{ get_where_subquery(ref('raw_cost_centres')) }}"}, "namespace": null}}, "test.orderly.unique_raw_cost_centres_cost_centre_id.69926f60ce": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_raw_cost_centres_cost_centre_id", "resource_type": "test", "package_name": "orderly", "path": "unique_raw_cost_centres_cost_centre_id.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.unique_raw_cost_centres_cost_centre_id.69926f60ce", "fqn": ["orderly", "bronze", "unique_raw_cost_centres_cost_centre_id"], "alias": "unique_raw_cost_centres_cost_centre_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.2926304, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_cost_centres", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_cost_centres"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\unique_raw_cost_centres_cost_centre_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    cost_centre_id as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_bronze\".\"raw_cost_centres\"\nwhere cost_centre_id is not null\ngroup by cost_centre_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_id", "file_key_name": "models.raw_cost_centres", "attached_node": "model.orderly.raw_cost_centres", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cost_centre_id", "model": "{{ get_where_subquery(ref('raw_cost_centres')) }}"}, "namespace": null}}, "test.orderly.not_null_raw_cost_centres_cost_centre_name.6a69a7a5a0": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_raw_cost_centres_cost_centre_name", "resource_type": "test", "package_name": "orderly", "path": "not_null_raw_cost_centres_cost_centre_name.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.not_null_raw_cost_centres_cost_centre_name.6a69a7a5a0", "fqn": ["orderly", "bronze", "not_null_raw_cost_centres_cost_centre_name"], "alias": "not_null_raw_cost_centres_cost_centre_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.2932425, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_cost_centres", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_cost_centres"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\not_null_raw_cost_centres_cost_centre_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_centre_name\nfrom \"orderly\".\"dev_bronze\".\"raw_cost_centres\"\nwhere cost_centre_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_name", "file_key_name": "models.raw_cost_centres", "attached_node": "model.orderly.raw_cost_centres", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_centre_name", "model": "{{ get_where_subquery(ref('raw_cost_centres')) }}"}, "namespace": null}}, "test.orderly.not_null_raw_cost_centres_country_code.fb9d834802": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_raw_cost_centres_country_code", "resource_type": "test", "package_name": "orderly", "path": "not_null_raw_cost_centres_country_code.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.not_null_raw_cost_centres_country_code.fb9d834802", "fqn": ["orderly", "bronze", "not_null_raw_cost_centres_country_code"], "alias": "not_null_raw_cost_centres_country_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.2938392, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_cost_centres", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_cost_centres"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\not_null_raw_cost_centres_country_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_code\nfrom \"orderly\".\"dev_bronze\".\"raw_cost_centres\"\nwhere country_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_code", "file_key_name": "models.raw_cost_centres", "attached_node": "model.orderly.raw_cost_centres", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_code", "model": "{{ get_where_subquery(ref('raw_cost_centres')) }}"}, "namespace": null}}, "test.orderly.assert_rowcount_raw_cost_centres_.fb0877bd01": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "assert_rowcount_raw_cost_centres_", "resource_type": "test", "package_name": "orderly", "path": "assert_rowcount_raw_cost_centres_.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.assert_rowcount_raw_cost_centres_.fb0877bd01", "fqn": ["orderly", "bronze", "assert_rowcount_raw_cost_centres_"], "alias": "assert_rowcount_raw_cost_centres_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.294491, "relation_name": null, "raw_code": "{{ test_assert_rowcount(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_cost_centres", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.test_assert_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_cost_centres"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\assert_rowcount_raw_cost_centres_.sql", "compiled": true, "compiled_code": "\n  -- Custom test to ensure table has at least one row\n  -- Fails if rowcount is 0\n  SELECT count(*) as row_count\n  FROM \"orderly\".\"dev_bronze\".\"raw_cost_centres\"\n  HAVING count(*) = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.raw_cost_centres", "attached_node": "model.orderly.raw_cost_centres", "test_metadata": {"name": "assert_rowcount", "kwargs": {"model": "{{ get_where_subquery(ref('raw_cost_centres')) }}"}, "namespace": null}}, "test.orderly.not_null_raw_exchange_rates_date.91d5cbd900": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_raw_exchange_rates_date", "resource_type": "test", "package_name": "orderly", "path": "not_null_raw_exchange_rates_date.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.not_null_raw_exchange_rates_date.91d5cbd900", "fqn": ["orderly", "bronze", "not_null_raw_exchange_rates_date"], "alias": "not_null_raw_exchange_rates_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.2962008, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\not_null_raw_exchange_rates_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"orderly\".\"dev_bronze\".\"raw_exchange_rates\"\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.raw_exchange_rates", "attached_node": "model.orderly.raw_exchange_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('raw_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.not_null_raw_exchange_rates_from_currency.3a9d1a7064": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_raw_exchange_rates_from_currency", "resource_type": "test", "package_name": "orderly", "path": "not_null_raw_exchange_rates_from_currency.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.not_null_raw_exchange_rates_from_currency.3a9d1a7064", "fqn": ["orderly", "bronze", "not_null_raw_exchange_rates_from_currency"], "alias": "not_null_raw_exchange_rates_from_currency", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.2970195, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\not_null_raw_exchange_rates_from_currency.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect from_currency\nfrom \"orderly\".\"dev_bronze\".\"raw_exchange_rates\"\nwhere from_currency is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "from_currency", "file_key_name": "models.raw_exchange_rates", "attached_node": "model.orderly.raw_exchange_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_currency", "model": "{{ get_where_subquery(ref('raw_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.not_null_raw_exchange_rates_to_currency.06af868b77": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_raw_exchange_rates_to_currency", "resource_type": "test", "package_name": "orderly", "path": "not_null_raw_exchange_rates_to_currency.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.not_null_raw_exchange_rates_to_currency.06af868b77", "fqn": ["orderly", "bronze", "not_null_raw_exchange_rates_to_currency"], "alias": "not_null_raw_exchange_rates_to_currency", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.2976477, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\not_null_raw_exchange_rates_to_currency.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect to_currency\nfrom \"orderly\".\"dev_bronze\".\"raw_exchange_rates\"\nwhere to_currency is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "to_currency", "file_key_name": "models.raw_exchange_rates", "attached_node": "model.orderly.raw_exchange_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_currency", "model": "{{ get_where_subquery(ref('raw_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.not_null_raw_exchange_rates_exchange_rate.7034e7e9c9": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_raw_exchange_rates_exchange_rate", "resource_type": "test", "package_name": "orderly", "path": "not_null_raw_exchange_rates_exchange_rate.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.not_null_raw_exchange_rates_exchange_rate.7034e7e9c9", "fqn": ["orderly", "bronze", "not_null_raw_exchange_rates_exchange_rate"], "alias": "not_null_raw_exchange_rates_exchange_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.2982523, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\not_null_raw_exchange_rates_exchange_rate.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect exchange_rate\nfrom \"orderly\".\"dev_bronze\".\"raw_exchange_rates\"\nwhere exchange_rate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exchange_rate", "file_key_name": "models.raw_exchange_rates", "attached_node": "model.orderly.raw_exchange_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "exchange_rate", "model": "{{ get_where_subquery(ref('raw_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.assert_rowcount_raw_exchange_rates_.2773ebf085": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "assert_rowcount_raw_exchange_rates_", "resource_type": "test", "package_name": "orderly", "path": "assert_rowcount_raw_exchange_rates_.sql", "original_file_path": "models\\bronze\\schema.yml", "unique_id": "test.orderly.assert_rowcount_raw_exchange_rates_.2773ebf085", "fqn": ["orderly", "bronze", "assert_rowcount_raw_exchange_rates_"], "alias": "assert_rowcount_raw_exchange_rates_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.2988582, "relation_name": null, "raw_code": "{{ test_assert_rowcount(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "raw_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.test_assert_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.raw_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\bronze\\schema.yml\\assert_rowcount_raw_exchange_rates_.sql", "compiled": true, "compiled_code": "\n  -- Custom test to ensure table has at least one row\n  -- Fails if rowcount is 0\n  SELECT count(*) as row_count\n  FROM \"orderly\".\"dev_bronze\".\"raw_exchange_rates\"\n  HAVING count(*) = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.raw_exchange_rates", "attached_node": "model.orderly.raw_exchange_rates", "test_metadata": {"name": "assert_rowcount", "kwargs": {"model": "{{ get_where_subquery(ref('raw_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.unique_dim_date_date_key.0869fd48f9": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_dim_date_date_key", "resource_type": "test", "package_name": "orderly", "path": "unique_dim_date_date_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.unique_dim_date_date_key.0869fd48f9", "fqn": ["orderly", "gold", "unique_dim_date_date_key"], "alias": "unique_dim_date_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3090954, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_date"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\unique_dim_date_date_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date_key as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_gold\".\"dim_date\"\nwhere date_key is not null\ngroup by date_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_key", "file_key_name": "models.dim_date", "attached_node": "model.orderly.dim_date", "test_metadata": {"name": "unique", "kwargs": {"column_name": "date_key", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}}, "test.orderly.not_null_dim_date_date_key.881d0a31b6": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_dim_date_date_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_dim_date_date_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_dim_date_date_key.881d0a31b6", "fqn": ["orderly", "gold", "not_null_dim_date_date_key"], "alias": "not_null_dim_date_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3097472, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_date"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_dim_date_date_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_key\nfrom \"orderly\".\"dev_gold\".\"dim_date\"\nwhere date_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_key", "file_key_name": "models.dim_date", "attached_node": "model.orderly.dim_date", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_key", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}}, "test.orderly.not_null_dim_date_date_actual.85284edc63": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_dim_date_date_actual", "resource_type": "test", "package_name": "orderly", "path": "not_null_dim_date_date_actual.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_dim_date_date_actual.85284edc63", "fqn": ["orderly", "gold", "not_null_dim_date_date_actual"], "alias": "not_null_dim_date_date_actual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3103943, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_date"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_dim_date_date_actual.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_actual\nfrom \"orderly\".\"dev_gold\".\"dim_date\"\nwhere date_actual is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_actual", "file_key_name": "models.dim_date", "attached_node": "model.orderly.dim_date", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_actual", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}}, "test.orderly.unique_dim_cost_centre_cost_centre_key.14609e741e": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_dim_cost_centre_cost_centre_key", "resource_type": "test", "package_name": "orderly", "path": "unique_dim_cost_centre_cost_centre_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.unique_dim_cost_centre_cost_centre_key.14609e741e", "fqn": ["orderly", "gold", "unique_dim_cost_centre_cost_centre_key"], "alias": "unique_dim_cost_centre_cost_centre_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.311009, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_cost_centre", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_cost_centre"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\unique_dim_cost_centre_cost_centre_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    cost_centre_key as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_gold\".\"dim_cost_centre\"\nwhere cost_centre_key is not null\ngroup by cost_centre_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_key", "file_key_name": "models.dim_cost_centre", "attached_node": "model.orderly.dim_cost_centre", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cost_centre_key", "model": "{{ get_where_subquery(ref('dim_cost_centre')) }}"}, "namespace": null}}, "test.orderly.not_null_dim_cost_centre_cost_centre_key.27832503c9": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_dim_cost_centre_cost_centre_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_dim_cost_centre_cost_centre_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_dim_cost_centre_cost_centre_key.27832503c9", "fqn": ["orderly", "gold", "not_null_dim_cost_centre_cost_centre_key"], "alias": "not_null_dim_cost_centre_cost_centre_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3116145, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_cost_centre", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_cost_centre"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_dim_cost_centre_cost_centre_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_centre_key\nfrom \"orderly\".\"dev_gold\".\"dim_cost_centre\"\nwhere cost_centre_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_key", "file_key_name": "models.dim_cost_centre", "attached_node": "model.orderly.dim_cost_centre", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_centre_key", "model": "{{ get_where_subquery(ref('dim_cost_centre')) }}"}, "namespace": null}}, "test.orderly.unique_dim_cost_centre_cost_centre_id.1c685a260f": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_dim_cost_centre_cost_centre_id", "resource_type": "test", "package_name": "orderly", "path": "unique_dim_cost_centre_cost_centre_id.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.unique_dim_cost_centre_cost_centre_id.1c685a260f", "fqn": ["orderly", "gold", "unique_dim_cost_centre_cost_centre_id"], "alias": "unique_dim_cost_centre_cost_centre_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3122163, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_cost_centre", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_cost_centre"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\unique_dim_cost_centre_cost_centre_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    cost_centre_id as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_gold\".\"dim_cost_centre\"\nwhere cost_centre_id is not null\ngroup by cost_centre_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_id", "file_key_name": "models.dim_cost_centre", "attached_node": "model.orderly.dim_cost_centre", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cost_centre_id", "model": "{{ get_where_subquery(ref('dim_cost_centre')) }}"}, "namespace": null}}, "test.orderly.not_null_dim_cost_centre_cost_centre_id.574b1e76a3": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_dim_cost_centre_cost_centre_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_dim_cost_centre_cost_centre_id.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_dim_cost_centre_cost_centre_id.574b1e76a3", "fqn": ["orderly", "gold", "not_null_dim_cost_centre_cost_centre_id"], "alias": "not_null_dim_cost_centre_cost_centre_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3128235, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_cost_centre", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_cost_centre"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_dim_cost_centre_cost_centre_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_centre_id\nfrom \"orderly\".\"dev_gold\".\"dim_cost_centre\"\nwhere cost_centre_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_id", "file_key_name": "models.dim_cost_centre", "attached_node": "model.orderly.dim_cost_centre", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_centre_id", "model": "{{ get_where_subquery(ref('dim_cost_centre')) }}"}, "namespace": null}}, "test.orderly.unique_dim_vendor_vendor_key.3de6f52c68": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_dim_vendor_vendor_key", "resource_type": "test", "package_name": "orderly", "path": "unique_dim_vendor_vendor_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.unique_dim_vendor_vendor_key.3de6f52c68", "fqn": ["orderly", "gold", "unique_dim_vendor_vendor_key"], "alias": "unique_dim_vendor_vendor_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3135688, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_vendor", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_vendor"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\unique_dim_vendor_vendor_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_key as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_gold\".\"dim_vendor\"\nwhere vendor_key is not null\ngroup by vendor_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_key", "file_key_name": "models.dim_vendor", "attached_node": "model.orderly.dim_vendor", "test_metadata": {"name": "unique", "kwargs": {"column_name": "vendor_key", "model": "{{ get_where_subquery(ref('dim_vendor')) }}"}, "namespace": null}}, "test.orderly.not_null_dim_vendor_vendor_key.385212c4ba": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_dim_vendor_vendor_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_dim_vendor_vendor_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_dim_vendor_vendor_key.385212c4ba", "fqn": ["orderly", "gold", "not_null_dim_vendor_vendor_key"], "alias": "not_null_dim_vendor_vendor_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3141873, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_vendor", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_vendor"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_dim_vendor_vendor_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_key\nfrom \"orderly\".\"dev_gold\".\"dim_vendor\"\nwhere vendor_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_key", "file_key_name": "models.dim_vendor", "attached_node": "model.orderly.dim_vendor", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_key", "model": "{{ get_where_subquery(ref('dim_vendor')) }}"}, "namespace": null}}, "test.orderly.unique_dim_vendor_vendor_id.849a2be65e": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_dim_vendor_vendor_id", "resource_type": "test", "package_name": "orderly", "path": "unique_dim_vendor_vendor_id.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.unique_dim_vendor_vendor_id.849a2be65e", "fqn": ["orderly", "gold", "unique_dim_vendor_vendor_id"], "alias": "unique_dim_vendor_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3147917, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_vendor", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_vendor"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\unique_dim_vendor_vendor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_id as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_gold\".\"dim_vendor\"\nwhere vendor_id is not null\ngroup by vendor_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_id", "file_key_name": "models.dim_vendor", "attached_node": "model.orderly.dim_vendor", "test_metadata": {"name": "unique", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('dim_vendor')) }}"}, "namespace": null}}, "test.orderly.not_null_dim_vendor_vendor_id.79e84c8282": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_dim_vendor_vendor_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_dim_vendor_vendor_id.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_dim_vendor_vendor_id.79e84c8282", "fqn": ["orderly", "gold", "not_null_dim_vendor_vendor_id"], "alias": "not_null_dim_vendor_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3153872, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_vendor", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_vendor"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_dim_vendor_vendor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"orderly\".\"dev_gold\".\"dim_vendor\"\nwhere vendor_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_id", "file_key_name": "models.dim_vendor", "attached_node": "model.orderly.dim_vendor", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('dim_vendor')) }}"}, "namespace": null}}, "test.orderly.unique_dim_product_product_key.1753236bd0": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_dim_product_product_key", "resource_type": "test", "package_name": "orderly", "path": "unique_dim_product_product_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.unique_dim_product_product_key.1753236bd0", "fqn": ["orderly", "gold", "unique_dim_product_product_key"], "alias": "unique_dim_product_product_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3159838, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_product"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\unique_dim_product_product_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_key as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_gold\".\"dim_product\"\nwhere product_key is not null\ngroup by product_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.dim_product", "attached_node": "model.orderly.dim_product", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_key", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}}, "test.orderly.not_null_dim_product_product_key.f0e1d838d3": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_dim_product_product_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_dim_product_product_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_dim_product_product_key.f0e1d838d3", "fqn": ["orderly", "gold", "not_null_dim_product_product_key"], "alias": "not_null_dim_product_product_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3165784, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_product"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_dim_product_product_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_key\nfrom \"orderly\".\"dev_gold\".\"dim_product\"\nwhere product_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.dim_product", "attached_node": "model.orderly.dim_product", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_key", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}}, "test.orderly.unique_dim_product_sku_id.cf0a3fd846": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_dim_product_sku_id", "resource_type": "test", "package_name": "orderly", "path": "unique_dim_product_sku_id.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.unique_dim_product_sku_id.cf0a3fd846", "fqn": ["orderly", "gold", "unique_dim_product_sku_id"], "alias": "unique_dim_product_sku_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.317185, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_product"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\unique_dim_product_sku_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sku_id as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_gold\".\"dim_product\"\nwhere sku_id is not null\ngroup by sku_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sku_id", "file_key_name": "models.dim_product", "attached_node": "model.orderly.dim_product", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sku_id", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}}, "test.orderly.not_null_dim_product_sku_id.f725edd0d7": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_dim_product_sku_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_dim_product_sku_id.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_dim_product_sku_id.f725edd0d7", "fqn": ["orderly", "gold", "not_null_dim_product_sku_id"], "alias": "not_null_dim_product_sku_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.317778, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_product"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_dim_product_sku_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sku_id\nfrom \"orderly\".\"dev_gold\".\"dim_product\"\nwhere sku_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sku_id", "file_key_name": "models.dim_product", "attached_node": "model.orderly.dim_product", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sku_id", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}}, "test.orderly.unique_fct_order_line_order_line_key.8148914a14": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_fct_order_line_order_line_key", "resource_type": "test", "package_name": "orderly", "path": "unique_fct_order_line_order_line_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.unique_fct_order_line_order_line_key.8148914a14", "fqn": ["orderly", "gold", "unique_fct_order_line_order_line_key"], "alias": "unique_fct_order_line_order_line_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.318377, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\unique_fct_order_line_order_line_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_line_key as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_gold\".\"fct_order_line\"\nwhere order_line_key is not null\ngroup by order_line_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_line_key", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_line_key", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_order_line_order_line_key.f742e418df": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_order_line_order_line_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_order_line_order_line_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_order_line_order_line_key.f742e418df", "fqn": ["orderly", "gold", "not_null_fct_order_line_order_line_key"], "alias": "not_null_fct_order_line_order_line_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3189678, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_order_line_order_line_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_line_key\nfrom \"orderly\".\"dev_gold\".\"fct_order_line\"\nwhere order_line_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_line_key", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_line_key", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_order_line_date_key.e91f7aa57e": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_order_line_date_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_order_line_date_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_order_line_date_key.e91f7aa57e", "fqn": ["orderly", "gold", "not_null_fct_order_line_date_key"], "alias": "not_null_fct_order_line_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.319555, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_order_line_date_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_key\nfrom \"orderly\".\"dev_gold\".\"fct_order_line\"\nwhere date_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_key", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_key", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.relationships_fct_order_line_date_key__date_key__ref_dim_date_.ae3d7a81c1": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_fct_order_line_date_key__date_key__ref_dim_date_", "resource_type": "test", "package_name": "orderly", "path": "relationships_fct_order_line_date_key__date_key__ref_dim_date_.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.relationships_fct_order_line_date_key__date_key__ref_dim_date_.ae3d7a81c1", "fqn": ["orderly", "gold", "relationships_fct_order_line_date_key__date_key__ref_dim_date_"], "alias": "relationships_fct_order_line_date_key__date_key__ref_dim_date_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.320152, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}, {"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_date", "model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\relationships_fct_order_line_date_key__date_key__ref_dim_date_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select date_key as from_field\n    from \"orderly\".\"dev_gold\".\"fct_order_line\"\n    where date_key is not null\n),\n\nparent as (\n    select date_key as to_field\n    from \"orderly\".\"dev_gold\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_key", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_date')", "field": "date_key", "column_name": "date_key", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.relationships_fct_order_line_delivery_date_key__date_key__ref_dim_date_.a2d9c7cd0b": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_fct_order_line_delivery_date_key__date_key__ref_dim_date_", "resource_type": "test", "package_name": "orderly", "path": "relationships_fct_order_line_63103b9e702fb694d8f317666f8763c9.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.relationships_fct_order_line_delivery_date_key__date_key__ref_dim_date_.a2d9c7cd0b", "fqn": ["orderly", "gold", "relationships_fct_order_line_delivery_date_key__date_key__ref_dim_date_"], "alias": "relationships_fct_order_line_63103b9e702fb694d8f317666f8763c9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_order_line_63103b9e702fb694d8f317666f8763c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_order_line_63103b9e702fb694d8f317666f8763c9"}, "created_at": 1754795766.3236873, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_order_line_63103b9e702fb694d8f317666f8763c9\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}, {"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_date", "model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\relationships_fct_order_line_63103b9e702fb694d8f317666f8763c9.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select delivery_date_key as from_field\n    from \"orderly\".\"dev_gold\".\"fct_order_line\"\n    where delivery_date_key is not null\n),\n\nparent as (\n    select date_key as to_field\n    from \"orderly\".\"dev_gold\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "delivery_date_key", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_date')", "field": "date_key", "column_name": "delivery_date_key", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_order_line_cost_centre_key.c9f98ec08f": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_order_line_cost_centre_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_order_line_cost_centre_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_order_line_cost_centre_key.c9f98ec08f", "fqn": ["orderly", "gold", "not_null_fct_order_line_cost_centre_key"], "alias": "not_null_fct_order_line_cost_centre_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3257778, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_order_line_cost_centre_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_centre_key\nfrom \"orderly\".\"dev_gold\".\"fct_order_line\"\nwhere cost_centre_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_key", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_centre_key", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.relationships_fct_order_line_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.d98e8146ea": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_fct_order_line_cost_centre_key__cost_centre_key__ref_dim_cost_centre_", "resource_type": "test", "package_name": "orderly", "path": "relationships_fct_order_line_15de05523320ac60761e4034356d6bc2.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.relationships_fct_order_line_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.d98e8146ea", "fqn": ["orderly", "gold", "relationships_fct_order_line_cost_centre_key__cost_centre_key__ref_dim_cost_centre_"], "alias": "relationships_fct_order_line_15de05523320ac60761e4034356d6bc2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_order_line_15de05523320ac60761e4034356d6bc2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_order_line_15de05523320ac60761e4034356d6bc2"}, "created_at": 1754795766.3264265, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_order_line_15de05523320ac60761e4034356d6bc2\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_cost_centre", "package": null, "version": null}, {"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_cost_centre", "model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\relationships_fct_order_line_15de05523320ac60761e4034356d6bc2.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select cost_centre_key as from_field\n    from \"orderly\".\"dev_gold\".\"fct_order_line\"\n    where cost_centre_key is not null\n),\n\nparent as (\n    select cost_centre_key as to_field\n    from \"orderly\".\"dev_gold\".\"dim_cost_centre\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_key", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_cost_centre')", "field": "cost_centre_key", "column_name": "cost_centre_key", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_order_line_vendor_key.b752e17bde": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_order_line_vendor_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_order_line_vendor_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_order_line_vendor_key.b752e17bde", "fqn": ["orderly", "gold", "not_null_fct_order_line_vendor_key"], "alias": "not_null_fct_order_line_vendor_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3284805, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_order_line_vendor_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_key\nfrom \"orderly\".\"dev_gold\".\"fct_order_line\"\nwhere vendor_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_key", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_key", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.relationships_fct_order_line_vendor_key__vendor_key__ref_dim_vendor_.a18369f0fd": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_fct_order_line_vendor_key__vendor_key__ref_dim_vendor_", "resource_type": "test", "package_name": "orderly", "path": "relationships_fct_order_line_1fc8c529582681507d0c3eb367bef791.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.relationships_fct_order_line_vendor_key__vendor_key__ref_dim_vendor_.a18369f0fd", "fqn": ["orderly", "gold", "relationships_fct_order_line_vendor_key__vendor_key__ref_dim_vendor_"], "alias": "relationships_fct_order_line_1fc8c529582681507d0c3eb367bef791", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_order_line_1fc8c529582681507d0c3eb367bef791", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_order_line_1fc8c529582681507d0c3eb367bef791"}, "created_at": 1754795766.32913, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_order_line_1fc8c529582681507d0c3eb367bef791\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_vendor", "package": null, "version": null}, {"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_vendor", "model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\relationships_fct_order_line_1fc8c529582681507d0c3eb367bef791.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select vendor_key as from_field\n    from \"orderly\".\"dev_gold\".\"fct_order_line\"\n    where vendor_key is not null\n),\n\nparent as (\n    select vendor_key as to_field\n    from \"orderly\".\"dev_gold\".\"dim_vendor\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_key", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_vendor')", "field": "vendor_key", "column_name": "vendor_key", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_order_line_product_key.6be51edf29": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_order_line_product_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_order_line_product_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_order_line_product_key.6be51edf29", "fqn": ["orderly", "gold", "not_null_fct_order_line_product_key"], "alias": "not_null_fct_order_line_product_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3311865, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_order_line_product_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_key\nfrom \"orderly\".\"dev_gold\".\"fct_order_line\"\nwhere product_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_key", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.relationships_fct_order_line_product_key__product_key__ref_dim_product_.4b1fa1ca5a": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_fct_order_line_product_key__product_key__ref_dim_product_", "resource_type": "test", "package_name": "orderly", "path": "relationships_fct_order_line_aae68c1238d14d8681d73b22e3de9625.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.relationships_fct_order_line_product_key__product_key__ref_dim_product_.4b1fa1ca5a", "fqn": ["orderly", "gold", "relationships_fct_order_line_product_key__product_key__ref_dim_product_"], "alias": "relationships_fct_order_line_aae68c1238d14d8681d73b22e3de9625", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_order_line_aae68c1238d14d8681d73b22e3de9625", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_order_line_aae68c1238d14d8681d73b22e3de9625"}, "created_at": 1754795766.3320372, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_order_line_aae68c1238d14d8681d73b22e3de9625\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}, {"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_product", "model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\relationships_fct_order_line_aae68c1238d14d8681d73b22e3de9625.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_key as from_field\n    from \"orderly\".\"dev_gold\".\"fct_order_line\"\n    where product_key is not null\n),\n\nparent as (\n    select product_key as to_field\n    from \"orderly\".\"dev_gold\".\"dim_product\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_product')", "field": "product_key", "column_name": "product_key", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_order_line_currency_key.a6945afed1": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_order_line_currency_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_order_line_currency_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_order_line_currency_key.a6945afed1", "fqn": ["orderly", "gold", "not_null_fct_order_line_currency_key"], "alias": "not_null_fct_order_line_currency_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3340821, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_order_line_currency_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_key\nfrom \"orderly\".\"dev_gold\".\"fct_order_line\"\nwhere currency_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "currency_key", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_key", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_order_line_quantity.7fe09de398": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_order_line_quantity", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_order_line_quantity.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_order_line_quantity.7fe09de398", "fqn": ["orderly", "gold", "not_null_fct_order_line_quantity"], "alias": "not_null_fct_order_line_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.334706, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_order_line_quantity.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quantity\nfrom \"orderly\".\"dev_gold\".\"fct_order_line\"\nwhere quantity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "quantity", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantity", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_order_line_unit_price.bfa976e64f": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_order_line_unit_price", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_order_line_unit_price.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_order_line_unit_price.bfa976e64f", "fqn": ["orderly", "gold", "not_null_fct_order_line_unit_price"], "alias": "not_null_fct_order_line_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3353126, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_order_line_unit_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unit_price\nfrom \"orderly\".\"dev_gold\".\"fct_order_line\"\nwhere unit_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unit_price", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "unit_price", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_order_line_line_total_amount.17988db3ee": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_order_line_line_total_amount", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_order_line_line_total_amount.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_order_line_line_total_amount.17988db3ee", "fqn": ["orderly", "gold", "not_null_fct_order_line_line_total_amount"], "alias": "not_null_fct_order_line_line_total_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3359177, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_order_line_line_total_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_total_amount\nfrom \"orderly\".\"dev_gold\".\"fct_order_line\"\nwhere line_total_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_total_amount", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_total_amount", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_order_line_order_id.445981c495": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_order_line_order_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_order_line_order_id.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_order_line_order_id.445981c495", "fqn": ["orderly", "gold", "not_null_fct_order_line_order_id"], "alias": "not_null_fct_order_line_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3365285, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_order_line_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"orderly\".\"dev_gold\".\"fct_order_line\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_order_line_line_number.56dfeffb5b": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_order_line_line_number", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_order_line_line_number.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_order_line_line_number.56dfeffb5b", "fqn": ["orderly", "gold", "not_null_fct_order_line_line_number"], "alias": "not_null_fct_order_line_line_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3371356, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_order_line"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_order_line_line_number.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_number\nfrom \"orderly\".\"dev_gold\".\"fct_order_line\"\nwhere line_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_number", "file_key_name": "models.fct_order_line", "attached_node": "model.orderly.fct_order_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_number", "model": "{{ get_where_subquery(ref('fct_order_line')) }}"}, "namespace": null}}, "test.orderly.unique_fct_data_quality_data_quality_key.313a3c0bef": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_fct_data_quality_data_quality_key", "resource_type": "test", "package_name": "orderly", "path": "unique_fct_data_quality_data_quality_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.unique_fct_data_quality_data_quality_key.313a3c0bef", "fqn": ["orderly", "gold", "unique_fct_data_quality_data_quality_key"], "alias": "unique_fct_data_quality_data_quality_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3377373, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_data_quality", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_data_quality"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\unique_fct_data_quality_data_quality_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    data_quality_key as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_gold\".\"fct_data_quality\"\nwhere data_quality_key is not null\ngroup by data_quality_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "data_quality_key", "file_key_name": "models.fct_data_quality", "attached_node": "model.orderly.fct_data_quality", "test_metadata": {"name": "unique", "kwargs": {"column_name": "data_quality_key", "model": "{{ get_where_subquery(ref('fct_data_quality')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_data_quality_data_quality_key.3750a32bd1": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_data_quality_data_quality_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_data_quality_data_quality_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_data_quality_data_quality_key.3750a32bd1", "fqn": ["orderly", "gold", "not_null_fct_data_quality_data_quality_key"], "alias": "not_null_fct_data_quality_data_quality_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3383317, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_data_quality", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_data_quality"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_data_quality_data_quality_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data_quality_key\nfrom \"orderly\".\"dev_gold\".\"fct_data_quality\"\nwhere data_quality_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "data_quality_key", "file_key_name": "models.fct_data_quality", "attached_node": "model.orderly.fct_data_quality", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "data_quality_key", "model": "{{ get_where_subquery(ref('fct_data_quality')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_data_quality_date_key.62ef09eb7e": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_data_quality_date_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_data_quality_date_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_data_quality_date_key.62ef09eb7e", "fqn": ["orderly", "gold", "not_null_fct_data_quality_date_key"], "alias": "not_null_fct_data_quality_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.338924, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_data_quality", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_data_quality"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_data_quality_date_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_key\nfrom \"orderly\".\"dev_gold\".\"fct_data_quality\"\nwhere date_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_key", "file_key_name": "models.fct_data_quality", "attached_node": "model.orderly.fct_data_quality", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_key", "model": "{{ get_where_subquery(ref('fct_data_quality')) }}"}, "namespace": null}}, "test.orderly.relationships_fct_data_quality_date_key__date_key__ref_dim_date_.33803ea8c5": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_fct_data_quality_date_key__date_key__ref_dim_date_", "resource_type": "test", "package_name": "orderly", "path": "relationships_fct_data_quality_7a0879c4e97a76695fbf1a4f4d708b8b.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.relationships_fct_data_quality_date_key__date_key__ref_dim_date_.33803ea8c5", "fqn": ["orderly", "gold", "relationships_fct_data_quality_date_key__date_key__ref_dim_date_"], "alias": "relationships_fct_data_quality_7a0879c4e97a76695fbf1a4f4d708b8b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_data_quality_7a0879c4e97a76695fbf1a4f4d708b8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_data_quality_7a0879c4e97a76695fbf1a4f4d708b8b"}, "created_at": 1754795766.3395357, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_data_quality_7a0879c4e97a76695fbf1a4f4d708b8b\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}, {"name": "fct_data_quality", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_date", "model.orderly.fct_data_quality"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\relationships_fct_data_quality_7a0879c4e97a76695fbf1a4f4d708b8b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select date_key as from_field\n    from \"orderly\".\"dev_gold\".\"fct_data_quality\"\n    where date_key is not null\n),\n\nparent as (\n    select date_key as to_field\n    from \"orderly\".\"dev_gold\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_key", "file_key_name": "models.fct_data_quality", "attached_node": "model.orderly.fct_data_quality", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_date')", "field": "date_key", "column_name": "date_key", "model": "{{ get_where_subquery(ref('fct_data_quality')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_data_quality_cost_centre_key.e37fb6a9b5": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_data_quality_cost_centre_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_data_quality_cost_centre_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_data_quality_cost_centre_key.e37fb6a9b5", "fqn": ["orderly", "gold", "not_null_fct_data_quality_cost_centre_key"], "alias": "not_null_fct_data_quality_cost_centre_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3417842, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_data_quality", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_data_quality"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_data_quality_cost_centre_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_centre_key\nfrom \"orderly\".\"dev_gold\".\"fct_data_quality\"\nwhere cost_centre_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_key", "file_key_name": "models.fct_data_quality", "attached_node": "model.orderly.fct_data_quality", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_centre_key", "model": "{{ get_where_subquery(ref('fct_data_quality')) }}"}, "namespace": null}}, "test.orderly.relationships_fct_data_quality_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.3daf380639": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_fct_data_quality_cost_centre_key__cost_centre_key__ref_dim_cost_centre_", "resource_type": "test", "package_name": "orderly", "path": "relationships_fct_data_quality_1cc6ca496fb96dcc34090d8e1b642a41.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.relationships_fct_data_quality_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.3daf380639", "fqn": ["orderly", "gold", "relationships_fct_data_quality_cost_centre_key__cost_centre_key__ref_dim_cost_centre_"], "alias": "relationships_fct_data_quality_1cc6ca496fb96dcc34090d8e1b642a41", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_data_quality_1cc6ca496fb96dcc34090d8e1b642a41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_data_quality_1cc6ca496fb96dcc34090d8e1b642a41"}, "created_at": 1754795766.3424203, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_data_quality_1cc6ca496fb96dcc34090d8e1b642a41\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_cost_centre", "package": null, "version": null}, {"name": "fct_data_quality", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_cost_centre", "model.orderly.fct_data_quality"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\relationships_fct_data_quality_1cc6ca496fb96dcc34090d8e1b642a41.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select cost_centre_key as from_field\n    from \"orderly\".\"dev_gold\".\"fct_data_quality\"\n    where cost_centre_key is not null\n),\n\nparent as (\n    select cost_centre_key as to_field\n    from \"orderly\".\"dev_gold\".\"dim_cost_centre\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_key", "file_key_name": "models.fct_data_quality", "attached_node": "model.orderly.fct_data_quality", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_cost_centre')", "field": "cost_centre_key", "column_name": "cost_centre_key", "model": "{{ get_where_subquery(ref('fct_data_quality')) }}"}, "namespace": null}}, "test.orderly.relationships_fct_data_quality_vendor_key__vendor_key__ref_dim_vendor_.4eeddf7bad": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_fct_data_quality_vendor_key__vendor_key__ref_dim_vendor_", "resource_type": "test", "package_name": "orderly", "path": "relationships_fct_data_quality_15bce1ab25bcd724d685ec2bf9cea997.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.relationships_fct_data_quality_vendor_key__vendor_key__ref_dim_vendor_.4eeddf7bad", "fqn": ["orderly", "gold", "relationships_fct_data_quality_vendor_key__vendor_key__ref_dim_vendor_"], "alias": "relationships_fct_data_quality_15bce1ab25bcd724d685ec2bf9cea997", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_data_quality_15bce1ab25bcd724d685ec2bf9cea997", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_data_quality_15bce1ab25bcd724d685ec2bf9cea997"}, "created_at": 1754795766.344494, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_data_quality_15bce1ab25bcd724d685ec2bf9cea997\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_vendor", "package": null, "version": null}, {"name": "fct_data_quality", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_vendor", "model.orderly.fct_data_quality"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\relationships_fct_data_quality_15bce1ab25bcd724d685ec2bf9cea997.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select vendor_key as from_field\n    from \"orderly\".\"dev_gold\".\"fct_data_quality\"\n    where vendor_key is not null\n),\n\nparent as (\n    select vendor_key as to_field\n    from \"orderly\".\"dev_gold\".\"dim_vendor\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_key", "file_key_name": "models.fct_data_quality", "attached_node": "model.orderly.fct_data_quality", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_vendor')", "field": "vendor_key", "column_name": "vendor_key", "model": "{{ get_where_subquery(ref('fct_data_quality')) }}"}, "namespace": null}}, "test.orderly.relationships_fct_data_quality_product_key__product_key__ref_dim_product_.cfd4cd42e3": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_fct_data_quality_product_key__product_key__ref_dim_product_", "resource_type": "test", "package_name": "orderly", "path": "relationships_fct_data_quality_78d8d0a56e7949081d9accbf6941dde1.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.relationships_fct_data_quality_product_key__product_key__ref_dim_product_.cfd4cd42e3", "fqn": ["orderly", "gold", "relationships_fct_data_quality_product_key__product_key__ref_dim_product_"], "alias": "relationships_fct_data_quality_78d8d0a56e7949081d9accbf6941dde1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_data_quality_78d8d0a56e7949081d9accbf6941dde1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_data_quality_78d8d0a56e7949081d9accbf6941dde1"}, "created_at": 1754795766.3465474, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_data_quality_78d8d0a56e7949081d9accbf6941dde1\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}, {"name": "fct_data_quality", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_product", "model.orderly.fct_data_quality"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\relationships_fct_data_quality_78d8d0a56e7949081d9accbf6941dde1.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_key as from_field\n    from \"orderly\".\"dev_gold\".\"fct_data_quality\"\n    where product_key is not null\n),\n\nparent as (\n    select product_key as to_field\n    from \"orderly\".\"dev_gold\".\"dim_product\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.fct_data_quality", "attached_node": "model.orderly.fct_data_quality", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_product')", "field": "product_key", "column_name": "product_key", "model": "{{ get_where_subquery(ref('fct_data_quality')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_data_quality_exception_count.19cc9f5aa4": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_data_quality_exception_count", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_data_quality_exception_count.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_data_quality_exception_count.19cc9f5aa4", "fqn": ["orderly", "gold", "not_null_fct_data_quality_exception_count"], "alias": "not_null_fct_data_quality_exception_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3485773, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_data_quality", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_data_quality"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_data_quality_exception_count.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect exception_count\nfrom \"orderly\".\"dev_gold\".\"fct_data_quality\"\nwhere exception_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exception_count", "file_key_name": "models.fct_data_quality", "attached_node": "model.orderly.fct_data_quality", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "exception_count", "model": "{{ get_where_subquery(ref('fct_data_quality')) }}"}, "namespace": null}}, "test.orderly.accepted_values_fct_data_quality_exception_count__1.33de0bdd0e": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "accepted_values_fct_data_quality_exception_count__1", "resource_type": "test", "package_name": "orderly", "path": "accepted_values_fct_data_quality_exception_count__1.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.accepted_values_fct_data_quality_exception_count__1.33de0bdd0e", "fqn": ["orderly", "gold", "accepted_values_fct_data_quality_exception_count__1"], "alias": "accepted_values_fct_data_quality_exception_count__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3494349, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_data_quality", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_data_quality"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\accepted_values_fct_data_quality_exception_count__1.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        exception_count as value_field,\n        count(*) as n_records\n\n    from \"orderly\".\"dev_gold\".\"fct_data_quality\"\n    group by exception_count\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exception_count", "file_key_name": "models.fct_data_quality", "attached_node": "model.orderly.fct_data_quality", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [1], "column_name": "exception_count", "model": "{{ get_where_subquery(ref('fct_data_quality')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_data_quality_exception_type.b0a64c5fd4": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_data_quality_exception_type", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_data_quality_exception_type.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_data_quality_exception_type.b0a64c5fd4", "fqn": ["orderly", "gold", "not_null_fct_data_quality_exception_type"], "alias": "not_null_fct_data_quality_exception_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3528402, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_data_quality", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_data_quality"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_data_quality_exception_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect exception_type\nfrom \"orderly\".\"dev_gold\".\"fct_data_quality\"\nwhere exception_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exception_type", "file_key_name": "models.fct_data_quality", "attached_node": "model.orderly.fct_data_quality", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "exception_type", "model": "{{ get_where_subquery(ref('fct_data_quality')) }}"}, "namespace": null}}, "test.orderly.accepted_values_fct_data_quality_exception_type__SKU_NOT_IN_SEED__NAME_MISMATCH__VENDOR_MISMATCH__OTHER.a5a5ac2b77": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "accepted_values_fct_data_quality_exception_type__SKU_NOT_IN_SEED__NAME_MISMATCH__VENDOR_MISMATCH__OTHER", "resource_type": "test", "package_name": "orderly", "path": "accepted_values_fct_data_quali_cf0f4cd66c56fb27667dae8d128c6f25.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.accepted_values_fct_data_quality_exception_type__SKU_NOT_IN_SEED__NAME_MISMATCH__VENDOR_MISMATCH__OTHER.a5a5ac2b77", "fqn": ["orderly", "gold", "accepted_values_fct_data_quality_exception_type__SKU_NOT_IN_SEED__NAME_MISMATCH__VENDOR_MISMATCH__OTHER"], "alias": "accepted_values_fct_data_quali_cf0f4cd66c56fb27667dae8d128c6f25", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fct_data_quali_cf0f4cd66c56fb27667dae8d128c6f25", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_fct_data_quali_cf0f4cd66c56fb27667dae8d128c6f25"}, "created_at": 1754795766.3534966, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fct_data_quali_cf0f4cd66c56fb27667dae8d128c6f25\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_data_quality", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_data_quality"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\accepted_values_fct_data_quali_cf0f4cd66c56fb27667dae8d128c6f25.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        exception_type as value_field,\n        count(*) as n_records\n\n    from \"orderly\".\"dev_gold\".\"fct_data_quality\"\n    group by exception_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'SKU_NOT_IN_SEED','NAME_MISMATCH','VENDOR_MISMATCH','OTHER'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exception_type", "file_key_name": "models.fct_data_quality", "attached_node": "model.orderly.fct_data_quality", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["SKU_NOT_IN_SEED", "NAME_MISMATCH", "VENDOR_MISMATCH", "OTHER"], "column_name": "exception_type", "model": "{{ get_where_subquery(ref('fct_data_quality')) }}"}, "namespace": null}}, "test.orderly.unique_fct_price_variance_price_variance_key.d95d8c164b": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_fct_price_variance_price_variance_key", "resource_type": "test", "package_name": "orderly", "path": "unique_fct_price_variance_price_variance_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.unique_fct_price_variance_price_variance_key.d95d8c164b", "fqn": ["orderly", "gold", "unique_fct_price_variance_price_variance_key"], "alias": "unique_fct_price_variance_price_variance_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3559136, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\unique_fct_price_variance_price_variance_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    price_variance_key as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_gold\".\"fct_price_variance\"\nwhere price_variance_key is not null\ngroup by price_variance_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price_variance_key", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "unique", "kwargs": {"column_name": "price_variance_key", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_price_variance_price_variance_key.53f223732f": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_price_variance_price_variance_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_price_variance_price_variance_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_price_variance_price_variance_key.53f223732f", "fqn": ["orderly", "gold", "not_null_fct_price_variance_price_variance_key"], "alias": "not_null_fct_price_variance_price_variance_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3565392, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_price_variance_price_variance_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price_variance_key\nfrom \"orderly\".\"dev_gold\".\"fct_price_variance\"\nwhere price_variance_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price_variance_key", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price_variance_key", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_price_variance_date_key.57786f0dc4": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_price_variance_date_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_price_variance_date_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_price_variance_date_key.57786f0dc4", "fqn": ["orderly", "gold", "not_null_fct_price_variance_date_key"], "alias": "not_null_fct_price_variance_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3571773, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_price_variance_date_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_key\nfrom \"orderly\".\"dev_gold\".\"fct_price_variance\"\nwhere date_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_key", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_key", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.relationships_fct_price_variance_date_key__date_key__ref_dim_date_.d5c972a968": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_fct_price_variance_date_key__date_key__ref_dim_date_", "resource_type": "test", "package_name": "orderly", "path": "relationships_fct_price_varian_c572125eb2bd27da3cfb54a0603da078.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.relationships_fct_price_variance_date_key__date_key__ref_dim_date_.d5c972a968", "fqn": ["orderly", "gold", "relationships_fct_price_variance_date_key__date_key__ref_dim_date_"], "alias": "relationships_fct_price_varian_c572125eb2bd27da3cfb54a0603da078", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_price_varian_c572125eb2bd27da3cfb54a0603da078", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_price_varian_c572125eb2bd27da3cfb54a0603da078"}, "created_at": 1754795766.3578072, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_price_varian_c572125eb2bd27da3cfb54a0603da078\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}, {"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_date", "model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\relationships_fct_price_varian_c572125eb2bd27da3cfb54a0603da078.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select date_key as from_field\n    from \"orderly\".\"dev_gold\".\"fct_price_variance\"\n    where date_key is not null\n),\n\nparent as (\n    select date_key as to_field\n    from \"orderly\".\"dev_gold\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_key", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_date')", "field": "date_key", "column_name": "date_key", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_price_variance_product_key.3ac9fb2809": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_price_variance_product_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_price_variance_product_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_price_variance_product_key.3ac9fb2809", "fqn": ["orderly", "gold", "not_null_fct_price_variance_product_key"], "alias": "not_null_fct_price_variance_product_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.360093, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_price_variance_product_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_key\nfrom \"orderly\".\"dev_gold\".\"fct_price_variance\"\nwhere product_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_key", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.relationships_fct_price_variance_product_key__product_key__ref_dim_product_.159e26688c": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_fct_price_variance_product_key__product_key__ref_dim_product_", "resource_type": "test", "package_name": "orderly", "path": "relationships_fct_price_varian_a57e2fad9b79c8f16bda0238cab15194.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.relationships_fct_price_variance_product_key__product_key__ref_dim_product_.159e26688c", "fqn": ["orderly", "gold", "relationships_fct_price_variance_product_key__product_key__ref_dim_product_"], "alias": "relationships_fct_price_varian_a57e2fad9b79c8f16bda0238cab15194", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_price_varian_a57e2fad9b79c8f16bda0238cab15194", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_price_varian_a57e2fad9b79c8f16bda0238cab15194"}, "created_at": 1754795766.3607326, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_price_varian_a57e2fad9b79c8f16bda0238cab15194\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}, {"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_product", "model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\relationships_fct_price_varian_a57e2fad9b79c8f16bda0238cab15194.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_key as from_field\n    from \"orderly\".\"dev_gold\".\"fct_price_variance\"\n    where product_key is not null\n),\n\nparent as (\n    select product_key as to_field\n    from \"orderly\".\"dev_gold\".\"dim_product\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_product')", "field": "product_key", "column_name": "product_key", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_price_variance_vendor_key.6941b717f3": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_price_variance_vendor_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_price_variance_vendor_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_price_variance_vendor_key.6941b717f3", "fqn": ["orderly", "gold", "not_null_fct_price_variance_vendor_key"], "alias": "not_null_fct_price_variance_vendor_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3627813, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_price_variance_vendor_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_key\nfrom \"orderly\".\"dev_gold\".\"fct_price_variance\"\nwhere vendor_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_key", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_key", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.relationships_fct_price_variance_vendor_key__vendor_key__ref_dim_vendor_.b2134bad76": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_fct_price_variance_vendor_key__vendor_key__ref_dim_vendor_", "resource_type": "test", "package_name": "orderly", "path": "relationships_fct_price_varian_2f84c3f0d4961507c65a388376411733.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.relationships_fct_price_variance_vendor_key__vendor_key__ref_dim_vendor_.b2134bad76", "fqn": ["orderly", "gold", "relationships_fct_price_variance_vendor_key__vendor_key__ref_dim_vendor_"], "alias": "relationships_fct_price_varian_2f84c3f0d4961507c65a388376411733", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_price_varian_2f84c3f0d4961507c65a388376411733", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_price_varian_2f84c3f0d4961507c65a388376411733"}, "created_at": 1754795766.3634322, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_price_varian_2f84c3f0d4961507c65a388376411733\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_vendor", "package": null, "version": null}, {"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_vendor", "model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\relationships_fct_price_varian_2f84c3f0d4961507c65a388376411733.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select vendor_key as from_field\n    from \"orderly\".\"dev_gold\".\"fct_price_variance\"\n    where vendor_key is not null\n),\n\nparent as (\n    select vendor_key as to_field\n    from \"orderly\".\"dev_gold\".\"dim_vendor\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_key", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_vendor')", "field": "vendor_key", "column_name": "vendor_key", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_price_variance_cost_centre_key.a5f7cf2a8d": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_price_variance_cost_centre_key", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_price_variance_cost_centre_key.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_price_variance_cost_centre_key.a5f7cf2a8d", "fqn": ["orderly", "gold", "not_null_fct_price_variance_cost_centre_key"], "alias": "not_null_fct_price_variance_cost_centre_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3654854, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_price_variance_cost_centre_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_centre_key\nfrom \"orderly\".\"dev_gold\".\"fct_price_variance\"\nwhere cost_centre_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_key", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_centre_key", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.relationships_fct_price_variance_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.c9715b92c4": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_fct_price_variance_cost_centre_key__cost_centre_key__ref_dim_cost_centre_", "resource_type": "test", "package_name": "orderly", "path": "relationships_fct_price_varian_f12d3b9e3dde28d02360984917a4c74c.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.relationships_fct_price_variance_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.c9715b92c4", "fqn": ["orderly", "gold", "relationships_fct_price_variance_cost_centre_key__cost_centre_key__ref_dim_cost_centre_"], "alias": "relationships_fct_price_varian_f12d3b9e3dde28d02360984917a4c74c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_price_varian_f12d3b9e3dde28d02360984917a4c74c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_price_varian_f12d3b9e3dde28d02360984917a4c74c"}, "created_at": 1754795766.366126, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_price_varian_f12d3b9e3dde28d02360984917a4c74c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_cost_centre", "package": null, "version": null}, {"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.dim_cost_centre", "model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\relationships_fct_price_varian_f12d3b9e3dde28d02360984917a4c74c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select cost_centre_key as from_field\n    from \"orderly\".\"dev_gold\".\"fct_price_variance\"\n    where cost_centre_key is not null\n),\n\nparent as (\n    select cost_centre_key as to_field\n    from \"orderly\".\"dev_gold\".\"dim_cost_centre\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_key", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_cost_centre')", "field": "cost_centre_key", "column_name": "cost_centre_key", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_price_variance_avg_unit_price.fea1cbb91c": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_price_variance_avg_unit_price", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_price_variance_avg_unit_price.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_price_variance_avg_unit_price.fea1cbb91c", "fqn": ["orderly", "gold", "not_null_fct_price_variance_avg_unit_price"], "alias": "not_null_fct_price_variance_avg_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3683794, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_price_variance_avg_unit_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect avg_unit_price\nfrom \"orderly\".\"dev_gold\".\"fct_price_variance\"\nwhere avg_unit_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_unit_price", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "avg_unit_price", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_price_variance_min_unit_price.265d2e1419": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_price_variance_min_unit_price", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_price_variance_min_unit_price.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_price_variance_min_unit_price.265d2e1419", "fqn": ["orderly", "gold", "not_null_fct_price_variance_min_unit_price"], "alias": "not_null_fct_price_variance_min_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3690026, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_price_variance_min_unit_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect min_unit_price\nfrom \"orderly\".\"dev_gold\".\"fct_price_variance\"\nwhere min_unit_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "min_unit_price", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "min_unit_price", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_price_variance_max_unit_price.8bb1b694f0": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_price_variance_max_unit_price", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_price_variance_max_unit_price.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_price_variance_max_unit_price.8bb1b694f0", "fqn": ["orderly", "gold", "not_null_fct_price_variance_max_unit_price"], "alias": "not_null_fct_price_variance_max_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3696196, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_price_variance_max_unit_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect max_unit_price\nfrom \"orderly\".\"dev_gold\".\"fct_price_variance\"\nwhere max_unit_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "max_unit_price", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "max_unit_price", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_price_variance_order_count.9390ca678b": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_price_variance_order_count", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_price_variance_order_count.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_price_variance_order_count.9390ca678b", "fqn": ["orderly", "gold", "not_null_fct_price_variance_order_count"], "alias": "not_null_fct_price_variance_order_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.370225, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_price_variance_order_count.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_count\nfrom \"orderly\".\"dev_gold\".\"fct_price_variance\"\nwhere order_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_count", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_count", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_price_variance_total_quantity.9ea9f5f7d2": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_price_variance_total_quantity", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_price_variance_total_quantity.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_price_variance_total_quantity.9ea9f5f7d2", "fqn": ["orderly", "gold", "not_null_fct_price_variance_total_quantity"], "alias": "not_null_fct_price_variance_total_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3708243, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_price_variance_total_quantity.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_quantity\nfrom \"orderly\".\"dev_gold\".\"fct_price_variance\"\nwhere total_quantity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_quantity", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_quantity", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.not_null_fct_price_variance_has_significant_variance.31f690502a": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_fct_price_variance_has_significant_variance", "resource_type": "test", "package_name": "orderly", "path": "not_null_fct_price_variance_has_significant_variance.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.not_null_fct_price_variance_has_significant_variance.31f690502a", "fqn": ["orderly", "gold", "not_null_fct_price_variance_has_significant_variance"], "alias": "not_null_fct_price_variance_has_significant_variance", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3714318, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\not_null_fct_price_variance_has_significant_variance.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect has_significant_variance\nfrom \"orderly\".\"dev_gold\".\"fct_price_variance\"\nwhere has_significant_variance is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "has_significant_variance", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "has_significant_variance", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.accepted_values_fct_price_variance_has_significant_variance__True.cf23de8026": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "accepted_values_fct_price_variance_has_significant_variance__True", "resource_type": "test", "package_name": "orderly", "path": "accepted_values_fct_price_vari_87648998f0ffec3151ac575a2457aac4.sql", "original_file_path": "models\\gold\\schema.yml", "unique_id": "test.orderly.accepted_values_fct_price_variance_has_significant_variance__True.cf23de8026", "fqn": ["orderly", "gold", "accepted_values_fct_price_variance_has_significant_variance__True"], "alias": "accepted_values_fct_price_vari_87648998f0ffec3151ac575a2457aac4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fct_price_vari_87648998f0ffec3151ac575a2457aac4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_fct_price_vari_87648998f0ffec3151ac575a2457aac4"}, "created_at": 1754795766.3720438, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fct_price_vari_87648998f0ffec3151ac575a2457aac4\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_price_variance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.fct_price_variance"]}, "compiled_path": "target\\compiled\\orderly\\models\\gold\\schema.yml\\accepted_values_fct_price_vari_87648998f0ffec3151ac575a2457aac4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        has_significant_variance as value_field,\n        count(*) as n_records\n\n    from \"orderly\".\"dev_gold\".\"fct_price_variance\"\n    group by has_significant_variance\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'True'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "has_significant_variance", "file_key_name": "models.fct_price_variance", "attached_node": "model.orderly.fct_price_variance", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true], "column_name": "has_significant_variance", "model": "{{ get_where_subquery(ref('fct_price_variance')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_cost_centres_cost_centre_id.8544dd19f9": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_cost_centres_cost_centre_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_cost_centres_cost_centre_id.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_cost_centres_cost_centre_id.8544dd19f9", "fqn": ["orderly", "silver", "not_null_silver_cost_centres_cost_centre_id"], "alias": "not_null_silver_cost_centres_cost_centre_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3783348, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_cost_centres", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_cost_centres"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_cost_centres_cost_centre_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_centre_id\nfrom \"orderly\".\"dev_silver\".\"silver_cost_centres\"\nwhere cost_centre_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_id", "file_key_name": "models.silver_cost_centres", "attached_node": "model.orderly.silver_cost_centres", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_centre_id", "model": "{{ get_where_subquery(ref('silver_cost_centres')) }}"}, "namespace": null}}, "test.orderly.unique_silver_cost_centres_cost_centre_id.5fb3ad4552": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_silver_cost_centres_cost_centre_id", "resource_type": "test", "package_name": "orderly", "path": "unique_silver_cost_centres_cost_centre_id.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.unique_silver_cost_centres_cost_centre_id.5fb3ad4552", "fqn": ["orderly", "silver", "unique_silver_cost_centres_cost_centre_id"], "alias": "unique_silver_cost_centres_cost_centre_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3789878, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_cost_centres", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_cost_centres"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\unique_silver_cost_centres_cost_centre_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    cost_centre_id as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_silver\".\"silver_cost_centres\"\nwhere cost_centre_id is not null\ngroup by cost_centre_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_id", "file_key_name": "models.silver_cost_centres", "attached_node": "model.orderly.silver_cost_centres", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cost_centre_id", "model": "{{ get_where_subquery(ref('silver_cost_centres')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_cost_centres_cost_centre_name.022c7348a7": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_cost_centres_cost_centre_name", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_cost_centres_cost_centre_name.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_cost_centres_cost_centre_name.022c7348a7", "fqn": ["orderly", "silver", "not_null_silver_cost_centres_cost_centre_name"], "alias": "not_null_silver_cost_centres_cost_centre_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3796148, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_cost_centres", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_cost_centres"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_cost_centres_cost_centre_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_centre_name\nfrom \"orderly\".\"dev_silver\".\"silver_cost_centres\"\nwhere cost_centre_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_name", "file_key_name": "models.silver_cost_centres", "attached_node": "model.orderly.silver_cost_centres", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_centre_name", "model": "{{ get_where_subquery(ref('silver_cost_centres')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_cost_centres_country_code.3c41f33577": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_cost_centres_country_code", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_cost_centres_country_code.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_cost_centres_country_code.3c41f33577", "fqn": ["orderly", "silver", "not_null_silver_cost_centres_country_code"], "alias": "not_null_silver_cost_centres_country_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3802207, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_cost_centres", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_cost_centres"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_cost_centres_country_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_code\nfrom \"orderly\".\"dev_silver\".\"silver_cost_centres\"\nwhere country_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_code", "file_key_name": "models.silver_cost_centres", "attached_node": "model.orderly.silver_cost_centres", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_code", "model": "{{ get_where_subquery(ref('silver_cost_centres')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_exchange_rates_date.1d0e1b9364": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_exchange_rates_date", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_exchange_rates_date.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_exchange_rates_date.1d0e1b9364", "fqn": ["orderly", "silver", "not_null_silver_exchange_rates_date"], "alias": "not_null_silver_exchange_rates_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3808184, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_exchange_rates_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"orderly\".\"dev_silver\".\"silver_exchange_rates\"\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.silver_exchange_rates", "attached_node": "model.orderly.silver_exchange_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('silver_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_exchange_rates_from_currency.5bfdc62e67": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_exchange_rates_from_currency", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_exchange_rates_from_currency.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_exchange_rates_from_currency.5bfdc62e67", "fqn": ["orderly", "silver", "not_null_silver_exchange_rates_from_currency"], "alias": "not_null_silver_exchange_rates_from_currency", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.381415, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_exchange_rates_from_currency.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect from_currency\nfrom \"orderly\".\"dev_silver\".\"silver_exchange_rates\"\nwhere from_currency is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "from_currency", "file_key_name": "models.silver_exchange_rates", "attached_node": "model.orderly.silver_exchange_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_currency", "model": "{{ get_where_subquery(ref('silver_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.accepted_values_silver_exchange_rates_from_currency__USD.34caf75371": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "accepted_values_silver_exchange_rates_from_currency__USD", "resource_type": "test", "package_name": "orderly", "path": "accepted_values_silver_exchange_rates_from_currency__USD.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.accepted_values_silver_exchange_rates_from_currency__USD.34caf75371", "fqn": ["orderly", "silver", "accepted_values_silver_exchange_rates_from_currency__USD"], "alias": "accepted_values_silver_exchange_rates_from_currency__USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3820086, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\accepted_values_silver_exchange_rates_from_currency__USD.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        from_currency as value_field,\n        count(*) as n_records\n\n    from \"orderly\".\"dev_silver\".\"silver_exchange_rates\"\n    group by from_currency\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'USD'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "from_currency", "file_key_name": "models.silver_exchange_rates", "attached_node": "model.orderly.silver_exchange_rates", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["USD"], "column_name": "from_currency", "model": "{{ get_where_subquery(ref('silver_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_exchange_rates_to_currency.0d7934ce1e": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_exchange_rates_to_currency", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_exchange_rates_to_currency.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_exchange_rates_to_currency.0d7934ce1e", "fqn": ["orderly", "silver", "not_null_silver_exchange_rates_to_currency"], "alias": "not_null_silver_exchange_rates_to_currency", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.383864, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_exchange_rates_to_currency.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect to_currency\nfrom \"orderly\".\"dev_silver\".\"silver_exchange_rates\"\nwhere to_currency is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "to_currency", "file_key_name": "models.silver_exchange_rates", "attached_node": "model.orderly.silver_exchange_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_currency", "model": "{{ get_where_subquery(ref('silver_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.accepted_values_silver_exchange_rates_to_currency__AUD.5ce093812e": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "accepted_values_silver_exchange_rates_to_currency__AUD", "resource_type": "test", "package_name": "orderly", "path": "accepted_values_silver_exchange_rates_to_currency__AUD.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.accepted_values_silver_exchange_rates_to_currency__AUD.5ce093812e", "fqn": ["orderly", "silver", "accepted_values_silver_exchange_rates_to_currency__AUD"], "alias": "accepted_values_silver_exchange_rates_to_currency__AUD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.384487, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\accepted_values_silver_exchange_rates_to_currency__AUD.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        to_currency as value_field,\n        count(*) as n_records\n\n    from \"orderly\".\"dev_silver\".\"silver_exchange_rates\"\n    group by to_currency\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'AUD'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "to_currency", "file_key_name": "models.silver_exchange_rates", "attached_node": "model.orderly.silver_exchange_rates", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["AUD"], "column_name": "to_currency", "model": "{{ get_where_subquery(ref('silver_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_exchange_rates_exchange_rate.ec5d652b4f": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_exchange_rates_exchange_rate", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_exchange_rates_exchange_rate.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_exchange_rates_exchange_rate.ec5d652b4f", "fqn": ["orderly", "silver", "not_null_silver_exchange_rates_exchange_rate"], "alias": "not_null_silver_exchange_rates_exchange_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.386307, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_exchange_rates_exchange_rate.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect exchange_rate\nfrom \"orderly\".\"dev_silver\".\"silver_exchange_rates\"\nwhere exchange_rate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exchange_rate", "file_key_name": "models.silver_exchange_rates", "attached_node": "model.orderly.silver_exchange_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "exchange_rate", "model": "{{ get_where_subquery(ref('silver_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_exchange_rates_rate_source.2c70c00d74": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_exchange_rates_rate_source", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_exchange_rates_rate_source.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_exchange_rates_rate_source.2c70c00d74", "fqn": ["orderly", "silver", "not_null_silver_exchange_rates_rate_source"], "alias": "not_null_silver_exchange_rates_rate_source", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3876119, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_exchange_rates_rate_source.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rate_source\nfrom \"orderly\".\"dev_silver\".\"silver_exchange_rates\"\nwhere rate_source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rate_source", "file_key_name": "models.silver_exchange_rates", "attached_node": "model.orderly.silver_exchange_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "rate_source", "model": "{{ get_where_subquery(ref('silver_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.accepted_values_silver_exchange_rates_rate_source__SOURCE__CALCULATED__INTERPOLATED__FORWARD_FILLED.2d3a81299c": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "accepted_values_silver_exchange_rates_rate_source__SOURCE__CALCULATED__INTERPOLATED__FORWARD_FILLED", "resource_type": "test", "package_name": "orderly", "path": "accepted_values_silver_exchang_3c71bd68575d780b3f0602848ee082ad.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.accepted_values_silver_exchange_rates_rate_source__SOURCE__CALCULATED__INTERPOLATED__FORWARD_FILLED.2d3a81299c", "fqn": ["orderly", "silver", "accepted_values_silver_exchange_rates_rate_source__SOURCE__CALCULATED__INTERPOLATED__FORWARD_FILLED"], "alias": "accepted_values_silver_exchang_3c71bd68575d780b3f0602848ee082ad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_silver_exchang_3c71bd68575d780b3f0602848ee082ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_silver_exchang_3c71bd68575d780b3f0602848ee082ad"}, "created_at": 1754795766.3882365, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_silver_exchang_3c71bd68575d780b3f0602848ee082ad\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\accepted_values_silver_exchang_3c71bd68575d780b3f0602848ee082ad.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        rate_source as value_field,\n        count(*) as n_records\n\n    from \"orderly\".\"dev_silver\".\"silver_exchange_rates\"\n    group by rate_source\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'SOURCE','CALCULATED','INTERPOLATED','FORWARD_FILLED'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rate_source", "file_key_name": "models.silver_exchange_rates", "attached_node": "model.orderly.silver_exchange_rates", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["SOURCE", "CALCULATED", "INTERPOLATED", "FORWARD_FILLED"], "column_name": "rate_source", "model": "{{ get_where_subquery(ref('silver_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_vendor_master_vendor_id.02955e7f5c": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_vendor_master_vendor_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_vendor_master_vendor_id.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_vendor_master_vendor_id.02955e7f5c", "fqn": ["orderly", "silver", "not_null_silver_vendor_master_vendor_id"], "alias": "not_null_silver_vendor_master_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.39095, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_vendor_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_vendor_master"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_vendor_master_vendor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"orderly\".\"dev_silver\".\"silver_vendor_master\"\nwhere vendor_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_id", "file_key_name": "models.silver_vendor_master", "attached_node": "model.orderly.silver_vendor_master", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('silver_vendor_master')) }}"}, "namespace": null}}, "test.orderly.unique_silver_vendor_master_vendor_id.723dec8279": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_silver_vendor_master_vendor_id", "resource_type": "test", "package_name": "orderly", "path": "unique_silver_vendor_master_vendor_id.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.unique_silver_vendor_master_vendor_id.723dec8279", "fqn": ["orderly", "silver", "unique_silver_vendor_master_vendor_id"], "alias": "unique_silver_vendor_master_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3915875, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_vendor_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_vendor_master"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\unique_silver_vendor_master_vendor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_id as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_silver\".\"silver_vendor_master\"\nwhere vendor_id is not null\ngroup by vendor_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_id", "file_key_name": "models.silver_vendor_master", "attached_node": "model.orderly.silver_vendor_master", "test_metadata": {"name": "unique", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('silver_vendor_master')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_vendor_master_vendor_name.ffb9639c10": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_vendor_master_vendor_name", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_vendor_master_vendor_name.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_vendor_master_vendor_name.ffb9639c10", "fqn": ["orderly", "silver", "not_null_silver_vendor_master_vendor_name"], "alias": "not_null_silver_vendor_master_vendor_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3922, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_vendor_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_vendor_master"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_vendor_master_vendor_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_name\nfrom \"orderly\".\"dev_silver\".\"silver_vendor_master\"\nwhere vendor_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_name", "file_key_name": "models.silver_vendor_master", "attached_node": "model.orderly.silver_vendor_master", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_name", "model": "{{ get_where_subquery(ref('silver_vendor_master')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_valid_line_uid.78905c7a65": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_valid_line_uid", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_valid_line_uid.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_valid_line_uid.78905c7a65", "fqn": ["orderly", "silver", "not_null_silver_orders_valid_line_uid"], "alias": "not_null_silver_orders_valid_line_uid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3928, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_valid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_valid"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_valid_line_uid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_uid\nfrom \"orderly\".\"dev_silver\".\"silver_orders_valid\"\nwhere line_uid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_uid", "file_key_name": "models.silver_orders_valid", "attached_node": "model.orderly.silver_orders_valid", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_uid", "model": "{{ get_where_subquery(ref('silver_orders_valid')) }}"}, "namespace": null}}, "test.orderly.unique_silver_orders_valid_line_uid.567bb943c8": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_silver_orders_valid_line_uid", "resource_type": "test", "package_name": "orderly", "path": "unique_silver_orders_valid_line_uid.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.unique_silver_orders_valid_line_uid.567bb943c8", "fqn": ["orderly", "silver", "unique_silver_orders_valid_line_uid"], "alias": "unique_silver_orders_valid_line_uid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3934035, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_valid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_valid"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\unique_silver_orders_valid_line_uid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    line_uid as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_silver\".\"silver_orders_valid\"\nwhere line_uid is not null\ngroup by line_uid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_uid", "file_key_name": "models.silver_orders_valid", "attached_node": "model.orderly.silver_orders_valid", "test_metadata": {"name": "unique", "kwargs": {"column_name": "line_uid", "model": "{{ get_where_subquery(ref('silver_orders_valid')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_valid_order_id.39ddd69369": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_valid_order_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_valid_order_id.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_valid_order_id.39ddd69369", "fqn": ["orderly", "silver", "not_null_silver_orders_valid_order_id"], "alias": "not_null_silver_orders_valid_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.394006, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_valid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_valid"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_valid_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"orderly\".\"dev_silver\".\"silver_orders_valid\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.silver_orders_valid", "attached_node": "model.orderly.silver_orders_valid", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('silver_orders_valid')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_valid_sku_id.93cfc9d155": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_valid_sku_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_valid_sku_id.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_valid_sku_id.93cfc9d155", "fqn": ["orderly", "silver", "not_null_silver_orders_valid_sku_id"], "alias": "not_null_silver_orders_valid_sku_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.394601, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_valid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_valid"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_valid_sku_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sku_id\nfrom \"orderly\".\"dev_silver\".\"silver_orders_valid\"\nwhere sku_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sku_id", "file_key_name": "models.silver_orders_valid", "attached_node": "model.orderly.silver_orders_valid", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sku_id", "model": "{{ get_where_subquery(ref('silver_orders_valid')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_valid_cost_centre_id.76ba75ddb2": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_valid_cost_centre_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_valid_cost_centre_id.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_valid_cost_centre_id.76ba75ddb2", "fqn": ["orderly", "silver", "not_null_silver_orders_valid_cost_centre_id"], "alias": "not_null_silver_orders_valid_cost_centre_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.3951948, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_valid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_valid"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_valid_cost_centre_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_centre_id\nfrom \"orderly\".\"dev_silver\".\"silver_orders_valid\"\nwhere cost_centre_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_id", "file_key_name": "models.silver_orders_valid", "attached_node": "model.orderly.silver_orders_valid", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_centre_id", "model": "{{ get_where_subquery(ref('silver_orders_valid')) }}"}, "namespace": null}}, "test.orderly.relationships_silver_orders_valid_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.9feae6c48c": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_silver_orders_valid_cost_centre_id__cost_centre_id__ref_silver_cost_centres_", "resource_type": "test", "package_name": "orderly", "path": "relationships_silver_orders_va_ef155c64fd343107e42b8b09584d82ac.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.relationships_silver_orders_valid_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.9feae6c48c", "fqn": ["orderly", "silver", "relationships_silver_orders_valid_cost_centre_id__cost_centre_id__ref_silver_cost_centres_"], "alias": "relationships_silver_orders_va_ef155c64fd343107e42b8b09584d82ac", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_silver_orders_va_ef155c64fd343107e42b8b09584d82ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_silver_orders_va_ef155c64fd343107e42b8b09584d82ac"}, "created_at": 1754795766.3958104, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_silver_orders_va_ef155c64fd343107e42b8b09584d82ac\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_cost_centres", "package": null, "version": null}, {"name": "silver_orders_valid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_cost_centres", "model.orderly.silver_orders_valid"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\relationships_silver_orders_va_ef155c64fd343107e42b8b09584d82ac.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select cost_centre_id as from_field\n    from \"orderly\".\"dev_silver\".\"silver_orders_valid\"\n    where cost_centre_id is not null\n),\n\nparent as (\n    select cost_centre_id as to_field\n    from \"orderly\".\"dev_silver\".\"silver_cost_centres\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_id", "file_key_name": "models.silver_orders_valid", "attached_node": "model.orderly.silver_orders_valid", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('silver_cost_centres')", "field": "cost_centre_id", "column_name": "cost_centre_id", "model": "{{ get_where_subquery(ref('silver_orders_valid')) }}"}, "namespace": null}}, "test.orderly.relationships_silver_orders_valid_matched_vendor_id__vendor_id__ref_silver_vendor_master_.f82cd404e2": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_silver_orders_valid_matched_vendor_id__vendor_id__ref_silver_vendor_master_", "resource_type": "test", "package_name": "orderly", "path": "relationships_silver_orders_va_240d7608266286cda074ab04c67721e5.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.relationships_silver_orders_valid_matched_vendor_id__vendor_id__ref_silver_vendor_master_.f82cd404e2", "fqn": ["orderly", "silver", "relationships_silver_orders_valid_matched_vendor_id__vendor_id__ref_silver_vendor_master_"], "alias": "relationships_silver_orders_va_240d7608266286cda074ab04c67721e5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_silver_orders_va_240d7608266286cda074ab04c67721e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_silver_orders_va_240d7608266286cda074ab04c67721e5"}, "created_at": 1754795766.3980932, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_silver_orders_va_240d7608266286cda074ab04c67721e5\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_vendor_master", "package": null, "version": null}, {"name": "silver_orders_valid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_vendor_master", "model.orderly.silver_orders_valid"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\relationships_silver_orders_va_240d7608266286cda074ab04c67721e5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select matched_vendor_id as from_field\n    from \"orderly\".\"dev_silver\".\"silver_orders_valid\"\n    where matched_vendor_id is not null\n),\n\nparent as (\n    select vendor_id as to_field\n    from \"orderly\".\"dev_silver\".\"silver_vendor_master\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "matched_vendor_id", "file_key_name": "models.silver_orders_valid", "attached_node": "model.orderly.silver_orders_valid", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('silver_vendor_master')", "field": "vendor_id", "column_name": "matched_vendor_id", "model": "{{ get_where_subquery(ref('silver_orders_valid')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_valid_vendor_fuzz_score.c9db625f1c": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_valid_vendor_fuzz_score", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_valid_vendor_fuzz_score.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_valid_vendor_fuzz_score.c9db625f1c", "fqn": ["orderly", "silver", "not_null_silver_orders_valid_vendor_fuzz_score"], "alias": "not_null_silver_orders_valid_vendor_fuzz_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4001243, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_valid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_valid"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_valid_vendor_fuzz_score.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_fuzz_score\nfrom \"orderly\".\"dev_silver\".\"silver_orders_valid\"\nwhere vendor_fuzz_score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_fuzz_score", "file_key_name": "models.silver_orders_valid", "attached_node": "model.orderly.silver_orders_valid", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_fuzz_score", "model": "{{ get_where_subquery(ref('silver_orders_valid')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_exceptions_line_uid.74cc7a2223": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_exceptions_line_uid", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_exceptions_line_uid.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_exceptions_line_uid.74cc7a2223", "fqn": ["orderly", "silver", "not_null_silver_orders_exceptions_line_uid"], "alias": "not_null_silver_orders_exceptions_line_uid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4007607, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_exceptions"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_exceptions_line_uid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_uid\nfrom \"orderly\".\"dev_silver\".\"silver_orders_exceptions\"\nwhere line_uid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_uid", "file_key_name": "models.silver_orders_exceptions", "attached_node": "model.orderly.silver_orders_exceptions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_uid", "model": "{{ get_where_subquery(ref('silver_orders_exceptions')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_exceptions_order_id.364ad54165": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_exceptions_order_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_exceptions_order_id.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_exceptions_order_id.364ad54165", "fqn": ["orderly", "silver", "not_null_silver_orders_exceptions_order_id"], "alias": "not_null_silver_orders_exceptions_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4013894, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_exceptions"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_exceptions_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"orderly\".\"dev_silver\".\"silver_orders_exceptions\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.silver_orders_exceptions", "attached_node": "model.orderly.silver_orders_exceptions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('silver_orders_exceptions')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_exceptions_cost_centre_id.0471b3c25c": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_exceptions_cost_centre_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_exceptions_cost_centre_id.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_exceptions_cost_centre_id.0471b3c25c", "fqn": ["orderly", "silver", "not_null_silver_orders_exceptions_cost_centre_id"], "alias": "not_null_silver_orders_exceptions_cost_centre_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4020007, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_exceptions"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_exceptions_cost_centre_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_centre_id\nfrom \"orderly\".\"dev_silver\".\"silver_orders_exceptions\"\nwhere cost_centre_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_id", "file_key_name": "models.silver_orders_exceptions", "attached_node": "model.orderly.silver_orders_exceptions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_centre_id", "model": "{{ get_where_subquery(ref('silver_orders_exceptions')) }}"}, "namespace": null}}, "test.orderly.relationships_silver_orders_exceptions_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.a08628861b": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_silver_orders_exceptions_cost_centre_id__cost_centre_id__ref_silver_cost_centres_", "resource_type": "test", "package_name": "orderly", "path": "relationships_silver_orders_ex_600635b8409893ee6327e7413ce47f97.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.relationships_silver_orders_exceptions_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.a08628861b", "fqn": ["orderly", "silver", "relationships_silver_orders_exceptions_cost_centre_id__cost_centre_id__ref_silver_cost_centres_"], "alias": "relationships_silver_orders_ex_600635b8409893ee6327e7413ce47f97", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_silver_orders_ex_600635b8409893ee6327e7413ce47f97", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_silver_orders_ex_600635b8409893ee6327e7413ce47f97"}, "created_at": 1754795766.402628, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_silver_orders_ex_600635b8409893ee6327e7413ce47f97\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_cost_centres", "package": null, "version": null}, {"name": "silver_orders_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_cost_centres", "model.orderly.silver_orders_exceptions"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\relationships_silver_orders_ex_600635b8409893ee6327e7413ce47f97.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select cost_centre_id as from_field\n    from \"orderly\".\"dev_silver\".\"silver_orders_exceptions\"\n    where cost_centre_id is not null\n),\n\nparent as (\n    select cost_centre_id as to_field\n    from \"orderly\".\"dev_silver\".\"silver_cost_centres\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_id", "file_key_name": "models.silver_orders_exceptions", "attached_node": "model.orderly.silver_orders_exceptions", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('silver_cost_centres')", "field": "cost_centre_id", "column_name": "cost_centre_id", "model": "{{ get_where_subquery(ref('silver_orders_exceptions')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_exceptions_flag_missing_in_seed.e6356eaf4c": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_exceptions_flag_missing_in_seed", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_exceptions_flag_missing_in_seed.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_exceptions_flag_missing_in_seed.e6356eaf4c", "fqn": ["orderly", "silver", "not_null_silver_orders_exceptions_flag_missing_in_seed"], "alias": "not_null_silver_orders_exceptions_flag_missing_in_seed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.404739, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_exceptions"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_exceptions_flag_missing_in_seed.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect flag_missing_in_seed\nfrom \"orderly\".\"dev_silver\".\"silver_orders_exceptions\"\nwhere flag_missing_in_seed is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "flag_missing_in_seed", "file_key_name": "models.silver_orders_exceptions", "attached_node": "model.orderly.silver_orders_exceptions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "flag_missing_in_seed", "model": "{{ get_where_subquery(ref('silver_orders_exceptions')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_exceptions_flag_name_mismatch.0f05a718b3": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_exceptions_flag_name_mismatch", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_exceptions_flag_name_mismatch.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_exceptions_flag_name_mismatch.0f05a718b3", "fqn": ["orderly", "silver", "not_null_silver_orders_exceptions_flag_name_mismatch"], "alias": "not_null_silver_orders_exceptions_flag_name_mismatch", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.405577, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_exceptions"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_exceptions_flag_name_mismatch.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect flag_name_mismatch\nfrom \"orderly\".\"dev_silver\".\"silver_orders_exceptions\"\nwhere flag_name_mismatch is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "flag_name_mismatch", "file_key_name": "models.silver_orders_exceptions", "attached_node": "model.orderly.silver_orders_exceptions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "flag_name_mismatch", "model": "{{ get_where_subquery(ref('silver_orders_exceptions')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_exceptions_flag_vendor_mismatch.9cb8b2e8c0": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_exceptions_flag_vendor_mismatch", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_exceptions_flag_vendor_mismatch.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_exceptions_flag_vendor_mismatch.9cb8b2e8c0", "fqn": ["orderly", "silver", "not_null_silver_orders_exceptions_flag_vendor_mismatch"], "alias": "not_null_silver_orders_exceptions_flag_vendor_mismatch", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4061973, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_exceptions"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_exceptions_flag_vendor_mismatch.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect flag_vendor_mismatch\nfrom \"orderly\".\"dev_silver\".\"silver_orders_exceptions\"\nwhere flag_vendor_mismatch is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "flag_vendor_mismatch", "file_key_name": "models.silver_orders_exceptions", "attached_node": "model.orderly.silver_orders_exceptions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "flag_vendor_mismatch", "model": "{{ get_where_subquery(ref('silver_orders_exceptions')) }}"}, "namespace": null}}, "test.orderly.relationships_silver_orders_exceptions_matched_vendor_id__vendor_id__ref_silver_vendor_master_.a77ffcebe2": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_silver_orders_exceptions_matched_vendor_id__vendor_id__ref_silver_vendor_master_", "resource_type": "test", "package_name": "orderly", "path": "relationships_silver_orders_ex_4ffe8981e4f016d881e78d8a278297ff.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.relationships_silver_orders_exceptions_matched_vendor_id__vendor_id__ref_silver_vendor_master_.a77ffcebe2", "fqn": ["orderly", "silver", "relationships_silver_orders_exceptions_matched_vendor_id__vendor_id__ref_silver_vendor_master_"], "alias": "relationships_silver_orders_ex_4ffe8981e4f016d881e78d8a278297ff", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_silver_orders_ex_4ffe8981e4f016d881e78d8a278297ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_silver_orders_ex_4ffe8981e4f016d881e78d8a278297ff"}, "created_at": 1754795766.406824, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_silver_orders_ex_4ffe8981e4f016d881e78d8a278297ff\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_vendor_master", "package": null, "version": null}, {"name": "silver_orders_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_vendor_master", "model.orderly.silver_orders_exceptions"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\relationships_silver_orders_ex_4ffe8981e4f016d881e78d8a278297ff.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select matched_vendor_id as from_field\n    from \"orderly\".\"dev_silver\".\"silver_orders_exceptions\"\n    where matched_vendor_id is not null\n),\n\nparent as (\n    select vendor_id as to_field\n    from \"orderly\".\"dev_silver\".\"silver_vendor_master\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "matched_vendor_id", "file_key_name": "models.silver_orders_exceptions", "attached_node": "model.orderly.silver_orders_exceptions", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('silver_vendor_master')", "field": "vendor_id", "column_name": "matched_vendor_id", "model": "{{ get_where_subquery(ref('silver_orders_exceptions')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_exceptions_exception_type.77f164c7dc": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_exceptions_exception_type", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_exceptions_exception_type.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_exceptions_exception_type.77f164c7dc", "fqn": ["orderly", "silver", "not_null_silver_orders_exceptions_exception_type"], "alias": "not_null_silver_orders_exceptions_exception_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4088867, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_exceptions"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_exceptions_exception_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect exception_type\nfrom \"orderly\".\"dev_silver\".\"silver_orders_exceptions\"\nwhere exception_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exception_type", "file_key_name": "models.silver_orders_exceptions", "attached_node": "model.orderly.silver_orders_exceptions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "exception_type", "model": "{{ get_where_subquery(ref('silver_orders_exceptions')) }}"}, "namespace": null}}, "test.orderly.accepted_values_silver_orders_exceptions_exception_type__SKU_NOT_IN_SEED__NAME_MISMATCH__VENDOR_MISMATCH__OTHER.205c522918": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "accepted_values_silver_orders_exceptions_exception_type__SKU_NOT_IN_SEED__NAME_MISMATCH__VENDOR_MISMATCH__OTHER", "resource_type": "test", "package_name": "orderly", "path": "accepted_values_silver_orders__6cf4648d45abc46d5c8a36602d8fa60d.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.accepted_values_silver_orders_exceptions_exception_type__SKU_NOT_IN_SEED__NAME_MISMATCH__VENDOR_MISMATCH__OTHER.205c522918", "fqn": ["orderly", "silver", "accepted_values_silver_orders_exceptions_exception_type__SKU_NOT_IN_SEED__NAME_MISMATCH__VENDOR_MISMATCH__OTHER"], "alias": "accepted_values_silver_orders__6cf4648d45abc46d5c8a36602d8fa60d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_silver_orders__6cf4648d45abc46d5c8a36602d8fa60d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_silver_orders__6cf4648d45abc46d5c8a36602d8fa60d"}, "created_at": 1754795766.4095397, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_silver_orders__6cf4648d45abc46d5c8a36602d8fa60d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_exceptions"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\accepted_values_silver_orders__6cf4648d45abc46d5c8a36602d8fa60d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        exception_type as value_field,\n        count(*) as n_records\n\n    from \"orderly\".\"dev_silver\".\"silver_orders_exceptions\"\n    group by exception_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'SKU_NOT_IN_SEED','NAME_MISMATCH','VENDOR_MISMATCH','OTHER'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exception_type", "file_key_name": "models.silver_orders_exceptions", "attached_node": "model.orderly.silver_orders_exceptions", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["SKU_NOT_IN_SEED", "NAME_MISMATCH", "VENDOR_MISMATCH", "OTHER"], "column_name": "exception_type", "model": "{{ get_where_subquery(ref('silver_orders_exceptions')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_nonproduct_line_uid.8091fb2c59": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_nonproduct_line_uid", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_nonproduct_line_uid.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_nonproduct_line_uid.8091fb2c59", "fqn": ["orderly", "silver", "not_null_silver_orders_nonproduct_line_uid"], "alias": "not_null_silver_orders_nonproduct_line_uid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.411295, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_nonproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_nonproduct"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_nonproduct_line_uid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_uid\nfrom \"orderly\".\"dev_silver\".\"silver_orders_nonproduct\"\nwhere line_uid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_uid", "file_key_name": "models.silver_orders_nonproduct", "attached_node": "model.orderly.silver_orders_nonproduct", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_uid", "model": "{{ get_where_subquery(ref('silver_orders_nonproduct')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_nonproduct_order_id.3a8ade98c1": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_nonproduct_order_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_nonproduct_order_id.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_nonproduct_order_id.3a8ade98c1", "fqn": ["orderly", "silver", "not_null_silver_orders_nonproduct_order_id"], "alias": "not_null_silver_orders_nonproduct_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4119143, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_nonproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_nonproduct"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_nonproduct_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"orderly\".\"dev_silver\".\"silver_orders_nonproduct\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.silver_orders_nonproduct", "attached_node": "model.orderly.silver_orders_nonproduct", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('silver_orders_nonproduct')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_nonproduct_line_number.1a4546bd1e": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_nonproduct_line_number", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_nonproduct_line_number.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_nonproduct_line_number.1a4546bd1e", "fqn": ["orderly", "silver", "not_null_silver_orders_nonproduct_line_number"], "alias": "not_null_silver_orders_nonproduct_line_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4125192, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_nonproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_nonproduct"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_nonproduct_line_number.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_number\nfrom \"orderly\".\"dev_silver\".\"silver_orders_nonproduct\"\nwhere line_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_number", "file_key_name": "models.silver_orders_nonproduct", "attached_node": "model.orderly.silver_orders_nonproduct", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_number", "model": "{{ get_where_subquery(ref('silver_orders_nonproduct')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_nonproduct_cost_centre_id.7393252a5c": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_nonproduct_cost_centre_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_nonproduct_cost_centre_id.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_nonproduct_cost_centre_id.7393252a5c", "fqn": ["orderly", "silver", "not_null_silver_orders_nonproduct_cost_centre_id"], "alias": "not_null_silver_orders_nonproduct_cost_centre_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.413123, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_nonproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_nonproduct"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_nonproduct_cost_centre_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_centre_id\nfrom \"orderly\".\"dev_silver\".\"silver_orders_nonproduct\"\nwhere cost_centre_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_id", "file_key_name": "models.silver_orders_nonproduct", "attached_node": "model.orderly.silver_orders_nonproduct", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_centre_id", "model": "{{ get_where_subquery(ref('silver_orders_nonproduct')) }}"}, "namespace": null}}, "test.orderly.relationships_silver_orders_nonproduct_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.9fedd9b7b8": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "relationships_silver_orders_nonproduct_cost_centre_id__cost_centre_id__ref_silver_cost_centres_", "resource_type": "test", "package_name": "orderly", "path": "relationships_silver_orders_no_5703aa9b45243f6daf499aea1f6ea927.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.relationships_silver_orders_nonproduct_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.9fedd9b7b8", "fqn": ["orderly", "silver", "relationships_silver_orders_nonproduct_cost_centre_id__cost_centre_id__ref_silver_cost_centres_"], "alias": "relationships_silver_orders_no_5703aa9b45243f6daf499aea1f6ea927", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_silver_orders_no_5703aa9b45243f6daf499aea1f6ea927", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_silver_orders_no_5703aa9b45243f6daf499aea1f6ea927"}, "created_at": 1754795766.413731, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_silver_orders_no_5703aa9b45243f6daf499aea1f6ea927\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_cost_centres", "package": null, "version": null}, {"name": "silver_orders_nonproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_cost_centres", "model.orderly.silver_orders_nonproduct"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\relationships_silver_orders_no_5703aa9b45243f6daf499aea1f6ea927.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select cost_centre_id as from_field\n    from \"orderly\".\"dev_silver\".\"silver_orders_nonproduct\"\n    where cost_centre_id is not null\n),\n\nparent as (\n    select cost_centre_id as to_field\n    from \"orderly\".\"dev_silver\".\"silver_cost_centres\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost_centre_id", "file_key_name": "models.silver_orders_nonproduct", "attached_node": "model.orderly.silver_orders_nonproduct", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('silver_cost_centres')", "field": "cost_centre_id", "column_name": "cost_centre_id", "model": "{{ get_where_subquery(ref('silver_orders_nonproduct')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_nonproduct_non_product_hint.dcb0a08220": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_nonproduct_non_product_hint", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_nonproduct_non_product_hint.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_nonproduct_non_product_hint.dcb0a08220", "fqn": ["orderly", "silver", "not_null_silver_orders_nonproduct_non_product_hint"], "alias": "not_null_silver_orders_nonproduct_non_product_hint", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4159753, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_nonproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_nonproduct"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_nonproduct_non_product_hint.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect non_product_hint\nfrom \"orderly\".\"dev_silver\".\"silver_orders_nonproduct\"\nwhere non_product_hint is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "non_product_hint", "file_key_name": "models.silver_orders_nonproduct", "attached_node": "model.orderly.silver_orders_nonproduct", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "non_product_hint", "model": "{{ get_where_subquery(ref('silver_orders_nonproduct')) }}"}, "namespace": null}}, "test.orderly.accepted_values_silver_orders_nonproduct_non_product_hint__True.b4634ac637": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "accepted_values_silver_orders_nonproduct_non_product_hint__True", "resource_type": "test", "package_name": "orderly", "path": "accepted_values_silver_orders_nonproduct_non_product_hint__True.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.accepted_values_silver_orders_nonproduct_non_product_hint__True.b4634ac637", "fqn": ["orderly", "silver", "accepted_values_silver_orders_nonproduct_non_product_hint__True"], "alias": "accepted_values_silver_orders_nonproduct_non_product_hint__True", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4166129, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_nonproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_nonproduct"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\accepted_values_silver_orders_nonproduct_non_product_hint__True.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        non_product_hint as value_field,\n        count(*) as n_records\n\n    from \"orderly\".\"dev_silver\".\"silver_orders_nonproduct\"\n    group by non_product_hint\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'True'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "non_product_hint", "file_key_name": "models.silver_orders_nonproduct", "attached_node": "model.orderly.silver_orders_nonproduct", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true], "column_name": "non_product_hint", "model": "{{ get_where_subquery(ref('silver_orders_nonproduct')) }}"}, "namespace": null}}, "test.orderly.not_null_silver_orders_nonproduct_record_type.0e44366ce7": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_silver_orders_nonproduct_record_type", "resource_type": "test", "package_name": "orderly", "path": "not_null_silver_orders_nonproduct_record_type.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.not_null_silver_orders_nonproduct_record_type.0e44366ce7", "fqn": ["orderly", "silver", "not_null_silver_orders_nonproduct_record_type"], "alias": "not_null_silver_orders_nonproduct_record_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4182456, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_nonproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_nonproduct"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\not_null_silver_orders_nonproduct_record_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect record_type\nfrom \"orderly\".\"dev_silver\".\"silver_orders_nonproduct\"\nwhere record_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "record_type", "file_key_name": "models.silver_orders_nonproduct", "attached_node": "model.orderly.silver_orders_nonproduct", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "record_type", "model": "{{ get_where_subquery(ref('silver_orders_nonproduct')) }}"}, "namespace": null}}, "test.orderly.accepted_values_silver_orders_nonproduct_record_type__NON_PRODUCT.7466a51c96": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "accepted_values_silver_orders_nonproduct_record_type__NON_PRODUCT", "resource_type": "test", "package_name": "orderly", "path": "accepted_values_silver_orders__eb0067c69ab70b663884bd6d4e464d00.sql", "original_file_path": "models\\silver\\schema.yml", "unique_id": "test.orderly.accepted_values_silver_orders_nonproduct_record_type__NON_PRODUCT.7466a51c96", "fqn": ["orderly", "silver", "accepted_values_silver_orders_nonproduct_record_type__NON_PRODUCT"], "alias": "accepted_values_silver_orders__eb0067c69ab70b663884bd6d4e464d00", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_silver_orders__eb0067c69ab70b663884bd6d4e464d00", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_silver_orders__eb0067c69ab70b663884bd6d4e464d00"}, "created_at": 1754795766.4188871, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_silver_orders__eb0067c69ab70b663884bd6d4e464d00\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "silver_orders_nonproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.silver_orders_nonproduct"]}, "compiled_path": "target\\compiled\\orderly\\models\\silver\\schema.yml\\accepted_values_silver_orders__eb0067c69ab70b663884bd6d4e464d00.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        record_type as value_field,\n        count(*) as n_records\n\n    from \"orderly\".\"dev_silver\".\"silver_orders_nonproduct\"\n    group by record_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'NON_PRODUCT'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "record_type", "file_key_name": "models.silver_orders_nonproduct", "attached_node": "model.orderly.silver_orders_nonproduct", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["NON_PRODUCT"], "column_name": "record_type", "model": "{{ get_where_subquery(ref('silver_orders_nonproduct')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_orders_order_id.81cfe2fe64": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_orders_order_id", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_orders_order_id.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_orders_order_id.81cfe2fe64", "fqn": ["orderly", "staging", "not_null_stg_orders_order_id"], "alias": "not_null_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4244478, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"orderly\".\"dev_staging\".\"stg_orders\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_orders", "attached_node": "model.orderly.stg_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_orders_line_number.a3c5759041": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_orders_line_number", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_orders_line_number.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_orders_line_number.a3c5759041", "fqn": ["orderly", "staging", "not_null_stg_orders_line_number"], "alias": "not_null_stg_orders_line_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.425103, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_orders_line_number.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_number\nfrom \"orderly\".\"dev_staging\".\"stg_orders\"\nwhere line_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_number", "file_key_name": "models.stg_orders", "attached_node": "model.orderly.stg_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_number", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_orders_order_date.2177a3e8bb": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_orders_order_date", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_orders_order_date.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_orders_order_date.2177a3e8bb", "fqn": ["orderly", "staging", "not_null_stg_orders_order_date"], "alias": "not_null_stg_orders_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4257255, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_orders_order_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom \"orderly\".\"dev_staging\".\"stg_orders\"\nwhere order_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.stg_orders", "attached_node": "model.orderly.stg_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_orders_source_filename.e6efa88729": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_orders_source_filename", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_orders_source_filename.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_orders_source_filename.e6efa88729", "fqn": ["orderly", "staging", "not_null_stg_orders_source_filename"], "alias": "not_null_stg_orders_source_filename", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4263356, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_orders_source_filename.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect source_filename\nfrom \"orderly\".\"dev_staging\".\"stg_orders\"\nwhere source_filename is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "source_filename", "file_key_name": "models.stg_orders", "attached_node": "model.orderly.stg_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "source_filename", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_orders_created_timestamp.43243a2aa3": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_orders_created_timestamp", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_orders_created_timestamp.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_orders_created_timestamp.43243a2aa3", "fqn": ["orderly", "staging", "not_null_stg_orders_created_timestamp"], "alias": "not_null_stg_orders_created_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4269454, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_orders_created_timestamp.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_timestamp\nfrom \"orderly\".\"dev_staging\".\"stg_orders\"\nwhere created_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_timestamp", "file_key_name": "models.stg_orders", "attached_node": "model.orderly.stg_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_timestamp", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_orders_non_product_hint.d5fa25adb5": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_orders_non_product_hint", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_orders_non_product_hint.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_orders_non_product_hint.d5fa25adb5", "fqn": ["orderly", "staging", "not_null_stg_orders_non_product_hint"], "alias": "not_null_stg_orders_non_product_hint", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4275477, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_orders_non_product_hint.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect non_product_hint\nfrom \"orderly\".\"dev_staging\".\"stg_orders\"\nwhere non_product_hint is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "non_product_hint", "file_key_name": "models.stg_orders", "attached_node": "model.orderly.stg_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "non_product_hint", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.orderly.accepted_values_stg_orders_non_product_hint__True__False.a0dbc2359c": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "accepted_values_stg_orders_non_product_hint__True__False", "resource_type": "test", "package_name": "orderly", "path": "accepted_values_stg_orders_non_product_hint__True__False.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.accepted_values_stg_orders_non_product_hint__True__False.a0dbc2359c", "fqn": ["orderly", "staging", "accepted_values_stg_orders_non_product_hint__True__False"], "alias": "accepted_values_stg_orders_non_product_hint__True__False", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.428156, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\accepted_values_stg_orders_non_product_hint__True__False.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        non_product_hint as value_field,\n        count(*) as n_records\n\n    from \"orderly\".\"dev_staging\".\"stg_orders\"\n    group by non_product_hint\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'True','False'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "non_product_hint", "file_key_name": "models.stg_orders", "attached_node": "model.orderly.stg_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "column_name": "non_product_hint", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_orders_line_uid.6ffdc1f9a0": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_orders_line_uid", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_orders_line_uid.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_orders_line_uid.6ffdc1f9a0", "fqn": ["orderly", "staging", "not_null_stg_orders_line_uid"], "alias": "not_null_stg_orders_line_uid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.429815, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_orders_line_uid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_uid\nfrom \"orderly\".\"dev_staging\".\"stg_orders\"\nwhere line_uid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_uid", "file_key_name": "models.stg_orders", "attached_node": "model.orderly.stg_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_uid", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.orderly.unique_stg_orders_line_uid.b6d5c10ab2": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_stg_orders_line_uid", "resource_type": "test", "package_name": "orderly", "path": "unique_stg_orders_line_uid.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.unique_stg_orders_line_uid.b6d5c10ab2", "fqn": ["orderly", "staging", "unique_stg_orders_line_uid"], "alias": "unique_stg_orders_line_uid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4304266, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\unique_stg_orders_line_uid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    line_uid as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_staging\".\"stg_orders\"\nwhere line_uid is not null\ngroup by line_uid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_uid", "file_key_name": "models.stg_orders", "attached_node": "model.orderly.stg_orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "line_uid", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.orderly.assert_rowcount_stg_orders_.a31a6802f6": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "assert_rowcount_stg_orders_", "resource_type": "test", "package_name": "orderly", "path": "assert_rowcount_stg_orders_.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.assert_rowcount_stg_orders_.a31a6802f6", "fqn": ["orderly", "staging", "assert_rowcount_stg_orders_"], "alias": "assert_rowcount_stg_orders_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.431041, "relation_name": null, "raw_code": "{{ test_assert_rowcount(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.orderly.test_assert_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\assert_rowcount_stg_orders_.sql", "compiled": true, "compiled_code": "\n  -- Custom test to ensure table has at least one row\n  -- Fails if rowcount is 0\n  SELECT count(*) as row_count\n  FROM \"orderly\".\"dev_staging\".\"stg_orders\"\n  HAVING count(*) = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_orders", "attached_node": "model.orderly.stg_orders", "test_metadata": {"name": "assert_rowcount", "kwargs": {"model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_exchange_rates_date.da1c3d5d11": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_exchange_rates_date", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_exchange_rates_date.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_exchange_rates_date.da1c3d5d11", "fqn": ["orderly", "staging", "not_null_stg_exchange_rates_date"], "alias": "not_null_stg_exchange_rates_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4376667, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_exchange_rates_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"orderly\".\"dev_staging\".\"stg_exchange_rates\"\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.stg_exchange_rates", "attached_node": "model.orderly.stg_exchange_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_exchange_rates_from_currency.8ceb6b41c7": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_exchange_rates_from_currency", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_exchange_rates_from_currency.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_exchange_rates_from_currency.8ceb6b41c7", "fqn": ["orderly", "staging", "not_null_stg_exchange_rates_from_currency"], "alias": "not_null_stg_exchange_rates_from_currency", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4382572, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_exchange_rates_from_currency.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect from_currency\nfrom \"orderly\".\"dev_staging\".\"stg_exchange_rates\"\nwhere from_currency is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "from_currency", "file_key_name": "models.stg_exchange_rates", "attached_node": "model.orderly.stg_exchange_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_currency", "model": "{{ get_where_subquery(ref('stg_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.accepted_values_stg_exchange_rates_from_currency__USD.1af9258c1c": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "accepted_values_stg_exchange_rates_from_currency__USD", "resource_type": "test", "package_name": "orderly", "path": "accepted_values_stg_exchange_rates_from_currency__USD.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.accepted_values_stg_exchange_rates_from_currency__USD.1af9258c1c", "fqn": ["orderly", "staging", "accepted_values_stg_exchange_rates_from_currency__USD"], "alias": "accepted_values_stg_exchange_rates_from_currency__USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4388688, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\accepted_values_stg_exchange_rates_from_currency__USD.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        from_currency as value_field,\n        count(*) as n_records\n\n    from \"orderly\".\"dev_staging\".\"stg_exchange_rates\"\n    group by from_currency\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'USD'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "from_currency", "file_key_name": "models.stg_exchange_rates", "attached_node": "model.orderly.stg_exchange_rates", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["USD"], "column_name": "from_currency", "model": "{{ get_where_subquery(ref('stg_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_exchange_rates_to_currency.a37474ed90": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_exchange_rates_to_currency", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_exchange_rates_to_currency.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_exchange_rates_to_currency.a37474ed90", "fqn": ["orderly", "staging", "not_null_stg_exchange_rates_to_currency"], "alias": "not_null_stg_exchange_rates_to_currency", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.440682, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_exchange_rates_to_currency.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect to_currency\nfrom \"orderly\".\"dev_staging\".\"stg_exchange_rates\"\nwhere to_currency is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "to_currency", "file_key_name": "models.stg_exchange_rates", "attached_node": "model.orderly.stg_exchange_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_currency", "model": "{{ get_where_subquery(ref('stg_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.accepted_values_stg_exchange_rates_to_currency__AUD.5fdcfcd85e": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "accepted_values_stg_exchange_rates_to_currency__AUD", "resource_type": "test", "package_name": "orderly", "path": "accepted_values_stg_exchange_rates_to_currency__AUD.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.accepted_values_stg_exchange_rates_to_currency__AUD.5fdcfcd85e", "fqn": ["orderly", "staging", "accepted_values_stg_exchange_rates_to_currency__AUD"], "alias": "accepted_values_stg_exchange_rates_to_currency__AUD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4413056, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\accepted_values_stg_exchange_rates_to_currency__AUD.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        to_currency as value_field,\n        count(*) as n_records\n\n    from \"orderly\".\"dev_staging\".\"stg_exchange_rates\"\n    group by to_currency\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'AUD'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "to_currency", "file_key_name": "models.stg_exchange_rates", "attached_node": "model.orderly.stg_exchange_rates", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["AUD"], "column_name": "to_currency", "model": "{{ get_where_subquery(ref('stg_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_exchange_rates_exchange_rate.f785873422": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_exchange_rates_exchange_rate", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_exchange_rates_exchange_rate.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_exchange_rates_exchange_rate.f785873422", "fqn": ["orderly", "staging", "not_null_stg_exchange_rates_exchange_rate"], "alias": "not_null_stg_exchange_rates_exchange_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.4429333, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_exchange_rates_exchange_rate.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect exchange_rate\nfrom \"orderly\".\"dev_staging\".\"stg_exchange_rates\"\nwhere exchange_rate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exchange_rate", "file_key_name": "models.stg_exchange_rates", "attached_node": "model.orderly.stg_exchange_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "exchange_rate", "model": "{{ get_where_subquery(ref('stg_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_exchange_rates_rate_source.1b9c688f61": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_exchange_rates_rate_source", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_exchange_rates_rate_source.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_exchange_rates_rate_source.1b9c688f61", "fqn": ["orderly", "staging", "not_null_stg_exchange_rates_rate_source"], "alias": "not_null_stg_exchange_rates_rate_source", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754795766.443558, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_exchange_rates_rate_source.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rate_source\nfrom \"orderly\".\"dev_staging\".\"stg_exchange_rates\"\nwhere rate_source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rate_source", "file_key_name": "models.stg_exchange_rates", "attached_node": "model.orderly.stg_exchange_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "rate_source", "model": "{{ get_where_subquery(ref('stg_exchange_rates')) }}"}, "namespace": null}}, "test.orderly.accepted_values_stg_exchange_rates_rate_source__SOURCE__CALCULATED__INTERPOLATED__FORWARD_FILLED.e4c74b18a9": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "accepted_values_stg_exchange_rates_rate_source__SOURCE__CALCULATED__INTERPOLATED__FORWARD_FILLED", "resource_type": "test", "package_name": "orderly", "path": "accepted_values_stg_exchange_r_24e2d2b0bebe4b193d70573d03d1e7c9.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.accepted_values_stg_exchange_rates_rate_source__SOURCE__CALCULATED__INTERPOLATED__FORWARD_FILLED.e4c74b18a9", "fqn": ["orderly", "staging", "accepted_values_stg_exchange_rates_rate_source__SOURCE__CALCULATED__INTERPOLATED__FORWARD_FILLED"], "alias": "accepted_values_stg_exchange_r_24e2d2b0bebe4b193d70573d03d1e7c9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_exchange_r_24e2d2b0bebe4b193d70573d03d1e7c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_stg_exchange_r_24e2d2b0bebe4b193d70573d03d1e7c9"}, "created_at": 1754795766.4441826, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_exchange_r_24e2d2b0bebe4b193d70573d03d1e7c9\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_exchange_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_exchange_rates"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\accepted_values_stg_exchange_r_24e2d2b0bebe4b193d70573d03d1e7c9.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        rate_source as value_field,\n        count(*) as n_records\n\n    from \"orderly\".\"dev_staging\".\"stg_exchange_rates\"\n    group by rate_source\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'SOURCE','CALCULATED','INTERPOLATED','FORWARD_FILLED'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rate_source", "file_key_name": "models.stg_exchange_rates", "attached_node": "model.orderly.stg_exchange_rates", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["SOURCE", "CALCULATED", "INTERPOLATED", "FORWARD_FILLED"], "column_name": "rate_source", "model": "{{ get_where_subquery(ref('stg_exchange_rates')) }}"}, "namespace": null}}, "model.orderly.stg_orders_fuzz_scores": {"database": "orderly", "schema": "dev_staging", "name": "stg_orders_fuzz_scores", "resource_type": "model", "package_name": "orderly", "path": "staging\\stg_orders_fuzz_scores.py", "original_file_path": "models\\staging\\stg_orders_fuzz_scores.py", "unique_id": "model.orderly.stg_orders_fuzz_scores", "fqn": ["orderly", "staging", "stg_orders_fuzz_scores"], "alias": "stg_orders_fuzz_scores", "checksum": {"name": "sha256", "checksum": "f4ac7ebba1b936b2d43c20a05743ed9db3f613c67c6b331b9962d429601c8e2c"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["layer:staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:staging"], "description": "Staging fuzzy matching scores between order descriptions/seed SKU names and vendor brands/vendor master", "columns": {"line_uid": {"name": "line_uid", "description": "Unique identifier for each order line", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sku_id": {"name": "sku_id", "description": "Product SKU identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fuzz_score": {"name": "fuzz_score", "description": "Fuzzy matching score (0-1) between order description and seed name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_description": {"name": "order_description", "description": "Cleaned order item description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "seed_name": {"name": "seed_name", "description": "Canonical SKU name from seed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_brand_original": {"name": "vendor_brand_original", "description": "Original vendor brand from order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "matched_vendor_id": {"name": "matched_vendor_id", "description": "Matched vendor ID (null if score \u2264 0.8)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "matched_vendor_name": {"name": "matched_vendor_name", "description": "Matched vendor name (null if score \u2264 0.8)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_fuzz_score": {"name": "vendor_fuzz_score", "description": "Vendor fuzzy matching score (0-1) using QRatio", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "orderly://models\\staging\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "staging", "tags": ["layer:staging"]}, "created_at": 1754796356.7071059, "relation_name": "\"orderly\".\"dev_staging\".\"stg_orders_fuzz_scores\"", "raw_code": "import pandas as pd\r\nfrom rapidfuzz import fuzz\r\nfrom rapidfuzz import process\r\n\r\n\r\ndef model(dbt, session):\r\n    \"\"\"\r\n    Compute fuzzy scores between:\r\n    1. Order line item descriptions and seed SKU names\r\n    2. Vendor brands and silver vendor master names\r\n    Only processes lines that have matching SKU IDs in the seed.\r\n    \"\"\"\r\n    \r\n    # Load data from dbt refs \r\n    stg_orders_df = dbt.ref(\"stg_orders\").to_df()\r\n    \r\n    # Load seed data directly using session - the seed table is in dev_seeds schema\r\n    ref_sku_names_df = session.execute(\"SELECT * FROM dev_seeds.ref_sku_names\").fetchdf()\r\n    \r\n    # Load vendor master data from bronze layer\r\n    bronze_vendor_master_df = dbt.ref(\"raw_vendor_master\").to_df()\r\n    \r\n    # Keep only rows that have a SKU match to compare against seed\r\n    merged_df = stg_orders_df.merge(\r\n        ref_sku_names_df,\r\n        left_on=\"sku_id\",\r\n        right_on=\"sku_id\",\r\n        how=\"inner\"\r\n    )\r\n    \r\n    def normalize_text(text):\r\n        \"\"\"Normalize text for comparison.\"\"\"\r\n        if not isinstance(text, str) or text is None:\r\n            return \"\"\r\n        return \" \".join(text.lower().split())\r\n    \r\n    # Direct abbreviation mapping (case-sensitive)\r\n    ABBREV_VENDOR_MAP = {\r\n        \"VM\": \"ViewMaster Corporation\",\r\n        \"CP\": \"ConnectPro Corporation\",\r\n        \"DV\": \"DataVault Corporation\",\r\n        \"TF\": \"TechFlow Corporation\",\r\n        \"PC\": \"ProConnect Corporation\",\r\n        \"OL\": \"OfficeLink Corporation\",\r\n    }\r\n    # Reverse map for fast lookup of vendor_id\r\n    VENDOR_NAME_TO_ID = {\r\n        normalize_text(row['vendor_name']): row['vendor_id']\r\n        for _, row in bronze_vendor_master_df.iterrows()\r\n    }\r\n\r\n    def find_best_vendor_match(vendor_brand, vendor_master_df):\r\n        \"\"\"Find the best vendor match using abbreviation or fuzzy match.\"\"\"\r\n        if not isinstance(vendor_brand, str) or not vendor_brand.strip():\r\n            return None, None, 0.0\r\n\r\n        # Check for abbreviation direct mapping (case-sensitive)\r\n        if vendor_brand in ABBREV_VENDOR_MAP:\r\n            mapped_name = ABBREV_VENDOR_MAP[vendor_brand]\r\n            normalized_mapped = normalize_text(mapped_name)\r\n            vendor_id = VENDOR_NAME_TO_ID.get(normalized_mapped)\r\n            return vendor_id, mapped_name, 1.0\r\n\r\n        normalized_brand = normalize_text(vendor_brand)\r\n        best_score = 0.0\r\n        best_match_id = None\r\n        best_match_name = None\r\n\r\n        # Prepare list of normalized vendor names\r\n        vendor_names = vendor_master_df['vendor_name'].fillna(\"\").astype(str).apply(normalize_text).tolist()\r\n        # Use RapidFuzz's extractOne for efficient best match\r\n        match = process.extractOne(\r\n            normalized_brand,\r\n            vendor_names,\r\n            scorer=fuzz.partial_token_set_ratio,\r\n            score_cutoff=0  # We'll check threshold later\r\n        )\r\n        if match:\r\n            best_score = match[1] / 100.0\r\n            best_match_idx = match[2]\r\n            best_match_id = vendor_master_df.iloc[best_match_idx]['vendor_id']\r\n            best_match_name = vendor_master_df.iloc[best_match_idx]['vendor_name']\r\n\r\n        # Only return match if score >= 0.6\r\n        if best_score >= 0.6:\r\n            return best_match_id, best_match_name, best_score\r\n        else:\r\n            return None, None, best_score\r\n    \r\n    # Calculate SKU description fuzzy scores using partial_token_ratio\r\n    sku_scores = []\r\n    for order_desc, seed_name in zip(\r\n        merged_df[\"item_description_cleaned\"].fillna(\"\"),\r\n        merged_df[\"canonical_name\"].fillna(\"\")\r\n    ):\r\n        normalized_order = normalize_text(order_desc)\r\n        normalized_seed = normalize_text(seed_name)\r\n        \r\n        # RapidFuzz partial_token_ratio returns 0-100, convert to 0-1\r\n        score = fuzz.partial_token_ratio(normalized_order, normalized_seed) / 100.0\r\n        sku_scores.append(score)\r\n    \r\n    # Calculate vendor brand matches\r\n    vendor_matches = []\r\n    vendor_scores = []\r\n    vendor_names = []\r\n    \r\n    for vendor_brand in merged_df[\"vendor_brand\"].fillna(\"\"):\r\n        vendor_id, vendor_name, score = find_best_vendor_match(vendor_brand, bronze_vendor_master_df)\r\n        vendor_matches.append(vendor_id)\r\n        vendor_names.append(vendor_name)\r\n        vendor_scores.append(score)\r\n    \r\n    # Create output DataFrame\r\n    result_df = pd.DataFrame({\r\n        \"line_uid\": merged_df[\"line_uid\"],\r\n        \"sku_id\": merged_df[\"sku_id\"],\r\n        \"order_description\": merged_df[\"item_description_cleaned\"],\r\n        \"seed_name\": merged_df[\"canonical_name\"],\r\n        \"fuzz_score\": sku_scores,\r\n        \"vendor_brand_original\": merged_df[\"vendor_brand\"],\r\n        \"matched_vendor_id\": [str(v) if v is not None else None for v in vendor_matches],  # Ensure string type\r\n        \"matched_vendor_name\": vendor_names,\r\n        \"vendor_fuzz_score\": vendor_scores\r\n    })\r\n    \r\n    return result_df", "doc_blocks": [], "language": "python", "refs": [{"name": "stg_orders", "package": null, "version": null}, {"name": "raw_vendor_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.orderly.stg_orders", "model.orderly.raw_vendor_master"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\stg_orders_fuzz_scores.py", "compiled": true, "compiled_code": "import pandas as pd\r\nfrom rapidfuzz import fuzz\r\nfrom rapidfuzz import process\r\n\r\n\r\ndef model(dbt, session):\r\n    \"\"\"\r\n    Compute fuzzy scores between:\r\n    1. Order line item descriptions and seed SKU names\r\n    2. Vendor brands and silver vendor master names\r\n    Only processes lines that have matching SKU IDs in the seed.\r\n    \"\"\"\r\n    \r\n    # Load data from dbt refs \r\n    stg_orders_df = dbt.ref(\"stg_orders\").to_df()\r\n    \r\n    # Load seed data directly using session - the seed table is in dev_seeds schema\r\n    ref_sku_names_df = session.execute(\"SELECT * FROM dev_seeds.ref_sku_names\").fetchdf()\r\n    \r\n    # Load vendor master data from bronze layer\r\n    bronze_vendor_master_df = dbt.ref(\"raw_vendor_master\").to_df()\r\n    \r\n    # Keep only rows that have a SKU match to compare against seed\r\n    merged_df = stg_orders_df.merge(\r\n        ref_sku_names_df,\r\n        left_on=\"sku_id\",\r\n        right_on=\"sku_id\",\r\n        how=\"inner\"\r\n    )\r\n    \r\n    def normalize_text(text):\r\n        \"\"\"Normalize text for comparison.\"\"\"\r\n        if not isinstance(text, str) or text is None:\r\n            return \"\"\r\n        return \" \".join(text.lower().split())\r\n    \r\n    # Direct abbreviation mapping (case-sensitive)\r\n    ABBREV_VENDOR_MAP = {\r\n        \"VM\": \"ViewMaster Corporation\",\r\n        \"CP\": \"ConnectPro Corporation\",\r\n        \"DV\": \"DataVault Corporation\",\r\n        \"TF\": \"TechFlow Corporation\",\r\n        \"PC\": \"ProConnect Corporation\",\r\n        \"OL\": \"OfficeLink Corporation\",\r\n    }\r\n    # Reverse map for fast lookup of vendor_id\r\n    VENDOR_NAME_TO_ID = {\r\n        normalize_text(row['vendor_name']): row['vendor_id']\r\n        for _, row in bronze_vendor_master_df.iterrows()\r\n    }\r\n\r\n    def find_best_vendor_match(vendor_brand, vendor_master_df):\r\n        \"\"\"Find the best vendor match using abbreviation or fuzzy match.\"\"\"\r\n        if not isinstance(vendor_brand, str) or not vendor_brand.strip():\r\n            return None, None, 0.0\r\n\r\n        # Check for abbreviation direct mapping (case-sensitive)\r\n        if vendor_brand in ABBREV_VENDOR_MAP:\r\n            mapped_name = ABBREV_VENDOR_MAP[vendor_brand]\r\n            normalized_mapped = normalize_text(mapped_name)\r\n            vendor_id = VENDOR_NAME_TO_ID.get(normalized_mapped)\r\n            return vendor_id, mapped_name, 1.0\r\n\r\n        normalized_brand = normalize_text(vendor_brand)\r\n        best_score = 0.0\r\n        best_match_id = None\r\n        best_match_name = None\r\n\r\n        # Prepare list of normalized vendor names\r\n        vendor_names = vendor_master_df['vendor_name'].fillna(\"\").astype(str).apply(normalize_text).tolist()\r\n        # Use RapidFuzz's extractOne for efficient best match\r\n        match = process.extractOne(\r\n            normalized_brand,\r\n            vendor_names,\r\n            scorer=fuzz.partial_token_set_ratio,\r\n            score_cutoff=0  # We'll check threshold later\r\n        )\r\n        if match:\r\n            best_score = match[1] / 100.0\r\n            best_match_idx = match[2]\r\n            best_match_id = vendor_master_df.iloc[best_match_idx]['vendor_id']\r\n            best_match_name = vendor_master_df.iloc[best_match_idx]['vendor_name']\r\n\r\n        # Only return match if score >= 0.6\r\n        if best_score >= 0.6:\r\n            return best_match_id, best_match_name, best_score\r\n        else:\r\n            return None, None, best_score\r\n    \r\n    # Calculate SKU description fuzzy scores using partial_token_ratio\r\n    sku_scores = []\r\n    for order_desc, seed_name in zip(\r\n        merged_df[\"item_description_cleaned\"].fillna(\"\"),\r\n        merged_df[\"canonical_name\"].fillna(\"\")\r\n    ):\r\n        normalized_order = normalize_text(order_desc)\r\n        normalized_seed = normalize_text(seed_name)\r\n        \r\n        # RapidFuzz partial_token_ratio returns 0-100, convert to 0-1\r\n        score = fuzz.partial_token_ratio(normalized_order, normalized_seed) / 100.0\r\n        sku_scores.append(score)\r\n    \r\n    # Calculate vendor brand matches\r\n    vendor_matches = []\r\n    vendor_scores = []\r\n    vendor_names = []\r\n    \r\n    for vendor_brand in merged_df[\"vendor_brand\"].fillna(\"\"):\r\n        vendor_id, vendor_name, score = find_best_vendor_match(vendor_brand, bronze_vendor_master_df)\r\n        vendor_matches.append(vendor_id)\r\n        vendor_names.append(vendor_name)\r\n        vendor_scores.append(score)\r\n    \r\n    # Create output DataFrame\r\n    result_df = pd.DataFrame({\r\n        \"line_uid\": merged_df[\"line_uid\"],\r\n        \"sku_id\": merged_df[\"sku_id\"],\r\n        \"order_description\": merged_df[\"item_description_cleaned\"],\r\n        \"seed_name\": merged_df[\"canonical_name\"],\r\n        \"fuzz_score\": sku_scores,\r\n        \"vendor_brand_original\": merged_df[\"vendor_brand\"],\r\n        \"matched_vendor_id\": [str(v) if v is not None else None for v in vendor_matches],  # Ensure string type\r\n        \"matched_vendor_name\": vendor_names,\r\n        \"vendor_fuzz_score\": vendor_scores\r\n    })\r\n    \r\n    return result_df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"raw_vendor_master\": \"\\\"orderly\\\".\\\"dev_bronze\\\".\\\"raw_vendor_master\\\"\", \"stg_orders\": \"\\\"orderly\\\".\\\"dev_staging\\\".\\\"stg_orders\\\"\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"orderly\"\n    schema = \"dev_staging\"\n    identifier = \"stg_orders_fuzz_scores\"\n    \n    def __repr__(self):\n        return '\"orderly\".\"dev_staging\".\"stg_orders_fuzz_scores\"'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "test.orderly.not_null_stg_orders_fuzz_scores_line_uid.8ef17e14fa": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_orders_fuzz_scores_line_uid", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_orders_fuzz_scores_line_uid.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_orders_fuzz_scores_line_uid.8ef17e14fa", "fqn": ["orderly", "staging", "not_null_stg_orders_fuzz_scores_line_uid"], "alias": "not_null_stg_orders_fuzz_scores_line_uid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754796356.7472594, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders_fuzz_scores", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders_fuzz_scores"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_orders_fuzz_scores_line_uid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_uid\nfrom \"orderly\".\"dev_staging\".\"stg_orders_fuzz_scores\"\nwhere line_uid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_uid", "file_key_name": "models.stg_orders_fuzz_scores", "attached_node": "model.orderly.stg_orders_fuzz_scores", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_uid", "model": "{{ get_where_subquery(ref('stg_orders_fuzz_scores')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_orders_fuzz_scores_fuzz_score.035db26ed9": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_orders_fuzz_scores_fuzz_score", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_orders_fuzz_scores_fuzz_score.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_orders_fuzz_scores_fuzz_score.035db26ed9", "fqn": ["orderly", "staging", "not_null_stg_orders_fuzz_scores_fuzz_score"], "alias": "not_null_stg_orders_fuzz_scores_fuzz_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754796356.7480738, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders_fuzz_scores", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders_fuzz_scores"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_orders_fuzz_scores_fuzz_score.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fuzz_score\nfrom \"orderly\".\"dev_staging\".\"stg_orders_fuzz_scores\"\nwhere fuzz_score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fuzz_score", "file_key_name": "models.stg_orders_fuzz_scores", "attached_node": "model.orderly.stg_orders_fuzz_scores", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fuzz_score", "model": "{{ get_where_subquery(ref('stg_orders_fuzz_scores')) }}"}, "namespace": null}}, "model.orderly.stg_orders_with_flags": {"database": "orderly", "schema": "dev_staging", "name": "stg_orders_with_flags", "resource_type": "model", "package_name": "orderly", "path": "staging\\stg_orders_with_flags.sql", "original_file_path": "models\\staging\\stg_orders_with_flags.sql", "unique_id": "model.orderly.stg_orders_with_flags", "fqn": ["orderly", "staging", "stg_orders_with_flags"], "alias": "stg_orders_with_flags", "checksum": {"name": "sha256", "checksum": "6685fec58a820bc68421504e6078159d81603e298b75aab2bfc63b048ca51cf2"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["layer:staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["layer:staging"], "description": "Staging - Orders with quality flags for SKU lookup, name matching, and vendor matching issues", "columns": {"line_uid": {"name": "line_uid", "description": "Unique identifier for each order line", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sku_id": {"name": "sku_id", "description": "Product SKU identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "flag_missing_in_seed": {"name": "flag_missing_in_seed", "description": "True if SKU appears in orders but not in seed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "flag_name_mismatch": {"name": "flag_name_mismatch", "description": "True if fuzzy match score < 0.8", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "flag_vendor_mismatch": {"name": "flag_vendor_mismatch", "description": "True if vendor brand exists but no good match found (score \u2264 0.8)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "has_quality_issues": {"name": "has_quality_issues", "description": "True if any quality flags are raised", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_brand_original": {"name": "vendor_brand_original", "description": "Original vendor brand from order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "matched_vendor_id": {"name": "matched_vendor_id", "description": "Matched vendor ID from vendor master (null if score \u2264 0.8)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "matched_vendor_name": {"name": "matched_vendor_name", "description": "Matched vendor name from vendor master (null if score \u2264 0.8)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vendor_fuzz_score": {"name": "vendor_fuzz_score", "description": "Vendor fuzzy matching score (0-1)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "orderly://models\\staging\\schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "staging", "tags": ["layer:staging"]}, "created_at": 1754796494.360393, "relation_name": "\"orderly\".\"dev_staging\".\"stg_orders_with_flags\"", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Staging orders with quality flags for SKU lookup, name matching, and vendor matching issues\r\nwith \r\nstaged_orders as (\r\n    select * from {{ ref('stg_orders') }}\r\n),\r\n\r\nref_sku_names as (\r\n    select * from {{ ref('ref_sku_names') }}\r\n),\r\n\r\nfuzz_scores as (\r\n    select * from {{ ref('stg_orders_fuzz_scores') }}\r\n),\r\n\r\n-- Flag 1: SKU appears in bronze/staged orders but not in seed\r\nmissing_in_seed as (\r\n    select distinct so.line_uid\r\n    from staged_orders so\r\n    left join ref_sku_names rsn on rsn.sku_id = so.sku_id\r\n    where rsn.sku_id is null\r\n),\r\n\r\n-- Combine all flags\r\nflagged_orders as (\r\n    select \r\n        so.*,\r\n        \r\n        -- Flag 1: Missing in seed\r\n        case \r\n            when mis.line_uid is not null then true \r\n            else false \r\n        end as flag_missing_in_seed,\r\n        \r\n        -- Flag 2: Name mismatch (fuzzy score < 0.8)\r\n        fs.fuzz_score,\r\n        fs.order_description as compared_order_desc,\r\n        fs.seed_name as compared_seed_name,\r\n        case \r\n            when fs.fuzz_score is not null and fs.fuzz_score < 0.8 then true \r\n            else false \r\n        end as flag_name_mismatch,\r\n        \r\n        -- Vendor matching details\r\n        fs.vendor_brand_original,\r\n        fs.matched_vendor_id,\r\n        fs.matched_vendor_name,\r\n        fs.vendor_fuzz_score,\r\n        case \r\n            when fs.matched_vendor_id is null or fs.matched_vendor_id = '' \r\n            then true \r\n            else false \r\n        end as flag_vendor_mismatch,\r\n        \r\n        -- Overall quality flag\r\n        case \r\n            when (mis.line_uid is not null) \r\n                or (fs.fuzz_score is not null and fs.fuzz_score < 0.8)\r\n                or (fs.vendor_brand_original is not null \r\n                    and trim(fs.vendor_brand_original) != '' \r\n                    and fs.matched_vendor_id is null)\r\n            then true \r\n            else false \r\n        end as has_quality_issues\r\n        \r\n    from staged_orders so\r\n    left join missing_in_seed mis on mis.line_uid = so.line_uid\r\n    left join fuzz_scores fs on fs.line_uid = so.line_uid\r\n)\r\n\r\nselect \r\n    order_id,\r\n    line_number,\r\n    sku_id,\r\n    item_description_original,\r\n    item_description_cleaned,\r\n    quantity,\r\n    unit_price,\r\n    currency,\r\n    vendor_brand,\r\n    cost_centre_id,\r\n    country_code,\r\n    requisitioner,\r\n    approval_status,\r\n    delivery_date,\r\n    order_date,\r\n    source_filename,\r\n    created_timestamp,\r\n    non_product_hint,\r\n    line_uid,\r\n    \r\n    -- Quality flags\r\n    flag_missing_in_seed,\r\n    flag_name_mismatch,\r\n    flag_vendor_mismatch,\r\n    has_quality_issues,\r\n    \r\n    -- Fuzzy comparison details (for debugging/analysis)\r\n    fuzz_score,\r\n    compared_order_desc,\r\n    compared_seed_name,\r\n    \r\n    -- Vendor matching details\r\n    vendor_brand_original,\r\n    matched_vendor_id,\r\n    matched_vendor_name,\r\n    vendor_fuzz_score\r\n    \r\nfrom flagged_orders", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}, {"name": "ref_sku_names", "package": null, "version": null}, {"name": "stg_orders_fuzz_scores", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.orderly.stg_orders", "seed.orderly.ref_sku_names", "model.orderly.stg_orders_fuzz_scores"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\stg_orders_with_flags.sql", "compiled": true, "compiled_code": "\n\n-- Staging orders with quality flags for SKU lookup, name matching, and vendor matching issues\nwith \nstaged_orders as (\n    select * from \"orderly\".\"dev_staging\".\"stg_orders\"\n),\n\nref_sku_names as (\n    select * from \"orderly\".\"dev_seeds\".\"ref_sku_names\"\n),\n\nfuzz_scores as (\n    select * from \"orderly\".\"dev_staging\".\"stg_orders_fuzz_scores\"\n),\n\n-- Flag 1: SKU appears in bronze/staged orders but not in seed\nmissing_in_seed as (\n    select distinct so.line_uid\n    from staged_orders so\n    left join ref_sku_names rsn on rsn.sku_id = so.sku_id\n    where rsn.sku_id is null\n),\n\n-- Combine all flags\nflagged_orders as (\n    select \n        so.*,\n        \n        -- Flag 1: Missing in seed\n        case \n            when mis.line_uid is not null then true \n            else false \n        end as flag_missing_in_seed,\n        \n        -- Flag 2: Name mismatch (fuzzy score < 0.8)\n        fs.fuzz_score,\n        fs.order_description as compared_order_desc,\n        fs.seed_name as compared_seed_name,\n        case \n            when fs.fuzz_score is not null and fs.fuzz_score < 0.8 then true \n            else false \n        end as flag_name_mismatch,\n        \n        -- Vendor matching details\n        fs.vendor_brand_original,\n        fs.matched_vendor_id,\n        fs.matched_vendor_name,\n        fs.vendor_fuzz_score,\n        case \n            when fs.matched_vendor_id is null or fs.matched_vendor_id = '' \n            then true \n            else false \n        end as flag_vendor_mismatch,\n        \n        -- Overall quality flag\n        case \n            when (mis.line_uid is not null) \n                or (fs.fuzz_score is not null and fs.fuzz_score < 0.8)\n                or (fs.vendor_brand_original is not null \n                    and trim(fs.vendor_brand_original) != '' \n                    and fs.matched_vendor_id is null)\n            then true \n            else false \n        end as has_quality_issues\n        \n    from staged_orders so\n    left join missing_in_seed mis on mis.line_uid = so.line_uid\n    left join fuzz_scores fs on fs.line_uid = so.line_uid\n)\n\nselect \n    order_id,\n    line_number,\n    sku_id,\n    item_description_original,\n    item_description_cleaned,\n    quantity,\n    unit_price,\n    currency,\n    vendor_brand,\n    cost_centre_id,\n    country_code,\n    requisitioner,\n    approval_status,\n    delivery_date,\n    order_date,\n    source_filename,\n    created_timestamp,\n    non_product_hint,\n    line_uid,\n    \n    -- Quality flags\n    flag_missing_in_seed,\n    flag_name_mismatch,\n    flag_vendor_mismatch,\n    has_quality_issues,\n    \n    -- Fuzzy comparison details (for debugging/analysis)\n    fuzz_score,\n    compared_order_desc,\n    compared_seed_name,\n    \n    -- Vendor matching details\n    vendor_brand_original,\n    matched_vendor_id,\n    matched_vendor_name,\n    vendor_fuzz_score\n    \nfrom flagged_orders", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["line_uid"], "time_spine": null}, "test.orderly.not_null_stg_orders_with_flags_line_uid.f58baaece9": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_orders_with_flags_line_uid", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_orders_with_flags_line_uid.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_orders_with_flags_line_uid.f58baaece9", "fqn": ["orderly", "staging", "not_null_stg_orders_with_flags_line_uid"], "alias": "not_null_stg_orders_with_flags_line_uid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754796494.401517, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders_with_flags", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders_with_flags"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_orders_with_flags_line_uid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_uid\nfrom \"orderly\".\"dev_staging\".\"stg_orders_with_flags\"\nwhere line_uid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_uid", "file_key_name": "models.stg_orders_with_flags", "attached_node": "model.orderly.stg_orders_with_flags", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_uid", "model": "{{ get_where_subquery(ref('stg_orders_with_flags')) }}"}, "namespace": null}}, "test.orderly.unique_stg_orders_with_flags_line_uid.7ccd72d1b2": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "unique_stg_orders_with_flags_line_uid", "resource_type": "test", "package_name": "orderly", "path": "unique_stg_orders_with_flags_line_uid.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.unique_stg_orders_with_flags_line_uid.7ccd72d1b2", "fqn": ["orderly", "staging", "unique_stg_orders_with_flags_line_uid"], "alias": "unique_stg_orders_with_flags_line_uid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754796494.4024608, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders_with_flags", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders_with_flags"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\unique_stg_orders_with_flags_line_uid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    line_uid as unique_field,\n    count(*) as n_records\n\nfrom \"orderly\".\"dev_staging\".\"stg_orders_with_flags\"\nwhere line_uid is not null\ngroup by line_uid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_uid", "file_key_name": "models.stg_orders_with_flags", "attached_node": "model.orderly.stg_orders_with_flags", "test_metadata": {"name": "unique", "kwargs": {"column_name": "line_uid", "model": "{{ get_where_subquery(ref('stg_orders_with_flags')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_orders_with_flags_flag_missing_in_seed.0cf16eaf21": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_orders_with_flags_flag_missing_in_seed", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_orders_with_flags_flag_missing_in_seed.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_orders_with_flags_flag_missing_in_seed.0cf16eaf21", "fqn": ["orderly", "staging", "not_null_stg_orders_with_flags_flag_missing_in_seed"], "alias": "not_null_stg_orders_with_flags_flag_missing_in_seed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754796494.4031572, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders_with_flags", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders_with_flags"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_orders_with_flags_flag_missing_in_seed.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect flag_missing_in_seed\nfrom \"orderly\".\"dev_staging\".\"stg_orders_with_flags\"\nwhere flag_missing_in_seed is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "flag_missing_in_seed", "file_key_name": "models.stg_orders_with_flags", "attached_node": "model.orderly.stg_orders_with_flags", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "flag_missing_in_seed", "model": "{{ get_where_subquery(ref('stg_orders_with_flags')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_orders_with_flags_flag_name_mismatch.d3201bfa02": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_orders_with_flags_flag_name_mismatch", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_orders_with_flags_flag_name_mismatch.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_orders_with_flags_flag_name_mismatch.d3201bfa02", "fqn": ["orderly", "staging", "not_null_stg_orders_with_flags_flag_name_mismatch"], "alias": "not_null_stg_orders_with_flags_flag_name_mismatch", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754796494.403865, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders_with_flags", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders_with_flags"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_orders_with_flags_flag_name_mismatch.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect flag_name_mismatch\nfrom \"orderly\".\"dev_staging\".\"stg_orders_with_flags\"\nwhere flag_name_mismatch is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "flag_name_mismatch", "file_key_name": "models.stg_orders_with_flags", "attached_node": "model.orderly.stg_orders_with_flags", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "flag_name_mismatch", "model": "{{ get_where_subquery(ref('stg_orders_with_flags')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_orders_with_flags_flag_vendor_mismatch.3ba054e8cd": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_orders_with_flags_flag_vendor_mismatch", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_orders_with_flags_flag_vendor_mismatch.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_orders_with_flags_flag_vendor_mismatch.3ba054e8cd", "fqn": ["orderly", "staging", "not_null_stg_orders_with_flags_flag_vendor_mismatch"], "alias": "not_null_stg_orders_with_flags_flag_vendor_mismatch", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754796494.4045954, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders_with_flags", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders_with_flags"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_orders_with_flags_flag_vendor_mismatch.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect flag_vendor_mismatch\nfrom \"orderly\".\"dev_staging\".\"stg_orders_with_flags\"\nwhere flag_vendor_mismatch is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "flag_vendor_mismatch", "file_key_name": "models.stg_orders_with_flags", "attached_node": "model.orderly.stg_orders_with_flags", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "flag_vendor_mismatch", "model": "{{ get_where_subquery(ref('stg_orders_with_flags')) }}"}, "namespace": null}}, "test.orderly.not_null_stg_orders_with_flags_has_quality_issues.181f84f147": {"database": "orderly", "schema": "dev_dbt_test__audit", "name": "not_null_stg_orders_with_flags_has_quality_issues", "resource_type": "test", "package_name": "orderly", "path": "not_null_stg_orders_with_flags_has_quality_issues.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.orderly.not_null_stg_orders_with_flags_has_quality_issues.181f84f147", "fqn": ["orderly", "staging", "not_null_stg_orders_with_flags_has_quality_issues"], "alias": "not_null_stg_orders_with_flags_has_quality_issues", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754796494.4053197, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders_with_flags", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.orderly.stg_orders_with_flags"]}, "compiled_path": "target\\compiled\\orderly\\models\\staging\\schema.yml\\not_null_stg_orders_with_flags_has_quality_issues.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect has_quality_issues\nfrom \"orderly\".\"dev_staging\".\"stg_orders_with_flags\"\nwhere has_quality_issues is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "has_quality_issues", "file_key_name": "models.stg_orders_with_flags", "attached_node": "model.orderly.stg_orders_with_flags", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "has_quality_issues", "model": "{{ get_where_subquery(ref('stg_orders_with_flags')) }}"}, "namespace": null}}}, "sources": {}, "macros": {"macro.orderly.test_assert_rowcount": {"name": "test_assert_rowcount", "resource_type": "macro", "package_name": "orderly", "path": "macros\\assert_rowcount.sql", "original_file_path": "macros\\assert_rowcount.sql", "unique_id": "macro.orderly.test_assert_rowcount", "macro_sql": "{% macro test_assert_rowcount(model) %}\r\n  -- Custom test to ensure table has at least one row\r\n  -- Fails if rowcount is 0\r\n  SELECT count(*) as row_count\r\n  FROM {{ model }}\r\n  HAVING count(*) = 0\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5780709, "supported_languages": null}, "macro.orderly.export_stg_orders": {"name": "export_stg_orders", "resource_type": "macro", "package_name": "orderly", "path": "macros\\export_stg_orders.sql", "original_file_path": "macros\\export_stg_orders.sql", "unique_id": "macro.orderly.export_stg_orders", "macro_sql": "{% macro export_stg_orders() %}\r\n  \r\n  {% set query %}\r\n    COPY (\r\n      SELECT * FROM {{ this }}\r\n    ) TO '{{ var(\"project_root\", \".\") }}/data/intermediate/stg_orders.csv' \r\n    (FORMAT CSV, HEADER)\r\n  {% endset %}\r\n\r\n  {% if execute %}\r\n    {% do run_query(query) %}\r\n    {{ log(\"\u2705 Exported stg_orders to CSV: data/intermediate/stg_orders.csv\", info=True) }}\r\n  {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5785353, "supported_languages": null}, "macro.orderly.export_to_csv": {"name": "export_to_csv", "resource_type": "macro", "package_name": "orderly", "path": "macros\\export_to_csv.sql", "original_file_path": "macros\\export_to_csv.sql", "unique_id": "macro.orderly.export_to_csv", "macro_sql": "{% macro export_to_csv(model_name, output_path, layer='bronze') %}\r\n  {% set export_query %}\r\n    COPY (\r\n      SELECT * FROM {{ ref(model_name) }}\r\n    ) TO '{{ output_path }}/{{ layer }}_{{ model_name }}.csv' \r\n    (HEADER, DELIMITER ',')\r\n  {% endset %}\r\n  \r\n  {{ log(\"Exporting \" ~ model_name ~ \" to \" ~ output_path ~ \"/\" ~ layer ~ \"_\" ~ model_name ~ \".csv\", info=True) }}\r\n  \r\n  {% if execute %}\r\n    {% do run_query(export_query) %}\r\n    {{ log(\"\u2705 Successfully exported \" ~ model_name, info=True) }}\r\n  {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5795627, "supported_languages": null}, "macro.orderly.export_to_csv_posthook": {"name": "export_to_csv_posthook", "resource_type": "macro", "package_name": "orderly", "path": "macros\\export_to_csv.sql", "original_file_path": "macros\\export_to_csv.sql", "unique_id": "macro.orderly.export_to_csv_posthook", "macro_sql": "{% macro export_to_csv_posthook(output_path, layer='bronze') %}\r\n  {% set model_name = this.name %}\r\n  {% set export_query %}\r\n    COPY (\r\n      SELECT * FROM {{ this }}\r\n    ) TO '{{ output_path }}/{{ layer }}_{{ model_name }}.csv' \r\n    (HEADER, DELIMITER ',')\r\n  {% endset %}\r\n  \r\n  {{ log(\"Exporting \" ~ model_name ~ \" to \" ~ output_path ~ \"/\" ~ layer ~ \"_\" ~ model_name ~ \".csv\", info=True) }}\r\n  \r\n  {% if execute %}\r\n    {% do run_query(export_query) %}\r\n    {{ log(\"\u2705 Successfully exported \" ~ model_name, info=True) }}\r\n  {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.580026, "supported_languages": null}, "macro.orderly.export_all_bronze_to_csv": {"name": "export_all_bronze_to_csv", "resource_type": "macro", "package_name": "orderly", "path": "macros\\export_to_csv.sql", "original_file_path": "macros\\export_to_csv.sql", "unique_id": "macro.orderly.export_all_bronze_to_csv", "macro_sql": "{% macro export_all_bronze_to_csv(output_path='data/intermediate') %}\r\n  {% if target.name == 'dev' %}\r\n    {{ log(\"\ud83d\udd04 Starting bronze layer CSV export...\", info=True) }}\r\n    {{ export_to_csv('raw_cost_centres', output_path, 'bronze') }}\r\n    {{ export_to_csv('raw_exchange_rates', output_path, 'bronze') }}\r\n    {{ export_to_csv('raw_orders', output_path, 'bronze') }}\r\n    {{ export_to_csv('raw_vendor_master', output_path, 'bronze') }}\r\n    {{ log(\"\u2705 Bronze layer CSV export completed!\", info=True) }}\r\n  {% else %}\r\n    {{ log(\"\u23ed\ufe0f  Skipping bronze CSV export - not in dev environment (current: \" ~ target.name ~ \")\", info=True) }}\r\n  {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.orderly.export_to_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5805428, "supported_languages": null}, "macro.orderly.export_all_silver_to_csv": {"name": "export_all_silver_to_csv", "resource_type": "macro", "package_name": "orderly", "path": "macros\\export_to_csv.sql", "original_file_path": "macros\\export_to_csv.sql", "unique_id": "macro.orderly.export_all_silver_to_csv", "macro_sql": "{% macro export_all_silver_to_csv(output_path='data/intermediate') %}\r\n  {% if target.name == 'dev' %}\r\n    {{ log(\"\ud83d\udd04 Starting silver layer CSV export...\", info=True) }}\r\n    {{ export_to_csv('silver_cost_centres', output_path, 'silver') }}\r\n    {{ export_to_csv('silver_exchange_rates', output_path, 'silver') }}\r\n    {{ export_to_csv('silver_vendor_master', output_path, 'silver') }}\r\n    {{ export_to_csv('silver_orders_valid', output_path, 'silver') }}\r\n    {{ export_to_csv('silver_orders_exceptions', output_path, 'silver') }}\r\n    {{ export_to_csv('silver_orders_nonproduct', output_path, 'silver') }}\r\n    {{ log(\"\u2705 Silver layer CSV export completed!\", info=True) }}\r\n  {% else %}\r\n    {{ log(\"\u23ed\ufe0f  Skipping silver CSV export - not in dev environment (current: \" ~ target.name ~ \")\", info=True) }}\r\n  {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.orderly.export_to_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.581125, "supported_languages": null}, "macro.orderly.export_all_gold_to_csv": {"name": "export_all_gold_to_csv", "resource_type": "macro", "package_name": "orderly", "path": "macros\\export_to_csv.sql", "original_file_path": "macros\\export_to_csv.sql", "unique_id": "macro.orderly.export_all_gold_to_csv", "macro_sql": "{% macro export_all_gold_to_csv(output_path='data/exports') %}\r\n  {{ log(\"\ud83d\udd04 Starting gold layer CSV export...\", info=True) }}\r\n  {{ export_to_csv('dim_cost_centre', output_path, 'gold') }}\r\n  {{ export_to_csv('dim_date', output_path, 'gold') }}\r\n  {{ export_to_csv('dim_product', output_path, 'gold') }}\r\n  {{ export_to_csv('dim_vendor', output_path, 'gold') }}\r\n  {{ export_to_csv('fct_data_quality', output_path, 'gold') }}\r\n  {{ export_to_csv('fct_order_line', output_path, 'gold') }}\r\n  {{ export_to_csv('fct_price_variance', output_path, 'gold') }}\r\n  {{ log(\"\u2705 Gold layer CSV export completed!\", info=True) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.orderly.export_to_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5816185, "supported_languages": null}, "macro.orderly.export_all_layers_to_csv": {"name": "export_all_layers_to_csv", "resource_type": "macro", "package_name": "orderly", "path": "macros\\export_to_csv.sql", "original_file_path": "macros\\export_to_csv.sql", "unique_id": "macro.orderly.export_all_layers_to_csv", "macro_sql": "{% macro export_all_layers_to_csv() %}\r\n  {{ export_all_bronze_to_csv('data/intermediate') }}\r\n  {{ export_all_silver_to_csv('data/intermediate') }}\r\n  {{ export_all_gold_to_csv('data/exports') }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.orderly.export_all_bronze_to_csv", "macro.orderly.export_all_silver_to_csv", "macro.orderly.export_all_gold_to_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5817726, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_schema": {"name": "duckdb__create_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    {% set sql %}\n        select type from duckdb_databases()\n        where lower(database_name)='{{ relation.database | lower }}'\n        and type='sqlite'\n    {% endset %}\n    {% set results = run_query(sql) %}\n    {% if results|length == 0 %}\n        create schema if not exists {{ relation.without_identifier() }}\n    {% else %}\n        {% if relation.schema!='main' %}\n            {{ exceptions.raise_compiler_error(\n                \"Schema must be 'main' when writing to sqlite \"\n                ~ \"instead got \" ~ relation.schema\n            )}}\n        {% endif %}\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5832596, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_schema": {"name": "duckdb__drop_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5834086, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_schemas": {"name": "duckdb__list_schemas", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where lower(catalog_name) = '{{ database | lower }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.583631, "supported_languages": null}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"name": "duckdb__check_schema_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where lower(schema_name) = '{{ schema | lower }}'\n        and lower(catalog_name) = '{{ information_schema.database | lower }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5838363, "supported_languages": null}, "macro.dbt_duckdb.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.get_column_names", "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5841234, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_table_as": {"name": "duckdb__create_table_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_duckdb.get_column_names", "macro.dbt.get_select_subquery", "macro.dbt_duckdb.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5849156, "supported_languages": null}, "macro.dbt_duckdb.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.py_write_table", "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    tmp_name = '__dbt_python_model_df_' + '{{ relation.identifier }}'\n    con.register(tmp_name, df)\n    con.execute('create table {{ relation }} as select * from ' + tmp_name)\n    con.unregister(tmp_name)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5850675, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_view_as": {"name": "duckdb__create_view_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.585379, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"name": "duckdb__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and lower(table_schema) = '{{ relation.schema | lower }}'\n      {% endif %}\n      {% if relation.database %}\n      and lower(table_catalog) = '{{ relation.database | lower }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5857627, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"name": "duckdb__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where lower(table_schema) = '{{ schema_relation.schema | lower }}'\n    and lower(table_catalog) = '{{ schema_relation.database | lower }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.58603, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_relation": {"name": "duckdb__drop_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    {% if adapter.is_ducklake(relation) %}\n      drop {{ relation.type }} if exists {{ relation }}\n    {% else %}\n      drop {{ relation.type }} if exists {{ relation }} cascade\n    {% endif %}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5862846, "supported_languages": null}, "macro.dbt_duckdb.duckdb__rename_relation": {"name": "duckdb__rename_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5865173, "supported_languages": null}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"name": "duckdb__make_temp_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5867722, "supported_languages": null}, "macro.dbt_duckdb.duckdb__current_timestamp": {"name": "duckdb__current_timestamp", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5868337, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"name": "duckdb__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5869677, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"name": "duckdb__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5870483, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {"name": "duckdb__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql", "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5871599, "supported_languages": null}, "macro.dbt_duckdb.location_exists": {"name": "location_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.location_exists", "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5872722, "supported_languages": null}, "macro.dbt_duckdb.write_to_file": {"name": "write_to_file", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.write_to_file", "macro_sql": "{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5874426, "supported_languages": null}, "macro.dbt_duckdb.store_relation": {"name": "store_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.store_relation", "macro_sql": "{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5876627, "supported_languages": null}, "macro.dbt_duckdb.render_write_options": {"name": "render_write_options", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.render_write_options", "macro_sql": "{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5885677, "supported_languages": null}, "macro.dbt_duckdb.duckdb__apply_grants": {"name": "duckdb__apply_grants", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__apply_grants", "macro_sql": "{% macro duckdb__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n      {{ adapter.warn_once('Grants for relations are not supported by DuckDB') }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5887418, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_catalog": {"name": "duckdb__get_catalog", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    with relations AS (\n      select\n        t.table_name\n        , t.database_name\n        , t.schema_name\n        , 'BASE TABLE' as table_type\n        , t.comment as table_comment\n      from duckdb_tables() t\n      WHERE t.database_name = '{{ database }}'\n      UNION ALL\n      SELECT v.view_name as table_name\n      , v.database_name\n      , v.schema_name\n      , 'VIEW' as table_type\n      , v.comment as table_comment\n      from duckdb_views() v\n      WHERE v.database_name = '{{ database }}'\n    )\n    select\n        '{{ database }}' as table_database,\n        r.schema_name as table_schema,\n        r.table_name,\n        r.table_type,\n        r.table_comment,\n        c.column_name,\n        c.column_index as column_index,\n        c.data_type as column_type,\n        c.comment as column_comment,\n        NULL as table_owner\n    FROM relations r JOIN duckdb_columns() c ON r.schema_name = c.schema_name AND r.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(r.schema_name) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    ORDER BY\n        r.schema_name,\n        r.table_name,\n        c.column_index\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.589243, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns": {"name": "duckdb__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\columns.sql", "original_file_path": "macros\\columns.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns", "macro_sql": "{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ api.Relation.create(identifier=column.name) }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ api.Relation.create(identifier=column.name) }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5899487, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql": {"name": "duckdb__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\incremental_helper.sql", "original_file_path": "macros\\incremental_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql", "macro_sql": "{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5909078, "supported_languages": null}, "macro.dbt_duckdb.duckdb_escape_comment": {"name": "duckdb_escape_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\persist_docs.sql", "original_file_path": "macros\\persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb_escape_comment", "macro_sql": "{% macro duckdb_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5914266, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_comment": {"name": "duckdb__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\persist_docs.sql", "original_file_path": "macros\\persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_comment", "macro_sql": "{% macro duckdb__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = duckdb_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5915968, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_column_comment": {"name": "duckdb__alter_column_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\persist_docs.sql", "original_file_path": "macros\\persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_column_comment", "macro_sql": "{% macro duckdb__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = duckdb_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5921607, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_binding_char": {"name": "duckdb__get_binding_char", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\seed.sql", "original_file_path": "macros\\seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char", "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5925736, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_batch_size": {"name": "duckdb__get_batch_size", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\seed.sql", "original_file_path": "macros\\seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size", "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5926716, "supported_languages": null}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"name": "duckdb__load_csv_rows", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\seed.sql", "original_file_path": "macros\\seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5940115, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"name": "duckdb__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\snapshot_helper.sql", "original_file_path": "macros\\snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }}::text = DBT_INTERNAL_TARGET.{{ columns.dbt_scd_id }}::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      {% if config.get(\"dbt_valid_to_current\") %}\n        and (DBT_INTERNAL_TARGET.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or DBT_INTERNAL_TARGET.{{ columns.dbt_valid_to }} is null);\n      {% else %}\n        and DBT_INTERNAL_TARGET.{{ columns.dbt_valid_to }} is null;\n      {% endif %}\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5948713, "supported_languages": null}, "macro.dbt_duckdb.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\snapshot_helper.sql", "original_file_path": "macros\\snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5951962, "supported_languages": null}, "macro.dbt_duckdb.duckdb__post_snapshot": {"name": "duckdb__post_snapshot", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\snapshot_helper.sql", "original_file_path": "macros\\snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__post_snapshot", "macro_sql": "{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.5953143, "supported_languages": null}, "macro.dbt_duckdb.materialization_external_duckdb": {"name": "materialization_external_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\materializations\\external.sql", "original_file_path": "macros\\materializations\\external.sql", "unique_id": "macro.dbt_duckdb.materialization_external_duckdb", "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n\n  {%- set format = config.get('format') -%}\n  {%- set allowed_formats = ['csv', 'parquet', 'json'] -%}\n  {%- if format -%}\n      {%- if format not in allowed_formats -%}\n          {{ exceptions.raise_compiler_error(\"Invalid format: \" ~ format ~ \". Allowed formats are: \" ~ allowed_formats | join(', ')) }}\n      {%- endif -%}\n  {%- else -%}\n    {%- set format = location.split('.')[-1].lower() if '.' in location else 'parquet' -%}\n    {%- set format = format if format in allowed_formats else 'parquet' -%}\n  {%- endif -%}\n\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n  {%- set parquet_read_options = config.get('parquet_read_options', {'union_by_name': False}) -%}\n  {%- set json_read_options = config.get('json_read_options', {'auto_detect': True}) -%}\n  {%- set csv_read_options = config.get('csv_read_options', {'auto_detect': True}) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- check if relation is empty\n  {%- set count_query -%}\n    select count(*) as row_count from {{ temp_relation }}\n  {%- endset -%}\n  {%- set row_count = run_query(count_query) -%}\n\n  -- if relation is empty, write a non-empty table with column names and null values\n  {% call statement('main', language='sql') -%}\n    {% if row_count[0][0] == 0 %}\n    insert into {{ temp_relation }} values (\n      {%- for col in get_columns_in_relation(temp_relation) -%}\n      NULL,\n      {%- endfor -%}\n    )\n    {% endif %}\n  {%- endcall %}\n\n  -- write a temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n\n-- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    {% if format == 'json' %}\n      create or replace view {{ intermediate_relation }} as (\n        select * from read_json('{{ read_location }}'\n        {%- for key, value in json_read_options.items() -%}\n          , {{ key }}=\n          {%- if value is string -%}\n            '{{ value }}'\n          {%- else -%}\n            {{ value }}\n          {%- endif -%}\n        {%- endfor -%}\n        )\n        -- if relation is empty, filter by all columns having null values\n        {% if row_count[0][0] == 0 %}\n          where 1\n          {%- for col in get_columns_in_relation(temp_relation) -%}\n            {{ '' }} AND \"{{ col.column }}\" is not NULL\n          {%- endfor -%}\n        {% endif %}\n      );\n    {% elif format == 'parquet' %}\n      create or replace view {{ intermediate_relation }} as (\n        select * from read_parquet('{{ read_location }}'\n        {%- for key, value in parquet_read_options.items() -%}\n          , {{ key }}=\n          {%- if value is string -%}\n            '{{ value }}'\n          {%- else -%}\n            {{ value }}\n          {%- endif -%}\n        {%- endfor -%}\n        )\n        -- if relation is empty, filter by all columns having null values\n        {% if row_count[0][0] == 0 %}\n          where 1\n          {%- for col in get_columns_in_relation(temp_relation) -%}\n            {{ '' }} AND \"{{ col.column }}\" is not NULL\n          {%- endfor -%}\n        {% endif %}\n      );\n    {% elif format == 'csv' %}\n    create or replace view {{ intermediate_relation }} as (\n      select * from read_csv('{{ read_location }}'\n      {%- for key, value in csv_read_options.items() -%}\n        , {{ key }}=\n        {%- if value is string -%}\n          '{{ value }}'\n        {%- else -%}\n          {{ value }}\n        {%- endif -%}\n      {%- endfor -%}\n      )\n      -- if relation is empty, filter by all columns having null values\n      {% if row_count[0][0] == 0 %}\n        where 1\n        {%- for col in get_columns_in_relation(temp_relation) -%}\n          {{ '' }} AND \"{{ col.column }}\" is not NULL\n        {%- endfor -%}\n      {% endif %}\n    );\n    {% endif %}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {%- set partition_columns = config.get('partition_columns', []) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt_duckdb.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.get_columns_in_relation", "macro.dbt_duckdb.write_to_file", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_duckdb.store_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6005292, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt_duckdb.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.601037, "supported_languages": null}, "macro.dbt_duckdb.materialization_incremental_duckdb": {"name": "materialization_incremental_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb", "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n  -- only create temp tables if using local duckdb, as it is not currently supported for remote databases\n  {%- set temporary = not adapter.is_motherduck() -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if not temporary %}\n      -- if not using a temporary table we will update the temp relation to use a different temp schema (\"dbt_temp\" by default)\n      {% set temp_relation = temp_relation.incorporate(path=adapter.get_temp_relation_path(this)) %}\n      {% do run_query(create_schema(temp_relation)) %}\n      -- then drop the temp relation after we insert the incremental data into the target relation\n      {% do to_drop.append(temp_relation) %}\n    {% endif %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(temporary, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt_duckdb.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.create_schema", "macro.dbt.statement", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6046534, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_table_duckdb": {"name": "materialization_table_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_duckdb.materialization_table_duckdb", "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt_duckdb.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6062393, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_table_function_duckdb": {"name": "materialization_table_function_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\materializations\\table_function.sql", "original_file_path": "macros\\materializations\\table_function.sql", "unique_id": "macro.dbt_duckdb.materialization_table_function_duckdb", "macro_sql": "{% materialization table_function, adapter='duckdb' %}\n  -- This materialization uses DuckDB's Table Function / Table Macro feature to provide parameterized views.\n  -- Why use this?\n  --     Late binding of functions means that the underlying table can change (have new columns added), and\n  --       the function does not need to be recreated. (With a view, the create view statement would need to be re-run).\n  --       This allows for skipping parts of the dbt DAG, even if the underlying table changed.\n  --     Parameters can force filter pushdown\n  --     Functions can provide advanced features like dynamic SQL (the query and query_table functions)\n\n  -- For usage examples, see the tests at /dbt-duckdb/tests/functional/adapter/test_table_function.py\n  --     (Don't forget parentheses when you pull from a table_function!)\n\n  -- Using Redshift as an example:\n  -- https://github.com/dbt-labs/dbt-adapters/blob/main/dbt-redshift/src/dbt/include/redshift/macros/materializations/table.sql\n  {%- set identifier = model['alias'] -%}\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier,\n      schema=schema,\n      database=database,\n      type='view') -%}\n  {%- set backup_relation = none -%}\n\n  -- The parameters config is used to pass in the names of the parameters that will be used within the table function.\n  -- parameters can be a single string value (with or without commas), or a list of strings.\n  {%- set parameters=config.get('parameters') -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- Create or replace the function (macro)\n  -- By using create or replace (and a transaction), we do not need an old version and new version.\n  {% call statement('main') -%}\n    create or replace function {{ target_relation.render() }}(\n        {% if not parameters %}\n        {% elif parameters is string or parameters is number %}\n          {{ parameters if parameters }}\n        {% else  %}\n          {{ parameters|join(', ') }}\n        {% endif %}\n      ) as table (\n        {{ sql }});\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here:\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_duckdb.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6073375, "supported_languages": ["sql"]}, "macro.dbt_duckdb.duckdb__any_value": {"name": "duckdb__any_value", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt_duckdb.duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6074598, "supported_languages": null}, "macro.dbt_duckdb.duckdb__dateadd": {"name": "duckdb__dateadd", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_duckdb.duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    date_add({{ from_date_or_timestamp }}, interval ({{ interval }}) {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6076217, "supported_languages": null}, "macro.dbt_duckdb.duckdb__datediff": {"name": "duckdb__datediff", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt_duckdb.duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n    {% if datepart == 'week' %}\n            ({{ datediff(first_date, second_date, 'day') }} // 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% else %}\n        (date_diff('{{ datepart }}', {{ first_date }}::timestamp, {{ second_date}}::timestamp ))\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6080604, "supported_languages": null}, "macro.dbt_duckdb.external_location": {"name": "external_location", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\external_location.sql", "original_file_path": "macros\\utils\\external_location.sql", "unique_id": "macro.dbt_duckdb.external_location", "macro_sql": "{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.608475, "supported_languages": null}, "macro.dbt_duckdb.duckdb__last_day": {"name": "duckdb__last_day", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\lastday.sql", "original_file_path": "macros\\utils\\lastday.sql", "unique_id": "macro.dbt_duckdb.duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6088333, "supported_languages": null}, "macro.dbt_duckdb.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_duckdb.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6092343, "supported_languages": null}, "macro.dbt_duckdb.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\splitpart.sql", "original_file_path": "macros\\utils\\splitpart.sql", "unique_id": "macro.dbt_duckdb.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6094103, "supported_languages": null}, "macro.dbt_duckdb.register_upstream_external_models": {"name": "register_upstream_external_models", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\upstream.sql", "original_file_path": "macros\\utils\\upstream.sql", "unique_id": "macro.dbt_duckdb.register_upstream_external_models", "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% if node not in graph['nodes'] %}{% continue %}{% endif %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.without_identifier() }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.610982, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6118076, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.611899, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6120222, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6121073, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6123683, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6125069, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6125982, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.612763, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.612916, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6130822, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6132345, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6134038, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6139057, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.614043, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.614229, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6143978, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6152482, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6161013, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6162217, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6164577, "supported_languages": null}, "macro.dbt.get_list_of_column_names": {"name": "get_list_of_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_list_of_column_names", "macro_sql": "\n\n{%- macro get_list_of_column_names(columns) -%}\n  {% set col_names = [] %}\n  {% for col in columns %}\n    {% do col_names.append(col.name) %}\n  {% endfor %}\n  {{ return(col_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6166704, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.616826, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6169791, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6171107, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6179595, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6182132, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6183455, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6185994, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6187623, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6192317, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6194205, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.quoted }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.quoted }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6200128, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6203532, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6206594, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6208143, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.621053, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.621403, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.621509, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.621628, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6219296, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.622065, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6221662, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6222806, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6223736, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6229706, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6233256, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.623476, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.623669, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6238034, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6239414, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6240737, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6242535, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6244006, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6246226, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6247556, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6248748, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6250067, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.625125, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6252458, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6253588, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6255083, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6256337, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6259508, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6260743, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.626221, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6263442, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6265361, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.626888, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6273863, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.627508, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.627794, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.628011, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.628185, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6284194, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6285515, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6286843, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6288614, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6292634, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6294408, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6295464, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6297817, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6299212, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.630039, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.630174, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6304553, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.630591, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6307352, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.631066, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.631177, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.631281, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.631365, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6316707, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6317935, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6318514, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6319714, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6320908, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6322916, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6324613, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.633006, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6338904, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6344352, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6346042, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6355488, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6359675, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6361816, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.636576, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6367977, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6370132, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6371837, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6374605, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6377454, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.638006, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.638198, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6385212, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6387196, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6389318, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6391506, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6394086, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.639814, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.640463, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6406064, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.640714, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6408198, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6409278, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6420774, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.642363, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.642545, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6435037, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6436725, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6441538, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table.sql", "original_file_path": "macros\\materializations\\models\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6456907, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view.sql", "original_file_path": "macros\\materializations\\models\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6472304, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6474159, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6475043, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% if target_relation.database == defer_relation.database and\n            target_relation.schema == defer_relation.schema and\n            target_relation.identifier == defer_relation.identifier %}\n        {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n      {% else %}\n        {% call statement('main') %}\n            {{ create_or_replace_clone(target_relation, defer_relation) }}\n        {% endcall %}\n      {% endif %}\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6493428, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.649576, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6497045, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6503017, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6507134, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6511972, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6513731, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6519043, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.655137, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6556284, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.656435, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6577146, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6579075, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6584423, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6586356, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.659111, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6599932, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6608725, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6617508, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.662369, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6628463, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6630192, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6631534, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6633608, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6634927, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6636977, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6638296, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6640155, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6641457, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6642542, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6643848, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6645026, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6647062, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6653922, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6660526, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6662197, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6665854, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6667266, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6668277, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6669319, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6670172, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.667131, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6672173, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.667566, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.667698, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6685953, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6704483, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.672015, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column {{ adapter.quote(column.name) }} {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.672263, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.672385, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6724532, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6725602, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.672646, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6727953, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6731315, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n            {%- if strategy.hard_deletes == 'new_record' %}\n            and not (\n                --avoid updating the record's valid_to if the latest entry is marked as deleted\n                snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n                and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n            {%- endif %}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set snapshotted_cols = get_list_of_column_names(get_columns_in_relation(target_relation)) %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {#\n                If a column has been added to the source it won't yet exist in the\n                snapshotted table so we insert a null value as a placeholder for the column.\n             #}\n            {%- for col in source_sql_cols -%}\n            {%- if col.name in snapshotted_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {%- else -%}\n            NULL as {{ adapter.quote(col.column) }},\n            {%- endif -%}\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n        and not (\n            --avoid inserting a new record if the latest one is marked as deleted\n            snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n            and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_list_of_column_names", "macro.dbt.get_columns_in_relation", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6760914, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6762445, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6766207, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.676935, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6773758, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6776931, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6779053, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6781597, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6785839, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.678743, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6788993, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6818264, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6821616, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6827693, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6842926, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.684426, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.684595, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6853096, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6854339, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6855605, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6866188, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6876984, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.688107, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6883397, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6884947, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6889446, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.690634, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\unit.sql", "original_file_path": "macros\\materializations\\tests\\unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6917667, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6920135, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6923015, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6928294, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6929467, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6936464, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.693944, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6943653, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6947012, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6947572, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6950395, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6953695, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6955955, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.695793, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.696039, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6962252, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.696545, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6968322, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.696966, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.697115, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6972594, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6974776, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6976295, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6979718, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6982908, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.69844, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.698661, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6988816, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6990335, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.6994507, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7003334, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7005324, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.700693, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.70124, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7013297, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7017252, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7018476, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7020156, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.703007, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.703294, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7035422, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7039545, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7040963, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7043016, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7044094, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7046053, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7048717, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7050562, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7051477, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7053597, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.705457, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7056444, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7057524, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7059417, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7060509, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7064924, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7066274, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7069454, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.707453, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7077928, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7079308, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.get_column_names", "macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7080626, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7082427, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7083337, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7085233, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.708631, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7088182, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7089262, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7091894, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.709308, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.709448, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7097762, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7099545, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7100487, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7102363, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7103434, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7107134, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7108223, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7116258, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7117674, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.711939, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7137327, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.71415, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7149708, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7151225, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7151935, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7153778, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7154596, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7156653, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7157667, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7159598, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7160597, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.716328, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.716509, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7166889, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.716768, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.716966, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7170637, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7172375, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7173548, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7175972, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7177138, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7182012, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.718316, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7184393, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7185504, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.718667, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7187772, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7188916, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7190204, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7191365, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7192461, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7193627, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.719479, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7195947, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7197006, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7199447, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7201579, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7203872, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.720665, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7208958, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7210255, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7213936, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7218292, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7220008, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7222707, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7224753, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.722574, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7228053, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.723032, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7232308, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.723336, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7235003, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7235591, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.723876, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7241948, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.724332, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.724716, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.724902, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7250245, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7251902, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7252493, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.725476, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.725667, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7257757, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7259564, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.726037, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7263608, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7266655, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7268443, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7269254, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.727131, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.727234, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7274551, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7275794, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.72778, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7278821, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.728093, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.728199, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.728466, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7285917, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7287598, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7290878, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7292738, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7295125, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754795765.7297246, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.orderly.raw_cost_centres": [], "model.orderly.raw_exchange_rates": [], "model.orderly.raw_orders": [], "model.orderly.raw_vendor_master": [], "model.orderly.dim_cost_centre": ["model.orderly.silver_cost_centres"], "model.orderly.dim_date": ["model.orderly.silver_exchange_rates"], "model.orderly.dim_product": ["model.orderly.silver_orders_valid", "seed.orderly.ref_sku_names"], "model.orderly.dim_vendor": ["model.orderly.silver_vendor_master"], "model.orderly.fct_data_quality": ["model.orderly.dim_cost_centre", "model.orderly.dim_date", "model.orderly.dim_product", "model.orderly.dim_vendor", "model.orderly.silver_orders_exceptions"], "model.orderly.fct_order_line": ["model.orderly.dim_cost_centre", "model.orderly.dim_date", "model.orderly.dim_product", "model.orderly.dim_vendor", "model.orderly.silver_orders_valid"], "model.orderly.fct_price_variance": ["model.orderly.dim_cost_centre", "model.orderly.dim_date", "model.orderly.dim_product", "model.orderly.dim_vendor", "model.orderly.silver_orders_valid"], "model.orderly.silver_cost_centres": ["model.orderly.raw_cost_centres"], "model.orderly.silver_exchange_rates": ["model.orderly.stg_exchange_rates"], "model.orderly.silver_orders_exceptions": ["model.orderly.stg_orders_with_flags"], "model.orderly.silver_orders_nonproduct": ["model.orderly.stg_orders_with_flags"], "model.orderly.silver_orders_valid": ["model.orderly.stg_orders_with_flags"], "model.orderly.silver_vendor_master": ["model.orderly.raw_vendor_master"], "model.orderly.stg_exchange_rates": ["model.orderly.raw_exchange_rates"], "model.orderly.stg_orders": ["model.orderly.raw_orders"], "model.orderly.stg_orders_export": [], "seed.orderly.ref_sku_names": [], "operation.orderly.orderly-on-run-start-0": [], "operation.orderly.orderly-on-run-start-1": [], "operation.orderly.orderly-on-run-start-2": [], "operation.orderly.orderly-on-run-start-3": [], "test.orderly.not_null_raw_orders_order_id.e74425a338": ["model.orderly.raw_orders"], "test.orderly.not_null_raw_orders_order_date.3ab6fcc91f": ["model.orderly.raw_orders"], "test.orderly.assert_rowcount_raw_orders_.08dcc140e0": ["model.orderly.raw_orders"], "test.orderly.not_null_raw_vendor_master_vendor_id.4fb57d1c2c": ["model.orderly.raw_vendor_master"], "test.orderly.unique_raw_vendor_master_vendor_id.c9d11def2b": ["model.orderly.raw_vendor_master"], "test.orderly.not_null_raw_vendor_master_vendor_name.53003e37f2": ["model.orderly.raw_vendor_master"], "test.orderly.assert_rowcount_raw_vendor_master_.5d7f055440": ["model.orderly.raw_vendor_master"], "test.orderly.not_null_raw_cost_centres_cost_centre_id.8f9d84fd2f": ["model.orderly.raw_cost_centres"], "test.orderly.unique_raw_cost_centres_cost_centre_id.69926f60ce": ["model.orderly.raw_cost_centres"], "test.orderly.not_null_raw_cost_centres_cost_centre_name.6a69a7a5a0": ["model.orderly.raw_cost_centres"], "test.orderly.not_null_raw_cost_centres_country_code.fb9d834802": ["model.orderly.raw_cost_centres"], "test.orderly.assert_rowcount_raw_cost_centres_.fb0877bd01": ["model.orderly.raw_cost_centres"], "test.orderly.not_null_raw_exchange_rates_date.91d5cbd900": ["model.orderly.raw_exchange_rates"], "test.orderly.not_null_raw_exchange_rates_from_currency.3a9d1a7064": ["model.orderly.raw_exchange_rates"], "test.orderly.not_null_raw_exchange_rates_to_currency.06af868b77": ["model.orderly.raw_exchange_rates"], "test.orderly.not_null_raw_exchange_rates_exchange_rate.7034e7e9c9": ["model.orderly.raw_exchange_rates"], "test.orderly.assert_rowcount_raw_exchange_rates_.2773ebf085": ["model.orderly.raw_exchange_rates"], "test.orderly.unique_dim_date_date_key.0869fd48f9": ["model.orderly.dim_date"], "test.orderly.not_null_dim_date_date_key.881d0a31b6": ["model.orderly.dim_date"], "test.orderly.not_null_dim_date_date_actual.85284edc63": ["model.orderly.dim_date"], "test.orderly.unique_dim_cost_centre_cost_centre_key.14609e741e": ["model.orderly.dim_cost_centre"], "test.orderly.not_null_dim_cost_centre_cost_centre_key.27832503c9": ["model.orderly.dim_cost_centre"], "test.orderly.unique_dim_cost_centre_cost_centre_id.1c685a260f": ["model.orderly.dim_cost_centre"], "test.orderly.not_null_dim_cost_centre_cost_centre_id.574b1e76a3": ["model.orderly.dim_cost_centre"], "test.orderly.unique_dim_vendor_vendor_key.3de6f52c68": ["model.orderly.dim_vendor"], "test.orderly.not_null_dim_vendor_vendor_key.385212c4ba": ["model.orderly.dim_vendor"], "test.orderly.unique_dim_vendor_vendor_id.849a2be65e": ["model.orderly.dim_vendor"], "test.orderly.not_null_dim_vendor_vendor_id.79e84c8282": ["model.orderly.dim_vendor"], "test.orderly.unique_dim_product_product_key.1753236bd0": ["model.orderly.dim_product"], "test.orderly.not_null_dim_product_product_key.f0e1d838d3": ["model.orderly.dim_product"], "test.orderly.unique_dim_product_sku_id.cf0a3fd846": ["model.orderly.dim_product"], "test.orderly.not_null_dim_product_sku_id.f725edd0d7": ["model.orderly.dim_product"], "test.orderly.unique_fct_order_line_order_line_key.8148914a14": ["model.orderly.fct_order_line"], "test.orderly.not_null_fct_order_line_order_line_key.f742e418df": ["model.orderly.fct_order_line"], "test.orderly.not_null_fct_order_line_date_key.e91f7aa57e": ["model.orderly.fct_order_line"], "test.orderly.relationships_fct_order_line_date_key__date_key__ref_dim_date_.ae3d7a81c1": ["model.orderly.dim_date", "model.orderly.fct_order_line"], "test.orderly.relationships_fct_order_line_delivery_date_key__date_key__ref_dim_date_.a2d9c7cd0b": ["model.orderly.dim_date", "model.orderly.fct_order_line"], "test.orderly.not_null_fct_order_line_cost_centre_key.c9f98ec08f": ["model.orderly.fct_order_line"], "test.orderly.relationships_fct_order_line_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.d98e8146ea": ["model.orderly.dim_cost_centre", "model.orderly.fct_order_line"], "test.orderly.not_null_fct_order_line_vendor_key.b752e17bde": ["model.orderly.fct_order_line"], "test.orderly.relationships_fct_order_line_vendor_key__vendor_key__ref_dim_vendor_.a18369f0fd": ["model.orderly.dim_vendor", "model.orderly.fct_order_line"], "test.orderly.not_null_fct_order_line_product_key.6be51edf29": ["model.orderly.fct_order_line"], "test.orderly.relationships_fct_order_line_product_key__product_key__ref_dim_product_.4b1fa1ca5a": ["model.orderly.dim_product", "model.orderly.fct_order_line"], "test.orderly.not_null_fct_order_line_currency_key.a6945afed1": ["model.orderly.fct_order_line"], "test.orderly.not_null_fct_order_line_quantity.7fe09de398": ["model.orderly.fct_order_line"], "test.orderly.not_null_fct_order_line_unit_price.bfa976e64f": ["model.orderly.fct_order_line"], "test.orderly.not_null_fct_order_line_line_total_amount.17988db3ee": ["model.orderly.fct_order_line"], "test.orderly.not_null_fct_order_line_order_id.445981c495": ["model.orderly.fct_order_line"], "test.orderly.not_null_fct_order_line_line_number.56dfeffb5b": ["model.orderly.fct_order_line"], "test.orderly.unique_fct_data_quality_data_quality_key.313a3c0bef": ["model.orderly.fct_data_quality"], "test.orderly.not_null_fct_data_quality_data_quality_key.3750a32bd1": ["model.orderly.fct_data_quality"], "test.orderly.not_null_fct_data_quality_date_key.62ef09eb7e": ["model.orderly.fct_data_quality"], "test.orderly.relationships_fct_data_quality_date_key__date_key__ref_dim_date_.33803ea8c5": ["model.orderly.dim_date", "model.orderly.fct_data_quality"], "test.orderly.not_null_fct_data_quality_cost_centre_key.e37fb6a9b5": ["model.orderly.fct_data_quality"], "test.orderly.relationships_fct_data_quality_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.3daf380639": ["model.orderly.dim_cost_centre", "model.orderly.fct_data_quality"], "test.orderly.relationships_fct_data_quality_vendor_key__vendor_key__ref_dim_vendor_.4eeddf7bad": ["model.orderly.dim_vendor", "model.orderly.fct_data_quality"], "test.orderly.relationships_fct_data_quality_product_key__product_key__ref_dim_product_.cfd4cd42e3": ["model.orderly.dim_product", "model.orderly.fct_data_quality"], "test.orderly.not_null_fct_data_quality_exception_count.19cc9f5aa4": ["model.orderly.fct_data_quality"], "test.orderly.accepted_values_fct_data_quality_exception_count__1.33de0bdd0e": ["model.orderly.fct_data_quality"], "test.orderly.not_null_fct_data_quality_exception_type.b0a64c5fd4": ["model.orderly.fct_data_quality"], "test.orderly.accepted_values_fct_data_quality_exception_type__SKU_NOT_IN_SEED__NAME_MISMATCH__VENDOR_MISMATCH__OTHER.a5a5ac2b77": ["model.orderly.fct_data_quality"], "test.orderly.unique_fct_price_variance_price_variance_key.d95d8c164b": ["model.orderly.fct_price_variance"], "test.orderly.not_null_fct_price_variance_price_variance_key.53f223732f": ["model.orderly.fct_price_variance"], "test.orderly.not_null_fct_price_variance_date_key.57786f0dc4": ["model.orderly.fct_price_variance"], "test.orderly.relationships_fct_price_variance_date_key__date_key__ref_dim_date_.d5c972a968": ["model.orderly.dim_date", "model.orderly.fct_price_variance"], "test.orderly.not_null_fct_price_variance_product_key.3ac9fb2809": ["model.orderly.fct_price_variance"], "test.orderly.relationships_fct_price_variance_product_key__product_key__ref_dim_product_.159e26688c": ["model.orderly.dim_product", "model.orderly.fct_price_variance"], "test.orderly.not_null_fct_price_variance_vendor_key.6941b717f3": ["model.orderly.fct_price_variance"], "test.orderly.relationships_fct_price_variance_vendor_key__vendor_key__ref_dim_vendor_.b2134bad76": ["model.orderly.dim_vendor", "model.orderly.fct_price_variance"], "test.orderly.not_null_fct_price_variance_cost_centre_key.a5f7cf2a8d": ["model.orderly.fct_price_variance"], "test.orderly.relationships_fct_price_variance_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.c9715b92c4": ["model.orderly.dim_cost_centre", "model.orderly.fct_price_variance"], "test.orderly.not_null_fct_price_variance_avg_unit_price.fea1cbb91c": ["model.orderly.fct_price_variance"], "test.orderly.not_null_fct_price_variance_min_unit_price.265d2e1419": ["model.orderly.fct_price_variance"], "test.orderly.not_null_fct_price_variance_max_unit_price.8bb1b694f0": ["model.orderly.fct_price_variance"], "test.orderly.not_null_fct_price_variance_order_count.9390ca678b": ["model.orderly.fct_price_variance"], "test.orderly.not_null_fct_price_variance_total_quantity.9ea9f5f7d2": ["model.orderly.fct_price_variance"], "test.orderly.not_null_fct_price_variance_has_significant_variance.31f690502a": ["model.orderly.fct_price_variance"], "test.orderly.accepted_values_fct_price_variance_has_significant_variance__True.cf23de8026": ["model.orderly.fct_price_variance"], "test.orderly.not_null_silver_cost_centres_cost_centre_id.8544dd19f9": ["model.orderly.silver_cost_centres"], "test.orderly.unique_silver_cost_centres_cost_centre_id.5fb3ad4552": ["model.orderly.silver_cost_centres"], "test.orderly.not_null_silver_cost_centres_cost_centre_name.022c7348a7": ["model.orderly.silver_cost_centres"], "test.orderly.not_null_silver_cost_centres_country_code.3c41f33577": ["model.orderly.silver_cost_centres"], "test.orderly.not_null_silver_exchange_rates_date.1d0e1b9364": ["model.orderly.silver_exchange_rates"], "test.orderly.not_null_silver_exchange_rates_from_currency.5bfdc62e67": ["model.orderly.silver_exchange_rates"], "test.orderly.accepted_values_silver_exchange_rates_from_currency__USD.34caf75371": ["model.orderly.silver_exchange_rates"], "test.orderly.not_null_silver_exchange_rates_to_currency.0d7934ce1e": ["model.orderly.silver_exchange_rates"], "test.orderly.accepted_values_silver_exchange_rates_to_currency__AUD.5ce093812e": ["model.orderly.silver_exchange_rates"], "test.orderly.not_null_silver_exchange_rates_exchange_rate.ec5d652b4f": ["model.orderly.silver_exchange_rates"], "test.orderly.not_null_silver_exchange_rates_rate_source.2c70c00d74": ["model.orderly.silver_exchange_rates"], "test.orderly.accepted_values_silver_exchange_rates_rate_source__SOURCE__CALCULATED__INTERPOLATED__FORWARD_FILLED.2d3a81299c": ["model.orderly.silver_exchange_rates"], "test.orderly.not_null_silver_vendor_master_vendor_id.02955e7f5c": ["model.orderly.silver_vendor_master"], "test.orderly.unique_silver_vendor_master_vendor_id.723dec8279": ["model.orderly.silver_vendor_master"], "test.orderly.not_null_silver_vendor_master_vendor_name.ffb9639c10": ["model.orderly.silver_vendor_master"], "test.orderly.not_null_silver_orders_valid_line_uid.78905c7a65": ["model.orderly.silver_orders_valid"], "test.orderly.unique_silver_orders_valid_line_uid.567bb943c8": ["model.orderly.silver_orders_valid"], "test.orderly.not_null_silver_orders_valid_order_id.39ddd69369": ["model.orderly.silver_orders_valid"], "test.orderly.not_null_silver_orders_valid_sku_id.93cfc9d155": ["model.orderly.silver_orders_valid"], "test.orderly.not_null_silver_orders_valid_cost_centre_id.76ba75ddb2": ["model.orderly.silver_orders_valid"], "test.orderly.relationships_silver_orders_valid_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.9feae6c48c": ["model.orderly.silver_cost_centres", "model.orderly.silver_orders_valid"], "test.orderly.relationships_silver_orders_valid_matched_vendor_id__vendor_id__ref_silver_vendor_master_.f82cd404e2": ["model.orderly.silver_orders_valid", "model.orderly.silver_vendor_master"], "test.orderly.not_null_silver_orders_valid_vendor_fuzz_score.c9db625f1c": ["model.orderly.silver_orders_valid"], "test.orderly.not_null_silver_orders_exceptions_line_uid.74cc7a2223": ["model.orderly.silver_orders_exceptions"], "test.orderly.not_null_silver_orders_exceptions_order_id.364ad54165": ["model.orderly.silver_orders_exceptions"], "test.orderly.not_null_silver_orders_exceptions_cost_centre_id.0471b3c25c": ["model.orderly.silver_orders_exceptions"], "test.orderly.relationships_silver_orders_exceptions_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.a08628861b": ["model.orderly.silver_cost_centres", "model.orderly.silver_orders_exceptions"], "test.orderly.not_null_silver_orders_exceptions_flag_missing_in_seed.e6356eaf4c": ["model.orderly.silver_orders_exceptions"], "test.orderly.not_null_silver_orders_exceptions_flag_name_mismatch.0f05a718b3": ["model.orderly.silver_orders_exceptions"], "test.orderly.not_null_silver_orders_exceptions_flag_vendor_mismatch.9cb8b2e8c0": ["model.orderly.silver_orders_exceptions"], "test.orderly.relationships_silver_orders_exceptions_matched_vendor_id__vendor_id__ref_silver_vendor_master_.a77ffcebe2": ["model.orderly.silver_orders_exceptions", "model.orderly.silver_vendor_master"], "test.orderly.not_null_silver_orders_exceptions_exception_type.77f164c7dc": ["model.orderly.silver_orders_exceptions"], "test.orderly.accepted_values_silver_orders_exceptions_exception_type__SKU_NOT_IN_SEED__NAME_MISMATCH__VENDOR_MISMATCH__OTHER.205c522918": ["model.orderly.silver_orders_exceptions"], "test.orderly.not_null_silver_orders_nonproduct_line_uid.8091fb2c59": ["model.orderly.silver_orders_nonproduct"], "test.orderly.not_null_silver_orders_nonproduct_order_id.3a8ade98c1": ["model.orderly.silver_orders_nonproduct"], "test.orderly.not_null_silver_orders_nonproduct_line_number.1a4546bd1e": ["model.orderly.silver_orders_nonproduct"], "test.orderly.not_null_silver_orders_nonproduct_cost_centre_id.7393252a5c": ["model.orderly.silver_orders_nonproduct"], "test.orderly.relationships_silver_orders_nonproduct_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.9fedd9b7b8": ["model.orderly.silver_cost_centres", "model.orderly.silver_orders_nonproduct"], "test.orderly.not_null_silver_orders_nonproduct_non_product_hint.dcb0a08220": ["model.orderly.silver_orders_nonproduct"], "test.orderly.accepted_values_silver_orders_nonproduct_non_product_hint__True.b4634ac637": ["model.orderly.silver_orders_nonproduct"], "test.orderly.not_null_silver_orders_nonproduct_record_type.0e44366ce7": ["model.orderly.silver_orders_nonproduct"], "test.orderly.accepted_values_silver_orders_nonproduct_record_type__NON_PRODUCT.7466a51c96": ["model.orderly.silver_orders_nonproduct"], "test.orderly.not_null_stg_orders_order_id.81cfe2fe64": ["model.orderly.stg_orders"], "test.orderly.not_null_stg_orders_line_number.a3c5759041": ["model.orderly.stg_orders"], "test.orderly.not_null_stg_orders_order_date.2177a3e8bb": ["model.orderly.stg_orders"], "test.orderly.not_null_stg_orders_source_filename.e6efa88729": ["model.orderly.stg_orders"], "test.orderly.not_null_stg_orders_created_timestamp.43243a2aa3": ["model.orderly.stg_orders"], "test.orderly.not_null_stg_orders_non_product_hint.d5fa25adb5": ["model.orderly.stg_orders"], "test.orderly.accepted_values_stg_orders_non_product_hint__True__False.a0dbc2359c": ["model.orderly.stg_orders"], "test.orderly.not_null_stg_orders_line_uid.6ffdc1f9a0": ["model.orderly.stg_orders"], "test.orderly.unique_stg_orders_line_uid.b6d5c10ab2": ["model.orderly.stg_orders"], "test.orderly.assert_rowcount_stg_orders_.a31a6802f6": ["model.orderly.stg_orders"], "test.orderly.not_null_stg_exchange_rates_date.da1c3d5d11": ["model.orderly.stg_exchange_rates"], "test.orderly.not_null_stg_exchange_rates_from_currency.8ceb6b41c7": ["model.orderly.stg_exchange_rates"], "test.orderly.accepted_values_stg_exchange_rates_from_currency__USD.1af9258c1c": ["model.orderly.stg_exchange_rates"], "test.orderly.not_null_stg_exchange_rates_to_currency.a37474ed90": ["model.orderly.stg_exchange_rates"], "test.orderly.accepted_values_stg_exchange_rates_to_currency__AUD.5fdcfcd85e": ["model.orderly.stg_exchange_rates"], "test.orderly.not_null_stg_exchange_rates_exchange_rate.f785873422": ["model.orderly.stg_exchange_rates"], "test.orderly.not_null_stg_exchange_rates_rate_source.1b9c688f61": ["model.orderly.stg_exchange_rates"], "test.orderly.accepted_values_stg_exchange_rates_rate_source__SOURCE__CALCULATED__INTERPOLATED__FORWARD_FILLED.e4c74b18a9": ["model.orderly.stg_exchange_rates"], "model.orderly.stg_orders_fuzz_scores": ["model.orderly.raw_vendor_master", "model.orderly.stg_orders"], "test.orderly.not_null_stg_orders_fuzz_scores_line_uid.8ef17e14fa": ["model.orderly.stg_orders_fuzz_scores"], "test.orderly.not_null_stg_orders_fuzz_scores_fuzz_score.035db26ed9": ["model.orderly.stg_orders_fuzz_scores"], "model.orderly.stg_orders_with_flags": ["model.orderly.stg_orders", "model.orderly.stg_orders_fuzz_scores", "seed.orderly.ref_sku_names"], "test.orderly.not_null_stg_orders_with_flags_line_uid.f58baaece9": ["model.orderly.stg_orders_with_flags"], "test.orderly.unique_stg_orders_with_flags_line_uid.7ccd72d1b2": ["model.orderly.stg_orders_with_flags"], "test.orderly.not_null_stg_orders_with_flags_flag_missing_in_seed.0cf16eaf21": ["model.orderly.stg_orders_with_flags"], "test.orderly.not_null_stg_orders_with_flags_flag_name_mismatch.d3201bfa02": ["model.orderly.stg_orders_with_flags"], "test.orderly.not_null_stg_orders_with_flags_flag_vendor_mismatch.3ba054e8cd": ["model.orderly.stg_orders_with_flags"], "test.orderly.not_null_stg_orders_with_flags_has_quality_issues.181f84f147": ["model.orderly.stg_orders_with_flags"]}, "child_map": {"model.orderly.raw_cost_centres": ["model.orderly.silver_cost_centres", "test.orderly.assert_rowcount_raw_cost_centres_.fb0877bd01", "test.orderly.not_null_raw_cost_centres_cost_centre_id.8f9d84fd2f", "test.orderly.not_null_raw_cost_centres_cost_centre_name.6a69a7a5a0", "test.orderly.not_null_raw_cost_centres_country_code.fb9d834802", "test.orderly.unique_raw_cost_centres_cost_centre_id.69926f60ce"], "model.orderly.raw_exchange_rates": ["model.orderly.stg_exchange_rates", "test.orderly.assert_rowcount_raw_exchange_rates_.2773ebf085", "test.orderly.not_null_raw_exchange_rates_date.91d5cbd900", "test.orderly.not_null_raw_exchange_rates_exchange_rate.7034e7e9c9", "test.orderly.not_null_raw_exchange_rates_from_currency.3a9d1a7064", "test.orderly.not_null_raw_exchange_rates_to_currency.06af868b77"], "model.orderly.raw_orders": ["model.orderly.stg_orders", "test.orderly.assert_rowcount_raw_orders_.08dcc140e0", "test.orderly.not_null_raw_orders_order_date.3ab6fcc91f", "test.orderly.not_null_raw_orders_order_id.e74425a338"], "model.orderly.raw_vendor_master": ["model.orderly.silver_vendor_master", "model.orderly.stg_orders_fuzz_scores", "test.orderly.assert_rowcount_raw_vendor_master_.5d7f055440", "test.orderly.not_null_raw_vendor_master_vendor_id.4fb57d1c2c", "test.orderly.not_null_raw_vendor_master_vendor_name.53003e37f2", "test.orderly.unique_raw_vendor_master_vendor_id.c9d11def2b"], "model.orderly.dim_cost_centre": ["model.orderly.fct_data_quality", "model.orderly.fct_order_line", "model.orderly.fct_price_variance", "test.orderly.not_null_dim_cost_centre_cost_centre_id.574b1e76a3", "test.orderly.not_null_dim_cost_centre_cost_centre_key.27832503c9", "test.orderly.relationships_fct_data_quality_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.3daf380639", "test.orderly.relationships_fct_order_line_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.d98e8146ea", "test.orderly.relationships_fct_price_variance_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.c9715b92c4", "test.orderly.unique_dim_cost_centre_cost_centre_id.1c685a260f", "test.orderly.unique_dim_cost_centre_cost_centre_key.14609e741e"], "model.orderly.dim_date": ["model.orderly.fct_data_quality", "model.orderly.fct_order_line", "model.orderly.fct_price_variance", "test.orderly.not_null_dim_date_date_actual.85284edc63", "test.orderly.not_null_dim_date_date_key.881d0a31b6", "test.orderly.relationships_fct_data_quality_date_key__date_key__ref_dim_date_.33803ea8c5", "test.orderly.relationships_fct_order_line_date_key__date_key__ref_dim_date_.ae3d7a81c1", "test.orderly.relationships_fct_order_line_delivery_date_key__date_key__ref_dim_date_.a2d9c7cd0b", "test.orderly.relationships_fct_price_variance_date_key__date_key__ref_dim_date_.d5c972a968", "test.orderly.unique_dim_date_date_key.0869fd48f9"], "model.orderly.dim_product": ["model.orderly.fct_data_quality", "model.orderly.fct_order_line", "model.orderly.fct_price_variance", "test.orderly.not_null_dim_product_product_key.f0e1d838d3", "test.orderly.not_null_dim_product_sku_id.f725edd0d7", "test.orderly.relationships_fct_data_quality_product_key__product_key__ref_dim_product_.cfd4cd42e3", "test.orderly.relationships_fct_order_line_product_key__product_key__ref_dim_product_.4b1fa1ca5a", "test.orderly.relationships_fct_price_variance_product_key__product_key__ref_dim_product_.159e26688c", "test.orderly.unique_dim_product_product_key.1753236bd0", "test.orderly.unique_dim_product_sku_id.cf0a3fd846"], "model.orderly.dim_vendor": ["model.orderly.fct_data_quality", "model.orderly.fct_order_line", "model.orderly.fct_price_variance", "test.orderly.not_null_dim_vendor_vendor_id.79e84c8282", "test.orderly.not_null_dim_vendor_vendor_key.385212c4ba", "test.orderly.relationships_fct_data_quality_vendor_key__vendor_key__ref_dim_vendor_.4eeddf7bad", "test.orderly.relationships_fct_order_line_vendor_key__vendor_key__ref_dim_vendor_.a18369f0fd", "test.orderly.relationships_fct_price_variance_vendor_key__vendor_key__ref_dim_vendor_.b2134bad76", "test.orderly.unique_dim_vendor_vendor_id.849a2be65e", "test.orderly.unique_dim_vendor_vendor_key.3de6f52c68"], "model.orderly.fct_data_quality": ["test.orderly.accepted_values_fct_data_quality_exception_count__1.33de0bdd0e", "test.orderly.accepted_values_fct_data_quality_exception_type__SKU_NOT_IN_SEED__NAME_MISMATCH__VENDOR_MISMATCH__OTHER.a5a5ac2b77", "test.orderly.not_null_fct_data_quality_cost_centre_key.e37fb6a9b5", "test.orderly.not_null_fct_data_quality_data_quality_key.3750a32bd1", "test.orderly.not_null_fct_data_quality_date_key.62ef09eb7e", "test.orderly.not_null_fct_data_quality_exception_count.19cc9f5aa4", "test.orderly.not_null_fct_data_quality_exception_type.b0a64c5fd4", "test.orderly.relationships_fct_data_quality_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.3daf380639", "test.orderly.relationships_fct_data_quality_date_key__date_key__ref_dim_date_.33803ea8c5", "test.orderly.relationships_fct_data_quality_product_key__product_key__ref_dim_product_.cfd4cd42e3", "test.orderly.relationships_fct_data_quality_vendor_key__vendor_key__ref_dim_vendor_.4eeddf7bad", "test.orderly.unique_fct_data_quality_data_quality_key.313a3c0bef"], "model.orderly.fct_order_line": ["test.orderly.not_null_fct_order_line_cost_centre_key.c9f98ec08f", "test.orderly.not_null_fct_order_line_currency_key.a6945afed1", "test.orderly.not_null_fct_order_line_date_key.e91f7aa57e", "test.orderly.not_null_fct_order_line_line_number.56dfeffb5b", "test.orderly.not_null_fct_order_line_line_total_amount.17988db3ee", "test.orderly.not_null_fct_order_line_order_id.445981c495", "test.orderly.not_null_fct_order_line_order_line_key.f742e418df", "test.orderly.not_null_fct_order_line_product_key.6be51edf29", "test.orderly.not_null_fct_order_line_quantity.7fe09de398", "test.orderly.not_null_fct_order_line_unit_price.bfa976e64f", "test.orderly.not_null_fct_order_line_vendor_key.b752e17bde", "test.orderly.relationships_fct_order_line_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.d98e8146ea", "test.orderly.relationships_fct_order_line_date_key__date_key__ref_dim_date_.ae3d7a81c1", "test.orderly.relationships_fct_order_line_delivery_date_key__date_key__ref_dim_date_.a2d9c7cd0b", "test.orderly.relationships_fct_order_line_product_key__product_key__ref_dim_product_.4b1fa1ca5a", "test.orderly.relationships_fct_order_line_vendor_key__vendor_key__ref_dim_vendor_.a18369f0fd", "test.orderly.unique_fct_order_line_order_line_key.8148914a14"], "model.orderly.fct_price_variance": ["test.orderly.accepted_values_fct_price_variance_has_significant_variance__True.cf23de8026", "test.orderly.not_null_fct_price_variance_avg_unit_price.fea1cbb91c", "test.orderly.not_null_fct_price_variance_cost_centre_key.a5f7cf2a8d", "test.orderly.not_null_fct_price_variance_date_key.57786f0dc4", "test.orderly.not_null_fct_price_variance_has_significant_variance.31f690502a", "test.orderly.not_null_fct_price_variance_max_unit_price.8bb1b694f0", "test.orderly.not_null_fct_price_variance_min_unit_price.265d2e1419", "test.orderly.not_null_fct_price_variance_order_count.9390ca678b", "test.orderly.not_null_fct_price_variance_price_variance_key.53f223732f", "test.orderly.not_null_fct_price_variance_product_key.3ac9fb2809", "test.orderly.not_null_fct_price_variance_total_quantity.9ea9f5f7d2", "test.orderly.not_null_fct_price_variance_vendor_key.6941b717f3", "test.orderly.relationships_fct_price_variance_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.c9715b92c4", "test.orderly.relationships_fct_price_variance_date_key__date_key__ref_dim_date_.d5c972a968", "test.orderly.relationships_fct_price_variance_product_key__product_key__ref_dim_product_.159e26688c", "test.orderly.relationships_fct_price_variance_vendor_key__vendor_key__ref_dim_vendor_.b2134bad76", "test.orderly.unique_fct_price_variance_price_variance_key.d95d8c164b"], "model.orderly.silver_cost_centres": ["model.orderly.dim_cost_centre", "test.orderly.not_null_silver_cost_centres_cost_centre_id.8544dd19f9", "test.orderly.not_null_silver_cost_centres_cost_centre_name.022c7348a7", "test.orderly.not_null_silver_cost_centres_country_code.3c41f33577", "test.orderly.relationships_silver_orders_exceptions_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.a08628861b", "test.orderly.relationships_silver_orders_nonproduct_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.9fedd9b7b8", "test.orderly.relationships_silver_orders_valid_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.9feae6c48c", "test.orderly.unique_silver_cost_centres_cost_centre_id.5fb3ad4552"], "model.orderly.silver_exchange_rates": ["model.orderly.dim_date", "test.orderly.accepted_values_silver_exchange_rates_from_currency__USD.34caf75371", "test.orderly.accepted_values_silver_exchange_rates_rate_source__SOURCE__CALCULATED__INTERPOLATED__FORWARD_FILLED.2d3a81299c", "test.orderly.accepted_values_silver_exchange_rates_to_currency__AUD.5ce093812e", "test.orderly.not_null_silver_exchange_rates_date.1d0e1b9364", "test.orderly.not_null_silver_exchange_rates_exchange_rate.ec5d652b4f", "test.orderly.not_null_silver_exchange_rates_from_currency.5bfdc62e67", "test.orderly.not_null_silver_exchange_rates_rate_source.2c70c00d74", "test.orderly.not_null_silver_exchange_rates_to_currency.0d7934ce1e"], "model.orderly.silver_orders_exceptions": ["model.orderly.fct_data_quality", "test.orderly.accepted_values_silver_orders_exceptions_exception_type__SKU_NOT_IN_SEED__NAME_MISMATCH__VENDOR_MISMATCH__OTHER.205c522918", "test.orderly.not_null_silver_orders_exceptions_cost_centre_id.0471b3c25c", "test.orderly.not_null_silver_orders_exceptions_exception_type.77f164c7dc", "test.orderly.not_null_silver_orders_exceptions_flag_missing_in_seed.e6356eaf4c", "test.orderly.not_null_silver_orders_exceptions_flag_name_mismatch.0f05a718b3", "test.orderly.not_null_silver_orders_exceptions_flag_vendor_mismatch.9cb8b2e8c0", "test.orderly.not_null_silver_orders_exceptions_line_uid.74cc7a2223", "test.orderly.not_null_silver_orders_exceptions_order_id.364ad54165", "test.orderly.relationships_silver_orders_exceptions_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.a08628861b", "test.orderly.relationships_silver_orders_exceptions_matched_vendor_id__vendor_id__ref_silver_vendor_master_.a77ffcebe2"], "model.orderly.silver_orders_nonproduct": ["test.orderly.accepted_values_silver_orders_nonproduct_non_product_hint__True.b4634ac637", "test.orderly.accepted_values_silver_orders_nonproduct_record_type__NON_PRODUCT.7466a51c96", "test.orderly.not_null_silver_orders_nonproduct_cost_centre_id.7393252a5c", "test.orderly.not_null_silver_orders_nonproduct_line_number.1a4546bd1e", "test.orderly.not_null_silver_orders_nonproduct_line_uid.8091fb2c59", "test.orderly.not_null_silver_orders_nonproduct_non_product_hint.dcb0a08220", "test.orderly.not_null_silver_orders_nonproduct_order_id.3a8ade98c1", "test.orderly.not_null_silver_orders_nonproduct_record_type.0e44366ce7", "test.orderly.relationships_silver_orders_nonproduct_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.9fedd9b7b8"], "model.orderly.silver_orders_valid": ["model.orderly.dim_product", "model.orderly.fct_order_line", "model.orderly.fct_price_variance", "test.orderly.not_null_silver_orders_valid_cost_centre_id.76ba75ddb2", "test.orderly.not_null_silver_orders_valid_line_uid.78905c7a65", "test.orderly.not_null_silver_orders_valid_order_id.39ddd69369", "test.orderly.not_null_silver_orders_valid_sku_id.93cfc9d155", "test.orderly.not_null_silver_orders_valid_vendor_fuzz_score.c9db625f1c", "test.orderly.relationships_silver_orders_valid_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.9feae6c48c", "test.orderly.relationships_silver_orders_valid_matched_vendor_id__vendor_id__ref_silver_vendor_master_.f82cd404e2", "test.orderly.unique_silver_orders_valid_line_uid.567bb943c8"], "model.orderly.silver_vendor_master": ["model.orderly.dim_vendor", "test.orderly.not_null_silver_vendor_master_vendor_id.02955e7f5c", "test.orderly.not_null_silver_vendor_master_vendor_name.ffb9639c10", "test.orderly.relationships_silver_orders_exceptions_matched_vendor_id__vendor_id__ref_silver_vendor_master_.a77ffcebe2", "test.orderly.relationships_silver_orders_valid_matched_vendor_id__vendor_id__ref_silver_vendor_master_.f82cd404e2", "test.orderly.unique_silver_vendor_master_vendor_id.723dec8279"], "model.orderly.stg_exchange_rates": ["model.orderly.silver_exchange_rates", "test.orderly.accepted_values_stg_exchange_rates_from_currency__USD.1af9258c1c", "test.orderly.accepted_values_stg_exchange_rates_rate_source__SOURCE__CALCULATED__INTERPOLATED__FORWARD_FILLED.e4c74b18a9", "test.orderly.accepted_values_stg_exchange_rates_to_currency__AUD.5fdcfcd85e", "test.orderly.not_null_stg_exchange_rates_date.da1c3d5d11", "test.orderly.not_null_stg_exchange_rates_exchange_rate.f785873422", "test.orderly.not_null_stg_exchange_rates_from_currency.8ceb6b41c7", "test.orderly.not_null_stg_exchange_rates_rate_source.1b9c688f61", "test.orderly.not_null_stg_exchange_rates_to_currency.a37474ed90"], "model.orderly.stg_orders": ["model.orderly.stg_orders_fuzz_scores", "model.orderly.stg_orders_with_flags", "test.orderly.accepted_values_stg_orders_non_product_hint__True__False.a0dbc2359c", "test.orderly.assert_rowcount_stg_orders_.a31a6802f6", "test.orderly.not_null_stg_orders_created_timestamp.43243a2aa3", "test.orderly.not_null_stg_orders_line_number.a3c5759041", "test.orderly.not_null_stg_orders_line_uid.6ffdc1f9a0", "test.orderly.not_null_stg_orders_non_product_hint.d5fa25adb5", "test.orderly.not_null_stg_orders_order_date.2177a3e8bb", "test.orderly.not_null_stg_orders_order_id.81cfe2fe64", "test.orderly.not_null_stg_orders_source_filename.e6efa88729", "test.orderly.unique_stg_orders_line_uid.b6d5c10ab2"], "model.orderly.stg_orders_export": [], "seed.orderly.ref_sku_names": ["model.orderly.dim_product", "model.orderly.stg_orders_with_flags"], "operation.orderly.orderly-on-run-start-0": [], "operation.orderly.orderly-on-run-start-1": [], "operation.orderly.orderly-on-run-start-2": [], "operation.orderly.orderly-on-run-start-3": [], "test.orderly.not_null_raw_orders_order_id.e74425a338": [], "test.orderly.not_null_raw_orders_order_date.3ab6fcc91f": [], "test.orderly.assert_rowcount_raw_orders_.08dcc140e0": [], "test.orderly.not_null_raw_vendor_master_vendor_id.4fb57d1c2c": [], "test.orderly.unique_raw_vendor_master_vendor_id.c9d11def2b": [], "test.orderly.not_null_raw_vendor_master_vendor_name.53003e37f2": [], "test.orderly.assert_rowcount_raw_vendor_master_.5d7f055440": [], "test.orderly.not_null_raw_cost_centres_cost_centre_id.8f9d84fd2f": [], "test.orderly.unique_raw_cost_centres_cost_centre_id.69926f60ce": [], "test.orderly.not_null_raw_cost_centres_cost_centre_name.6a69a7a5a0": [], "test.orderly.not_null_raw_cost_centres_country_code.fb9d834802": [], "test.orderly.assert_rowcount_raw_cost_centres_.fb0877bd01": [], "test.orderly.not_null_raw_exchange_rates_date.91d5cbd900": [], "test.orderly.not_null_raw_exchange_rates_from_currency.3a9d1a7064": [], "test.orderly.not_null_raw_exchange_rates_to_currency.06af868b77": [], "test.orderly.not_null_raw_exchange_rates_exchange_rate.7034e7e9c9": [], "test.orderly.assert_rowcount_raw_exchange_rates_.2773ebf085": [], "test.orderly.unique_dim_date_date_key.0869fd48f9": [], "test.orderly.not_null_dim_date_date_key.881d0a31b6": [], "test.orderly.not_null_dim_date_date_actual.85284edc63": [], "test.orderly.unique_dim_cost_centre_cost_centre_key.14609e741e": [], "test.orderly.not_null_dim_cost_centre_cost_centre_key.27832503c9": [], "test.orderly.unique_dim_cost_centre_cost_centre_id.1c685a260f": [], "test.orderly.not_null_dim_cost_centre_cost_centre_id.574b1e76a3": [], "test.orderly.unique_dim_vendor_vendor_key.3de6f52c68": [], "test.orderly.not_null_dim_vendor_vendor_key.385212c4ba": [], "test.orderly.unique_dim_vendor_vendor_id.849a2be65e": [], "test.orderly.not_null_dim_vendor_vendor_id.79e84c8282": [], "test.orderly.unique_dim_product_product_key.1753236bd0": [], "test.orderly.not_null_dim_product_product_key.f0e1d838d3": [], "test.orderly.unique_dim_product_sku_id.cf0a3fd846": [], "test.orderly.not_null_dim_product_sku_id.f725edd0d7": [], "test.orderly.unique_fct_order_line_order_line_key.8148914a14": [], "test.orderly.not_null_fct_order_line_order_line_key.f742e418df": [], "test.orderly.not_null_fct_order_line_date_key.e91f7aa57e": [], "test.orderly.relationships_fct_order_line_date_key__date_key__ref_dim_date_.ae3d7a81c1": [], "test.orderly.relationships_fct_order_line_delivery_date_key__date_key__ref_dim_date_.a2d9c7cd0b": [], "test.orderly.not_null_fct_order_line_cost_centre_key.c9f98ec08f": [], "test.orderly.relationships_fct_order_line_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.d98e8146ea": [], "test.orderly.not_null_fct_order_line_vendor_key.b752e17bde": [], "test.orderly.relationships_fct_order_line_vendor_key__vendor_key__ref_dim_vendor_.a18369f0fd": [], "test.orderly.not_null_fct_order_line_product_key.6be51edf29": [], "test.orderly.relationships_fct_order_line_product_key__product_key__ref_dim_product_.4b1fa1ca5a": [], "test.orderly.not_null_fct_order_line_currency_key.a6945afed1": [], "test.orderly.not_null_fct_order_line_quantity.7fe09de398": [], "test.orderly.not_null_fct_order_line_unit_price.bfa976e64f": [], "test.orderly.not_null_fct_order_line_line_total_amount.17988db3ee": [], "test.orderly.not_null_fct_order_line_order_id.445981c495": [], "test.orderly.not_null_fct_order_line_line_number.56dfeffb5b": [], "test.orderly.unique_fct_data_quality_data_quality_key.313a3c0bef": [], "test.orderly.not_null_fct_data_quality_data_quality_key.3750a32bd1": [], "test.orderly.not_null_fct_data_quality_date_key.62ef09eb7e": [], "test.orderly.relationships_fct_data_quality_date_key__date_key__ref_dim_date_.33803ea8c5": [], "test.orderly.not_null_fct_data_quality_cost_centre_key.e37fb6a9b5": [], "test.orderly.relationships_fct_data_quality_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.3daf380639": [], "test.orderly.relationships_fct_data_quality_vendor_key__vendor_key__ref_dim_vendor_.4eeddf7bad": [], "test.orderly.relationships_fct_data_quality_product_key__product_key__ref_dim_product_.cfd4cd42e3": [], "test.orderly.not_null_fct_data_quality_exception_count.19cc9f5aa4": [], "test.orderly.accepted_values_fct_data_quality_exception_count__1.33de0bdd0e": [], "test.orderly.not_null_fct_data_quality_exception_type.b0a64c5fd4": [], "test.orderly.accepted_values_fct_data_quality_exception_type__SKU_NOT_IN_SEED__NAME_MISMATCH__VENDOR_MISMATCH__OTHER.a5a5ac2b77": [], "test.orderly.unique_fct_price_variance_price_variance_key.d95d8c164b": [], "test.orderly.not_null_fct_price_variance_price_variance_key.53f223732f": [], "test.orderly.not_null_fct_price_variance_date_key.57786f0dc4": [], "test.orderly.relationships_fct_price_variance_date_key__date_key__ref_dim_date_.d5c972a968": [], "test.orderly.not_null_fct_price_variance_product_key.3ac9fb2809": [], "test.orderly.relationships_fct_price_variance_product_key__product_key__ref_dim_product_.159e26688c": [], "test.orderly.not_null_fct_price_variance_vendor_key.6941b717f3": [], "test.orderly.relationships_fct_price_variance_vendor_key__vendor_key__ref_dim_vendor_.b2134bad76": [], "test.orderly.not_null_fct_price_variance_cost_centre_key.a5f7cf2a8d": [], "test.orderly.relationships_fct_price_variance_cost_centre_key__cost_centre_key__ref_dim_cost_centre_.c9715b92c4": [], "test.orderly.not_null_fct_price_variance_avg_unit_price.fea1cbb91c": [], "test.orderly.not_null_fct_price_variance_min_unit_price.265d2e1419": [], "test.orderly.not_null_fct_price_variance_max_unit_price.8bb1b694f0": [], "test.orderly.not_null_fct_price_variance_order_count.9390ca678b": [], "test.orderly.not_null_fct_price_variance_total_quantity.9ea9f5f7d2": [], "test.orderly.not_null_fct_price_variance_has_significant_variance.31f690502a": [], "test.orderly.accepted_values_fct_price_variance_has_significant_variance__True.cf23de8026": [], "test.orderly.not_null_silver_cost_centres_cost_centre_id.8544dd19f9": [], "test.orderly.unique_silver_cost_centres_cost_centre_id.5fb3ad4552": [], "test.orderly.not_null_silver_cost_centres_cost_centre_name.022c7348a7": [], "test.orderly.not_null_silver_cost_centres_country_code.3c41f33577": [], "test.orderly.not_null_silver_exchange_rates_date.1d0e1b9364": [], "test.orderly.not_null_silver_exchange_rates_from_currency.5bfdc62e67": [], "test.orderly.accepted_values_silver_exchange_rates_from_currency__USD.34caf75371": [], "test.orderly.not_null_silver_exchange_rates_to_currency.0d7934ce1e": [], "test.orderly.accepted_values_silver_exchange_rates_to_currency__AUD.5ce093812e": [], "test.orderly.not_null_silver_exchange_rates_exchange_rate.ec5d652b4f": [], "test.orderly.not_null_silver_exchange_rates_rate_source.2c70c00d74": [], "test.orderly.accepted_values_silver_exchange_rates_rate_source__SOURCE__CALCULATED__INTERPOLATED__FORWARD_FILLED.2d3a81299c": [], "test.orderly.not_null_silver_vendor_master_vendor_id.02955e7f5c": [], "test.orderly.unique_silver_vendor_master_vendor_id.723dec8279": [], "test.orderly.not_null_silver_vendor_master_vendor_name.ffb9639c10": [], "test.orderly.not_null_silver_orders_valid_line_uid.78905c7a65": [], "test.orderly.unique_silver_orders_valid_line_uid.567bb943c8": [], "test.orderly.not_null_silver_orders_valid_order_id.39ddd69369": [], "test.orderly.not_null_silver_orders_valid_sku_id.93cfc9d155": [], "test.orderly.not_null_silver_orders_valid_cost_centre_id.76ba75ddb2": [], "test.orderly.relationships_silver_orders_valid_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.9feae6c48c": [], "test.orderly.relationships_silver_orders_valid_matched_vendor_id__vendor_id__ref_silver_vendor_master_.f82cd404e2": [], "test.orderly.not_null_silver_orders_valid_vendor_fuzz_score.c9db625f1c": [], "test.orderly.not_null_silver_orders_exceptions_line_uid.74cc7a2223": [], "test.orderly.not_null_silver_orders_exceptions_order_id.364ad54165": [], "test.orderly.not_null_silver_orders_exceptions_cost_centre_id.0471b3c25c": [], "test.orderly.relationships_silver_orders_exceptions_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.a08628861b": [], "test.orderly.not_null_silver_orders_exceptions_flag_missing_in_seed.e6356eaf4c": [], "test.orderly.not_null_silver_orders_exceptions_flag_name_mismatch.0f05a718b3": [], "test.orderly.not_null_silver_orders_exceptions_flag_vendor_mismatch.9cb8b2e8c0": [], "test.orderly.relationships_silver_orders_exceptions_matched_vendor_id__vendor_id__ref_silver_vendor_master_.a77ffcebe2": [], "test.orderly.not_null_silver_orders_exceptions_exception_type.77f164c7dc": [], "test.orderly.accepted_values_silver_orders_exceptions_exception_type__SKU_NOT_IN_SEED__NAME_MISMATCH__VENDOR_MISMATCH__OTHER.205c522918": [], "test.orderly.not_null_silver_orders_nonproduct_line_uid.8091fb2c59": [], "test.orderly.not_null_silver_orders_nonproduct_order_id.3a8ade98c1": [], "test.orderly.not_null_silver_orders_nonproduct_line_number.1a4546bd1e": [], "test.orderly.not_null_silver_orders_nonproduct_cost_centre_id.7393252a5c": [], "test.orderly.relationships_silver_orders_nonproduct_cost_centre_id__cost_centre_id__ref_silver_cost_centres_.9fedd9b7b8": [], "test.orderly.not_null_silver_orders_nonproduct_non_product_hint.dcb0a08220": [], "test.orderly.accepted_values_silver_orders_nonproduct_non_product_hint__True.b4634ac637": [], "test.orderly.not_null_silver_orders_nonproduct_record_type.0e44366ce7": [], "test.orderly.accepted_values_silver_orders_nonproduct_record_type__NON_PRODUCT.7466a51c96": [], "test.orderly.not_null_stg_orders_order_id.81cfe2fe64": [], "test.orderly.not_null_stg_orders_line_number.a3c5759041": [], "test.orderly.not_null_stg_orders_order_date.2177a3e8bb": [], "test.orderly.not_null_stg_orders_source_filename.e6efa88729": [], "test.orderly.not_null_stg_orders_created_timestamp.43243a2aa3": [], "test.orderly.not_null_stg_orders_non_product_hint.d5fa25adb5": [], "test.orderly.accepted_values_stg_orders_non_product_hint__True__False.a0dbc2359c": [], "test.orderly.not_null_stg_orders_line_uid.6ffdc1f9a0": [], "test.orderly.unique_stg_orders_line_uid.b6d5c10ab2": [], "test.orderly.assert_rowcount_stg_orders_.a31a6802f6": [], "test.orderly.not_null_stg_exchange_rates_date.da1c3d5d11": [], "test.orderly.not_null_stg_exchange_rates_from_currency.8ceb6b41c7": [], "test.orderly.accepted_values_stg_exchange_rates_from_currency__USD.1af9258c1c": [], "test.orderly.not_null_stg_exchange_rates_to_currency.a37474ed90": [], "test.orderly.accepted_values_stg_exchange_rates_to_currency__AUD.5fdcfcd85e": [], "test.orderly.not_null_stg_exchange_rates_exchange_rate.f785873422": [], "test.orderly.not_null_stg_exchange_rates_rate_source.1b9c688f61": [], "test.orderly.accepted_values_stg_exchange_rates_rate_source__SOURCE__CALCULATED__INTERPOLATED__FORWARD_FILLED.e4c74b18a9": [], "model.orderly.stg_orders_fuzz_scores": ["model.orderly.stg_orders_with_flags", "test.orderly.not_null_stg_orders_fuzz_scores_fuzz_score.035db26ed9", "test.orderly.not_null_stg_orders_fuzz_scores_line_uid.8ef17e14fa"], "test.orderly.not_null_stg_orders_fuzz_scores_line_uid.8ef17e14fa": [], "test.orderly.not_null_stg_orders_fuzz_scores_fuzz_score.035db26ed9": [], "model.orderly.stg_orders_with_flags": ["model.orderly.silver_orders_exceptions", "model.orderly.silver_orders_nonproduct", "model.orderly.silver_orders_valid", "test.orderly.not_null_stg_orders_with_flags_flag_missing_in_seed.0cf16eaf21", "test.orderly.not_null_stg_orders_with_flags_flag_name_mismatch.d3201bfa02", "test.orderly.not_null_stg_orders_with_flags_flag_vendor_mismatch.3ba054e8cd", "test.orderly.not_null_stg_orders_with_flags_has_quality_issues.181f84f147", "test.orderly.not_null_stg_orders_with_flags_line_uid.f58baaece9", "test.orderly.unique_stg_orders_with_flags_line_uid.7ccd72d1b2"], "test.orderly.not_null_stg_orders_with_flags_line_uid.f58baaece9": [], "test.orderly.unique_stg_orders_with_flags_line_uid.7ccd72d1b2": [], "test.orderly.not_null_stg_orders_with_flags_flag_missing_in_seed.0cf16eaf21": [], "test.orderly.not_null_stg_orders_with_flags_flag_name_mismatch.d3201bfa02": [], "test.orderly.not_null_stg_orders_with_flags_flag_vendor_mismatch.3ba054e8cd": [], "test.orderly.not_null_stg_orders_with_flags_has_quality_issues.181f84f147": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}